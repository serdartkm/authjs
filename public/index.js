!function(){"use strict";var t,e,r,n,o,i={},s=[],a=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;function c(t,e){for(var r in e)t[r]=e[r];return t}function u(t){var e=t.parentNode;e&&e.removeChild(t)}function f(t,e,r){var n,o,i,s,a=arguments;if(e=c({},e),arguments.length>3)for(r=[r],n=3;n<arguments.length;n++)r.push(a[n]);if(null!=r&&(e.children=r),null!=t&&null!=t.defaultProps)for(o in t.defaultProps)void 0===e[o]&&(e[o]=t.defaultProps[o]);return s=e.key,null!=(i=e.ref)&&delete e.ref,null!=s&&delete e.key,h(t,e,s,i)}function h(e,r,n,o){var i={type:e,props:r,key:n,ref:o,__k:null,__:null,__b:0,__e:null,__d:null,__c:null,constructor:void 0};return t.vnode&&t.vnode(i),i}function l(t){return t.children}function p(t,e){this.props=t,this.context=e}function d(t,e){if(null==e)return t.__?d(t.__,t.__.__k.indexOf(t)+1):null;for(var r;e<t.__k.length;e++)if(null!=(r=t.__k[e])&&null!=r.__e)return r.__e;return"function"==typeof t.type?d(t):null}function y(t){var e,r;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(r=t.__k[e])&&null!=r.__e){t.__e=t.__c.base=r.__e;break}return y(t)}}function g(o){(!o.__d&&(o.__d=!0)&&1===e.push(o)||n!==t.debounceRendering)&&((n=t.debounceRendering)||r)(m)}function m(){var t,r,n,o,i,s,a;for(e.sort(function(t,e){return e.__v.__b-t.__v.__b});t=e.pop();)t.__d&&(n=void 0,o=void 0,s=(i=(r=t).__v).__e,(a=r.__P)&&(n=[],o=k(a,i,c({},i),r.__n,void 0!==a.ownerSVGElement,null,n,null==s?d(i):s),A(n,i),o!=s&&y(i)))}function v(t,e,r,n,o,a,c,f,h){var l,p,y,g,m,v,w,C=r&&r.__k||s,_=C.length;if(f==i&&(f=null!=a?a[0]:_?d(r,0):null),l=0,e.__k=b(e.__k,function(r){if(null!=r){if(r.__=e,r.__b=e.__b+1,null===(y=C[l])||y&&r.key==y.key&&r.type===y.type)C[l]=void 0;else for(p=0;p<_;p++){if((y=C[p])&&r.key==y.key&&r.type===y.type){C[p]=void 0;break}y=null}if(g=k(t,r,y=y||i,n,o,a,c,f,h),(p=r.ref)&&y.ref!=p&&(w||(w=[]),y.ref&&w.push(y.ref,null,r),w.push(p,r.__c||g,r)),null!=g){if(null==v&&(v=g),null!=r.__d)g=r.__d,r.__d=null;else if(a==y||g!=f||null==g.parentNode){t:if(null==f||f.parentNode!==t)t.appendChild(g);else{for(m=f,p=0;(m=m.nextSibling)&&p<_;p+=2)if(m==g)break t;t.insertBefore(g,f)}"option"==e.type&&(t.value="")}f=g.nextSibling,"function"==typeof e.type&&(e.__d=g)}}return l++,r}),e.__e=v,null!=a&&"function"!=typeof e.type)for(l=a.length;l--;)null!=a[l]&&u(a[l]);for(l=_;l--;)null!=C[l]&&F(C[l],C[l]);if(w)for(l=0;l<w.length;l++)S(w[l],w[++l],w[++l])}function b(t,e,r){if(null==r&&(r=[]),null==t||"boolean"==typeof t)e&&r.push(e(null));else if(Array.isArray(t))for(var n=0;n<t.length;n++)b(t[n],e,r);else r.push(e?e("string"==typeof t||"number"==typeof t?h(null,t,null,null):null!=t.__e||null!=t.__c?h(t.type,t.props,t.key,null):t):t);return r}function w(t,e,r){"-"===e[0]?t.setProperty(e,r):t[e]="number"==typeof r&&!1===a.test(e)?r+"px":null==r?"":r}function C(t,e,r,n,o){var i,s,a,c,u;if(o?"className"===e&&(e="class"):"class"===e&&(e="className"),"key"===e||"children"===e);else if("style"===e)if(i=t.style,"string"==typeof r)i.cssText=r;else{if("string"==typeof n&&(i.cssText="",n=null),n)for(s in n)r&&s in r||w(i,s,"");if(r)for(a in r)n&&r[a]===n[a]||w(i,a,r[a])}else"o"===e[0]&&"n"===e[1]?(c=e!==(e=e.replace(/Capture$/,"")),u=e.toLowerCase(),e=(u in t?u:e).slice(2),r?(n||t.addEventListener(e,_,c),(t.l||(t.l={}))[e]=r):t.removeEventListener(e,_,c)):"list"!==e&&"tagName"!==e&&"form"!==e&&!o&&e in t?t[e]=null==r?"":r:"function"!=typeof r&&"dangerouslySetInnerHTML"!==e&&(e!==(e=e.replace(/^xlink:?/,""))?null==r||!1===r?t.removeAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase()):t.setAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase(),r):null==r||!1===r?t.removeAttribute(e):t.setAttribute(e,r))}function _(e){this.l[e.type](t.event?t.event(e):e)}function k(e,r,n,o,i,s,a,u,f){var h,d,y,g,m,w,C,_,k,A,S=r.type;if(void 0!==r.constructor)return null;(h=t.__b)&&h(r);try{t:if("function"==typeof S){if(_=r.props,k=(h=S.contextType)&&o[h.__c],A=h?k?k.props.value:h.__:o,n.__c?C=(d=r.__c=n.__c).__=d.__E:("prototype"in S&&S.prototype.render?r.__c=d=new S(_,A):(r.__c=d=new p(_,A),d.constructor=S,d.render=x),k&&k.sub(d),d.props=_,d.state||(d.state={}),d.context=A,d.__n=o,y=d.__d=!0,d.__h=[]),null==d.__s&&(d.__s=d.state),null!=S.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=c({},d.__s)),c(d.__s,S.getDerivedStateFromProps(_,d.__s))),g=d.props,m=d.state,y)null==S.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(null==S.getDerivedStateFromProps&&null==d.__e&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(_,A),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(_,d.__s,A)){for(d.props=_,d.state=d.__s,d.__d=!1,d.__v=r,r.__e=n.__e,r.__k=n.__k,d.__h.length&&a.push(d),h=0;h<r.__k.length;h++)r.__k[h]&&(r.__k[h].__=r);break t}null!=d.componentWillUpdate&&d.componentWillUpdate(_,d.__s,A),null!=d.componentDidUpdate&&d.__h.push(function(){d.componentDidUpdate(g,m,w)})}d.context=A,d.props=_,d.state=d.__s,(h=t.__r)&&h(r),d.__d=!1,d.__v=r,d.__P=e,h=d.render(d.props,d.state,d.context),r.__k=b(null!=h&&h.type==l&&null==h.key?h.props.children:h),null!=d.getChildContext&&(o=c(c({},o),d.getChildContext())),y||null==d.getSnapshotBeforeUpdate||(w=d.getSnapshotBeforeUpdate(g,m)),v(e,r,n,o,i,s,a,u,f),d.base=r.__e,d.__h.length&&a.push(d),C&&(d.__E=d.__=null),d.__e=null}else r.__e=E(n.__e,r,n,o,i,s,a,f);(h=t.diffed)&&h(r)}catch(e){t.__e(e,r,n)}return r.__e}function A(e,r){t.__c&&t.__c(r,e),e.some(function(r){try{e=r.__h,r.__h=[],e.some(function(t){t.call(r)})}catch(e){t.__e(e,r.__v)}})}function E(t,e,r,n,o,a,c,u){var f,h,l,p,d,y=r.props,g=e.props;if(o="svg"===e.type||o,null==t&&null!=a)for(f=0;f<a.length;f++)if(null!=(h=a[f])&&(null===e.type?3===h.nodeType:h.localName===e.type)){t=h,a[f]=null;break}if(null==t){if(null===e.type)return document.createTextNode(g);t=o?document.createElementNS("http://www.w3.org/2000/svg",e.type):document.createElement(e.type),a=null}if(null===e.type)null!=a&&(a[a.indexOf(t)]=null),y!==g&&(t.data=g);else if(e!==r){if(null!=a&&(a=s.slice.call(t.childNodes)),l=(y=r.props||i).dangerouslySetInnerHTML,p=g.dangerouslySetInnerHTML,!u){if(y===i)for(y={},d=0;d<t.attributes.length;d++)y[t.attributes[d].name]=t.attributes[d].value;(p||l)&&(p&&l&&p.__html==l.__html||(t.innerHTML=p&&p.__html||""))}(function(t,e,r,n,o){var i;for(i in r)i in e||C(t,i,null,r[i],n);for(i in e)o&&"function"!=typeof e[i]||"value"===i||"checked"===i||r[i]===e[i]||C(t,i,e[i],r[i],n)})(t,g,y,o,u),e.__k=e.props.children,p||v(t,e,r,n,"foreignObject"!==e.type&&o,a,c,i,u),u||("value"in g&&void 0!==g.value&&g.value!==t.value&&(t.value=null==g.value?"":g.value),"checked"in g&&void 0!==g.checked&&g.checked!==t.checked&&(t.checked=g.checked))}return t}function S(e,r,n){try{"function"==typeof e?e(r):e.current=r}catch(e){t.__e(e,n)}}function F(e,r,n){var o,i,s;if(t.unmount&&t.unmount(e),(o=e.ref)&&S(o,null,r),n||"function"==typeof e.type||(n=null!=(i=e.__e)),e.__e=e.__d=null,null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){t.__e(e,r)}o.base=o.__P=null}if(o=e.__k)for(s=0;s<o.length;s++)o[s]&&F(o[s],r,n);null!=i&&u(i)}function x(t,e,r){return this.constructor(t,r)}t={__e:function(t,e){for(var r;e=e.__;)if((r=e.__c)&&!r.__)try{if(r.constructor&&null!=r.constructor.getDerivedStateFromError)r.setState(r.constructor.getDerivedStateFromError(t));else{if(null==r.componentDidCatch)continue;r.componentDidCatch(t)}return g(r.__E=r)}catch(e){t=e}throw t}},p.prototype.setState=function(t,e){var r;r=this.__s!==this.state?this.__s:this.__s=c({},this.state),"function"==typeof t&&(t=t(r,this.props)),t&&c(r,t),null!=t&&this.__v&&(this.__e=!1,e&&this.__h.push(e),g(this))},p.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),g(this))},p.prototype.render=l,e=[],r="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,o=i;var P="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function R(t,e){return t(e={exports:{}},e.exports),e.exports}var B=R(function(t){var e=function(t){var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function c(t,e,r,n){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),s=new F(n||[]);return i._invoke=function(t,e,r){var n=f;return function(o,i){if(n===l)throw new Error("Generator is already running");if(n===p){if("throw"===o)throw i;return P()}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var a=A(s,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=l;var c=u(t,e,r);if("normal"===c.type){if(n=r.done?p:h,c.arg===d)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=p,r.method="throw",r.arg=c.arg)}}}(t,r,s),i}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f="suspendedStart",h="suspendedYield",l="executing",p="completed",d={};function y(){}function g(){}function m(){}var v={};v[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(x([])));w&&w!==r&&n.call(w,i)&&(v=w);var C=m.prototype=y.prototype=Object.create(v);function _(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function k(t){var e;this._invoke=function(r,o){function i(){return new Promise(function(e,i){!function e(r,o,i,s){var a=u(t[r],t,o);if("throw"!==a.type){var c=a.arg,f=c.value;return f&&"object"==typeof f&&n.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,i,s)},function(t){e("throw",t,i,s)}):Promise.resolve(f).then(function(t){c.value=t,i(c)},function(t){return e("throw",t,i,s)})}s(a.arg)}(r,o,e,i)})}return e=e?e.then(i,i):i()}}function A(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,A(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=u(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,d;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function F(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function x(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,s=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return s.next=s}}return{next:P}}function P(){return{value:e,done:!0}}return g.prototype=C.constructor=m,m.constructor=g,m[a]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(C),t},t.awrap=function(t){return{__await:t}},_(k.prototype),k.prototype[s]=function(){return this},t.AsyncIterator=k,t.async=function(e,r,n,o){var i=new k(c(e,r,n,o));return t.isGeneratorFunction(r)?i:i.next().then(function(t){return t.done?t.value:i.next()})},_(C),C[a]="Generator",C[i]=function(){return this},C.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=x,F.prototype={constructor:F,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(S),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return a.type="throw",a.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i],a=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var c=n.call(s,"catchLoc"),u=n.call(s,"finallyLoc");if(c&&u){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=t,s.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),S(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;S(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:x(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}});function O(t,e,r,n,o,i,s){try{var a=t[i](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,o)}var T=function(t){return function(){var e=this,r=arguments;return new Promise(function(n,o){var i=t.apply(e,r);function s(t){O(i,n,o,s,a,"next",t)}function a(t){O(i,n,o,s,a,"throw",t)}s(void 0)})}};var N=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")};function D(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var j=function(t,e,r){return e&&D(t.prototype,e),r&&D(t,r),t},L=R(function(t){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(n){return"function"==typeof Symbol&&"symbol"===e(Symbol.iterator)?t.exports=r=function(t){return e(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)},r(n)}t.exports=r});var M=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t};var U=function(t,e){return!e||"object"!==L(e)&&"function"!=typeof e?M(t):e},I=R(function(t){function e(r){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(r)}t.exports=e}),q=R(function(t){function e(r,n){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(r,n)}t.exports=e});var Y=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&q(t,e)};var z=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},H=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,W=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],J=function(t){var e=t,r=t.indexOf("["),n=t.indexOf("]");-1!=r&&-1!=n&&(t=t.substring(0,r)+t.substring(r,n).replace(/:/g,";")+t.substring(n,t.length));for(var o=H.exec(t||""),i={},s=14;s--;)i[W[s]]=o[s]||"";return-1!=r&&-1!=n&&(i.source=e,i.host=i.host.substring(1,i.host.length-1).replace(/;/g,":"),i.authority=i.authority.replace("[","").replace("]","").replace(/;/g,":"),i.ipv6uri=!0),i},X="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function V(){throw new Error("setTimeout has not been defined")}function $(){throw new Error("clearTimeout has not been defined")}var K=V,G=$;function Z(t){if(K===setTimeout)return setTimeout(t,0);if((K===V||!K)&&setTimeout)return K=setTimeout,setTimeout(t,0);try{return K(t,0)}catch(e){try{return K.call(null,t,0)}catch(e){return K.call(this,t,0)}}}"function"==typeof X.setTimeout&&(K=setTimeout),"function"==typeof X.clearTimeout&&(G=clearTimeout);var Q,tt=[],et=!1,rt=-1;function nt(){et&&Q&&(et=!1,Q.length?tt=Q.concat(tt):rt=-1,tt.length&&ot())}function ot(){if(!et){var t=Z(nt);et=!0;for(var e=tt.length;e;){for(Q=tt,tt=[];++rt<e;)Q&&Q[rt].run();rt=-1,e=tt.length}Q=null,et=!1,function(t){if(G===clearTimeout)return clearTimeout(t);if((G===$||!G)&&clearTimeout)return G=clearTimeout,clearTimeout(t);try{G(t)}catch(e){try{return G.call(null,t)}catch(e){return G.call(this,t)}}}(t)}}function it(t,e){this.fun=t,this.array=e}it.prototype.run=function(){this.fun.apply(null,this.array)};function st(){}var at=st,ct=st,ut=st,ft=st,ht=st,lt=st,pt=st;var dt=X.performance||{},yt=dt.now||dt.mozNow||dt.msNow||dt.oNow||dt.webkitNow||function(){return(new Date).getTime()};var gt=new Date;var mt={nextTick:function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];tt.push(new it(t,e)),1!==tt.length||et||Z(ot)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:at,addListener:ct,once:ut,off:ft,removeListener:ht,removeAllListeners:lt,emit:pt,binding:function(t){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(t){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(t){var e=.001*yt.call(dt),r=Math.floor(e),n=Math.floor(e%1*1e9);return t&&(r-=t[0],(n-=t[1])<0&&(r--,n+=1e9)),[r,n]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-gt)/1e3}},vt=1e3,bt=60*vt,wt=60*bt,Ct=24*wt,_t=365.25*Ct,kt=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*_t;case"days":case"day":case"d":return r*Ct;case"hours":case"hour":case"hrs":case"hr":case"h":return r*wt;case"minutes":case"minute":case"mins":case"min":case"m":return r*bt;case"seconds":case"second":case"secs":case"sec":case"s":return r*vt;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===r&&!1===isNaN(t))return e.long?function(t){return At(t,Ct,"day")||At(t,wt,"hour")||At(t,bt,"minute")||At(t,vt,"second")||t+" ms"}(t):function(t){if(t>=Ct)return Math.round(t/Ct)+"d";if(t>=wt)return Math.round(t/wt)+"h";if(t>=bt)return Math.round(t/bt)+"m";if(t>=vt)return Math.round(t/vt)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function At(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var Et=R(function(t,e){function r(t){var r;function o(){if(o.enabled){var t=o,n=+new Date,i=n-(r||n);t.diff=i,t.prev=r,t.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(r,n){if("%%"===r)return r;c++;var o=e.formatters[n];if("function"==typeof o){var i=s[c];r=o.call(t,i),s.splice(c,1),c--}return r}),e.formatArgs.call(t,s),(o.log||e.log||console.log.bind(console)).apply(t,s)}}return o.namespace=t,o.enabled=e.enabled(t),o.useColors=e.useColors(),o.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),o.destroy=n,"function"==typeof e.init&&e.init(o),e.instances.push(o),o}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var i=e.instances[r];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=kt,e.instances=[],e.names=[],e.skips=[],e.formatters={}}),St=(Et.coerce,Et.disable,Et.enable,Et.enabled,Et.humanize,Et.instances,Et.names,Et.skips,Et.formatters,R(function(t,e){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==mt&&"env"in mt&&(t=mt.env.DEBUG),t}(e=t.exports=Et).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())})),Ft=(St.log,St.formatArgs,St.save,St.load,St.useColors,St.storage,St.colors,St("socket.io-client:url")),xt=function(t,e){var r=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(Ft("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),Ft("parse %s",t),r=J(t));r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443"));r.path=r.path||"/";var n=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+n+":"+r.port,r.href=r.protocol+"://"+n+(e&&e.port===r.port?"":":"+r.port),r};var Pt=1e3,Rt=60*Pt,Bt=60*Rt,Ot=24*Bt,Tt=365.25*Ot,Nt=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*Tt;case"days":case"day":case"d":return r*Ot;case"hours":case"hour":case"hrs":case"hr":case"h":return r*Bt;case"minutes":case"minute":case"mins":case"min":case"m":return r*Rt;case"seconds":case"second":case"secs":case"sec":case"s":return r*Pt;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===r&&!1===isNaN(t))return e.long?function(t){return Dt(t,Ot,"day")||Dt(t,Bt,"hour")||Dt(t,Rt,"minute")||Dt(t,Pt,"second")||t+" ms"}(t):function(t){if(t>=Ot)return Math.round(t/Ot)+"d";if(t>=Bt)return Math.round(t/Bt)+"h";if(t>=Rt)return Math.round(t/Rt)+"m";if(t>=Pt)return Math.round(t/Pt)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function Dt(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var jt=R(function(t,e){function r(t){var r;function o(){if(o.enabled){var t=o,n=+new Date,i=n-(r||n);t.diff=i,t.prev=r,t.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(r,n){if("%%"===r)return r;c++;var o=e.formatters[n];if("function"==typeof o){var i=s[c];r=o.call(t,i),s.splice(c,1),c--}return r}),e.formatArgs.call(t,s),(o.log||e.log||console.log.bind(console)).apply(t,s)}}return o.namespace=t,o.enabled=e.enabled(t),o.useColors=e.useColors(),o.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),o.destroy=n,"function"==typeof e.init&&e.init(o),e.instances.push(o),o}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var i=e.instances[r];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=Nt,e.instances=[],e.names=[],e.skips=[],e.formatters={}}),Lt=(jt.coerce,jt.disable,jt.enable,jt.enabled,jt.humanize,jt.instances,jt.names,jt.skips,jt.formatters,R(function(t,e){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==mt&&"env"in mt&&(t=mt.env.DEBUG),t}(e=t.exports=jt).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())})),Mt=(Lt.log,Lt.formatArgs,Lt.save,Lt.load,Lt.useColors,Lt.storage,Lt.colors,R(function(t){function e(t){if(t)return function(t){for(var r in e.prototype)t[r]=e.prototype[r];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<n.length;o++)if((r=n[o])===e||r.fn===e){n.splice(o,1);break}return this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var n=0,o=(r=r.slice(0)).length;n<o;++n)r[n].apply(this,e);return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}})),Ut={}.toString,It=Array.isArray||function(t){return"[object Array]"==Ut.call(t)},qt=[],Yt=[],zt="undefined"!=typeof Uint8Array?Uint8Array:Array,Ht=!1;function Wt(){Ht=!0;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0,r=t.length;e<r;++e)qt[e]=t[e],Yt[t.charCodeAt(e)]=e;Yt["-".charCodeAt(0)]=62,Yt["_".charCodeAt(0)]=63}function Jt(t,e,r){for(var n,o,i=[],s=e;s<r;s+=3)n=(t[s]<<16)+(t[s+1]<<8)+t[s+2],i.push(qt[(o=n)>>18&63]+qt[o>>12&63]+qt[o>>6&63]+qt[63&o]);return i.join("")}function Xt(t){var e;Ht||Wt();for(var r=t.length,n=r%3,o="",i=[],s=0,a=r-n;s<a;s+=16383)i.push(Jt(t,s,s+16383>a?a:s+16383));return 1===n?(e=t[r-1],o+=qt[e>>2],o+=qt[e<<4&63],o+="=="):2===n&&(e=(t[r-2]<<8)+t[r-1],o+=qt[e>>10],o+=qt[e>>4&63],o+=qt[e<<2&63],o+="="),i.push(o),i.join("")}function Vt(t,e,r,n,o){var i,s,a=8*o-n-1,c=(1<<a)-1,u=c>>1,f=-7,h=r?o-1:0,l=r?-1:1,p=t[e+h];for(h+=l,i=p&(1<<-f)-1,p>>=-f,f+=a;f>0;i=256*i+t[e+h],h+=l,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=n;f>0;s=256*s+t[e+h],h+=l,f-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),i-=u}return(p?-1:1)*s*Math.pow(2,i-n)}function $t(t,e,r,n,o,i){var s,a,c,u=8*i-o-1,f=(1<<u)-1,h=f>>1,l=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+h>=1?l/c:l*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=f?(a=0,s=f):s+h>=1?(a=(e*c-1)*Math.pow(2,o),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;t[r+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;t[r+p]=255&s,p+=d,s/=256,u-=8);t[r+p-d]|=128*y}var Kt={}.toString,Gt=Array.isArray||function(t){return"[object Array]"==Kt.call(t)};function Zt(){return te.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Qt(t,e){if(Zt()<e)throw new RangeError("Invalid typed array length");return te.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=te.prototype:(null===t&&(t=new te(e)),t.length=e),t}function te(t,e,r){if(!(te.TYPED_ARRAY_SUPPORT||this instanceof te))return new te(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return ne(this,t)}return ee(this,t,e,r)}function ee(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);te.TYPED_ARRAY_SUPPORT?(t=e).__proto__=te.prototype:t=oe(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!te.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|ae(e,r),o=(t=Qt(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(se(e)){var r=0|ie(e.length);return 0===(t=Qt(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?Qt(t,0):oe(t,e);if("Buffer"===e.type&&Gt(e.data))return oe(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function re(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function ne(t,e){if(re(e),t=Qt(t,e<0?0:0|ie(e)),!te.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function oe(t,e){var r=e.length<0?0:0|ie(e.length);t=Qt(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function ie(t){if(t>=Zt())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Zt().toString(16)+" bytes");return 0|t}function se(t){return!(null==t||!t._isBuffer)}function ae(t,e){if(se(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return Ne(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return De(t).length;default:if(n)return Ne(t).length;e=(""+e).toLowerCase(),n=!0}}function ce(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return ke(this,e,r);case"utf8":case"utf-8":return be(this,e,r);case"ascii":return Ce(this,e,r);case"latin1":case"binary":return _e(this,e,r);case"base64":return ve(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Ae(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function ue(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function fe(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=te.from(e,n)),se(e))return 0===e.length?-1:he(t,e,r,n,o);if("number"==typeof e)return e&=255,te.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):he(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function he(t,e,r,n,o){var i,s=1,a=t.length,c=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var f=-1;for(i=r;i<a;i++)if(u(t,i)===u(e,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===c)return f*s}else-1!==f&&(i-=i-f),f=-1}else for(r+c>a&&(r=a-c),i=r;i>=0;i--){for(var h=!0,l=0;l<c;l++)if(u(t,i+l)!==u(e,l)){h=!1;break}if(h)return i}return-1}function le(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function pe(t,e,r,n){return je(Ne(e,t.length-r),t,r,n)}function de(t,e,r,n){return je(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function ye(t,e,r,n){return de(t,e,r,n)}function ge(t,e,r,n){return je(De(e),t,r,n)}function me(t,e,r,n){return je(function(t,e){for(var r,n,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function ve(t,e,r){return 0===e&&r===t.length?Xt(t):Xt(t.slice(e,r))}function be(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,s,a,c,u=t[o],f=null,h=u>239?4:u>223?3:u>191?2:1;if(o+h<=r)switch(h){case 1:u<128&&(f=u);break;case 2:128==(192&(i=t[o+1]))&&(c=(31&u)<<6|63&i)>127&&(f=c);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(c=(15&u)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(f=c);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(f=c)}null===f?(f=65533,h=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),o+=h}return function(t){var e=t.length;if(e<=we)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=we));return r}(n)}te.TYPED_ARRAY_SUPPORT=void 0===X.TYPED_ARRAY_SUPPORT||X.TYPED_ARRAY_SUPPORT,te.poolSize=8192,te._augment=function(t){return t.__proto__=te.prototype,t},te.from=function(t,e,r){return ee(null,t,e,r)},te.TYPED_ARRAY_SUPPORT&&(te.prototype.__proto__=Uint8Array.prototype,te.__proto__=Uint8Array),te.alloc=function(t,e,r){return function(t,e,r,n){return re(e),e<=0?Qt(t,e):void 0!==r?"string"==typeof n?Qt(t,e).fill(r,n):Qt(t,e).fill(r):Qt(t,e)}(null,t,e,r)},te.allocUnsafe=function(t){return ne(null,t)},te.allocUnsafeSlow=function(t){return ne(null,t)},te.isBuffer=Le,te.compare=function(t,e){if(!se(t)||!se(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},te.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},te.concat=function(t,e){if(!Gt(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return te.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=te.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var i=t[r];if(!se(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},te.byteLength=ae,te.prototype._isBuffer=!0,te.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)ue(this,e,e+1);return this},te.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)ue(this,e,e+3),ue(this,e+1,e+2);return this},te.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)ue(this,e,e+7),ue(this,e+1,e+6),ue(this,e+2,e+5),ue(this,e+3,e+4);return this},te.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?be(this,0,t):ce.apply(this,arguments)},te.prototype.equals=function(t){if(!se(t))throw new TypeError("Argument must be a Buffer");return this===t||0===te.compare(this,t)},te.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},te.prototype.compare=function(t,e,r,n,o){if(!se(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(n,o),u=t.slice(e,r),f=0;f<a;++f)if(c[f]!==u[f]){i=c[f],s=u[f];break}return i<s?-1:s<i?1:0},te.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},te.prototype.indexOf=function(t,e,r){return fe(this,t,e,r,!0)},te.prototype.lastIndexOf=function(t,e,r){return fe(this,t,e,r,!1)},te.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return le(this,t,e,r);case"utf8":case"utf-8":return pe(this,t,e,r);case"ascii":return de(this,t,e,r);case"latin1":case"binary":return ye(this,t,e,r);case"base64":return ge(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return me(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},te.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var we=4096;function Ce(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function _e(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function ke(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=Te(t[i]);return o}function Ae(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function Ee(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function Se(t,e,r,n,o,i){if(!se(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function Fe(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function xe(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function Pe(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Re(t,e,r,n,o){return o||Pe(t,0,r,4),$t(t,e,r,n,23,4),r+4}function Be(t,e,r,n,o){return o||Pe(t,0,r,8),$t(t,e,r,n,52,8),r+8}te.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),te.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=te.prototype;else{var o=e-t;r=new te(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},te.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||Ee(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},te.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||Ee(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},te.prototype.readUInt8=function(t,e){return e||Ee(t,1,this.length),this[t]},te.prototype.readUInt16LE=function(t,e){return e||Ee(t,2,this.length),this[t]|this[t+1]<<8},te.prototype.readUInt16BE=function(t,e){return e||Ee(t,2,this.length),this[t]<<8|this[t+1]},te.prototype.readUInt32LE=function(t,e){return e||Ee(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},te.prototype.readUInt32BE=function(t,e){return e||Ee(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},te.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||Ee(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},te.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||Ee(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},te.prototype.readInt8=function(t,e){return e||Ee(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},te.prototype.readInt16LE=function(t,e){e||Ee(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},te.prototype.readInt16BE=function(t,e){e||Ee(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},te.prototype.readInt32LE=function(t,e){return e||Ee(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},te.prototype.readInt32BE=function(t,e){return e||Ee(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},te.prototype.readFloatLE=function(t,e){return e||Ee(t,4,this.length),Vt(this,t,!0,23,4)},te.prototype.readFloatBE=function(t,e){return e||Ee(t,4,this.length),Vt(this,t,!1,23,4)},te.prototype.readDoubleLE=function(t,e){return e||Ee(t,8,this.length),Vt(this,t,!0,52,8)},te.prototype.readDoubleBE=function(t,e){return e||Ee(t,8,this.length),Vt(this,t,!1,52,8)},te.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||Se(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},te.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||Se(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},te.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,1,255,0),te.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},te.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,2,65535,0),te.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Fe(this,t,e,!0),e+2},te.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,2,65535,0),te.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Fe(this,t,e,!1),e+2},te.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,4,4294967295,0),te.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):xe(this,t,e,!0),e+4},te.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,4,4294967295,0),te.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):xe(this,t,e,!1),e+4},te.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);Se(this,t,e,r,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<r&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},te.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);Se(this,t,e,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},te.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,1,127,-128),te.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},te.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,2,32767,-32768),te.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Fe(this,t,e,!0),e+2},te.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,2,32767,-32768),te.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Fe(this,t,e,!1),e+2},te.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,4,2147483647,-2147483648),te.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):xe(this,t,e,!0),e+4},te.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||Se(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),te.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):xe(this,t,e,!1),e+4},te.prototype.writeFloatLE=function(t,e,r){return Re(this,t,e,!0,r)},te.prototype.writeFloatBE=function(t,e,r){return Re(this,t,e,!1,r)},te.prototype.writeDoubleLE=function(t,e,r){return Be(this,t,e,!0,r)},te.prototype.writeDoubleBE=function(t,e,r){return Be(this,t,e,!1,r)},te.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!te.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},te.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!te.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var s=se(t)?t:Ne(new te(t,n).toString()),a=s.length;for(i=0;i<r-e;++i)this[i+e]=s[i%a]}return this};var Oe=/[^+\/0-9A-Za-z-_]/g;function Te(t){return t<16?"0"+t.toString(16):t.toString(16)}function Ne(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function De(t){return function(t){var e,r,n,o,i,s;Ht||Wt();var a=t.length;if(a%4>0)throw new Error("Invalid string. Length must be a multiple of 4");i="="===t[a-2]?2:"="===t[a-1]?1:0,s=new zt(3*a/4-i),n=i>0?a-4:a;var c=0;for(e=0,r=0;e<n;e+=4,r+=3)o=Yt[t.charCodeAt(e)]<<18|Yt[t.charCodeAt(e+1)]<<12|Yt[t.charCodeAt(e+2)]<<6|Yt[t.charCodeAt(e+3)],s[c++]=o>>16&255,s[c++]=o>>8&255,s[c++]=255&o;return 2===i?(o=Yt[t.charCodeAt(e)]<<2|Yt[t.charCodeAt(e+1)]>>4,s[c++]=255&o):1===i&&(o=Yt[t.charCodeAt(e)]<<10|Yt[t.charCodeAt(e+1)]<<4|Yt[t.charCodeAt(e+2)]>>2,s[c++]=o>>8&255,s[c++]=255&o),s}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(Oe,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function je(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}function Le(t){return null!=t&&(!!t._isBuffer||Me(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&Me(t.slice(0,0))}(t))}function Me(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}var Ue=function(t){return Ie&&Le(t)||qe&&(t instanceof ArrayBuffer||Ye(t))},Ie=!0,qe="function"==typeof ArrayBuffer,Ye=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer};var ze=Object.prototype.toString,He="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===ze.call(Blob),We="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===ze.call(File);var Je={deconstructPacket:function(t){var e=[],r=t.data,n=t;return n.data=function t(e,r){if(!e)return e;if(Ue(e)){var n={_placeholder:!0,num:r.length};return r.push(e),n}if(It(e)){for(var o=new Array(e.length),i=0;i<e.length;i++)o[i]=t(e[i],r);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var s in e)o[s]=t(e[s],r);return o}return e}(r,e),n.attachments=e.length,{packet:n,buffers:e}},reconstructPacket:function(t,e){return t.data=function t(e,r){if(!e)return e;if(e&&e._placeholder)return r[e.num];if(It(e))for(var n=0;n<e.length;n++)e[n]=t(e[n],r);else if("object"==typeof e)for(var o in e)e[o]=t(e[o],r);return e}(t.data,e),t.attachments=void 0,t},removeBlobs:function(t,e){var r=0,n=t;!function t(o,i,s){if(!o)return o;if(He&&o instanceof Blob||We&&o instanceof File){r++;var a=new FileReader;a.onload=function(){s?s[i]=this.result:n=this.result,--r||e(n)},a.readAsArrayBuffer(o)}else if(It(o))for(var c=0;c<o.length;c++)t(o[c],c,o);else if("object"==typeof o&&!Ue(o))for(var u in o)t(o[u],u,o)}(n),r||e(n)}},Xe=R(function(t,e){var r=Lt("socket.io-parser");function n(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=n,e.Decoder=s;var o=e.ERROR+'"encode error"';function i(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return o;n+=i}return r("encoded %j as %s",t,n),n}function s(){this.reconstructor=null}function a(t){this.reconPack=t,this.buffers=[]}function c(t){return{type:e.ERROR,data:"parser error: "+t}}n.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){Je.removeBlobs(t,function(t){var r=Je.deconstructPacket(t),n=i(r.packet),o=r.buffers;o.unshift(n),e(o)})}(t,n):n([i(t)])},Mt(s.prototype),s.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,o={type:Number(t.charAt(0))};if(null==e.types[o.type])return c("unknown packet type "+o.type);if(e.BINARY_EVENT===o.type||e.BINARY_ACK===o.type){for(var i="";"-"!==t.charAt(++n)&&(i+=t.charAt(n),n!=t.length););if(i!=Number(i)||"-"!==t.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===t.charAt(n+1))for(o.nsp="";++n;){if(","===(a=t.charAt(n)))break;if(o.nsp+=a,n===t.length)break}else o.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(o.id="";++n;){var a;if(null==(a=t.charAt(n))||Number(a)!=a){--n;break}if(o.id+=t.charAt(n),n===t.length)break}o.id=Number(o.id)}if(t.charAt(++n)){var u=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n));if(!(!1!==u&&(o.type===e.ERROR||It(u))))return c("invalid payload");o.data=u}return r("decoded %s as %j",t,o),o}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new a(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!Ue(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},a.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=Je.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},a.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}}),Ve=(Xe.protocol,Xe.types,Xe.CONNECT,Xe.DISCONNECT,Xe.EVENT,Xe.ACK,Xe.ERROR,Xe.BINARY_EVENT,Xe.BINARY_ACK,Xe.Encoder,Xe.Decoder,R(function(t){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}})),$e=function(t){var e=t.xdomain,r=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||Ve))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}},Ke=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var n in t)r.call(t,n)&&e.push(n);return e},Ge={}.toString,Ze=Array.isArray||function(t){return"[object Array]"==Ge.call(t)},Qe=Object.prototype.toString,tr="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Qe.call(Blob),er="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Qe.call(File),rr=function t(e){if(!e||"object"!=typeof e)return!1;if(Ze(e)){for(var r=0,n=e.length;r<n;r++)if(t(e[r]))return!0;return!1}if(Le&&Le(e)||"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||tr&&e instanceof Blob||er&&e instanceof File)return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)&&t(e[o]))return!0;return!1};var nr=function(t,e,r){var n=t.byteLength;if(e=e||0,r=r||n,t.slice)return t.slice(e,r);if(e<0&&(e+=n),r<0&&(r+=n),r>n&&(r=n),e>=n||e>=r||0===n)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(r-e),s=e,a=0;s<r;s++,a++)i[a]=o[s];return i.buffer},or=function(t,e,r){var n=!1;return r=r||ir,o.count=t,0===t?e():o;function o(t,i){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(n=!0,e(t),e=r):0!==o.count||n||e(null,i)}};function ir(){}var sr,ar,cr,ur=String.fromCharCode;function fr(t){for(var e,r,n=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(r=t.charCodeAt(o++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--):n.push(e);return n}function hr(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function lr(t,e){return ur(t>>e&63|128)}function pr(t,e){if(0==(4294967168&t))return ur(t);var r="";return 0==(4294965248&t)?r=ur(t>>6&31|192):0==(4294901760&t)?(hr(t,e)||(t=65533),r=ur(t>>12&15|224),r+=lr(t,6)):0==(4292870144&t)&&(r=ur(t>>18&7|240),r+=lr(t,12),r+=lr(t,6)),r+=ur(63&t|128)}function dr(){if(cr>=ar)throw Error("Invalid byte index");var t=255&sr[cr];if(cr++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function yr(t){var e,r;if(cr>ar)throw Error("Invalid byte index");if(cr==ar)return!1;if(e=255&sr[cr],cr++,0==(128&e))return e;if(192==(224&e)){if((r=(31&e)<<6|dr())>=128)return r;throw Error("Invalid continuation byte")}if(224==(240&e)){if((r=(15&e)<<12|dr()<<6|dr())>=2048)return hr(r,t)?r:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(r=(7&e)<<18|dr()<<12|dr()<<6|dr())>=65536&&r<=1114111)return r;throw Error("Invalid UTF-8 detected")}var gr={version:"2.1.2",encode:function(t,e){for(var r=!1!==(e=e||{}).strict,n=fr(t),o=n.length,i=-1,s="";++i<o;)s+=pr(n[i],r);return s},decode:function(t,e){var r=!1!==(e=e||{}).strict;sr=fr(t),ar=sr.length,cr=0;for(var n,o=[];!1!==(n=yr(r));)o.push(n);return function(t){for(var e,r=t.length,n=-1,o="";++n<r;)(e=t[n])>65535&&(o+=ur((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=ur(e);return o}(o)}},mr=R(function(t,e){!function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),n=0;n<t.length;n++)r[t.charCodeAt(n)]=n;e.encode=function(e){var r,n=new Uint8Array(e),o=n.length,i="";for(r=0;r<o;r+=3)i+=t[n[r]>>2],i+=t[(3&n[r])<<4|n[r+1]>>4],i+=t[(15&n[r+1])<<2|n[r+2]>>6],i+=t[63&n[r+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,n,o,i,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var f=new ArrayBuffer(a),h=new Uint8Array(f);for(e=0;e<c;e+=4)n=r[t.charCodeAt(e)],o=r[t.charCodeAt(e+1)],i=r[t.charCodeAt(e+2)],s=r[t.charCodeAt(e+3)],h[u++]=n<<2|o>>4,h[u++]=(15&o)<<4|i>>2,h[u++]=(3&i)<<6|63&s;return f}}()}),vr=(mr.encode,mr.decode,void 0!==vr?vr:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder),br=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),wr=br&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),Cr=vr&&vr.prototype.append&&vr.prototype.getBlob;function _r(t){return t.map(function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var r=new Uint8Array(t.byteLength);r.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=r.buffer}return e}return t})}function kr(t,e){e=e||{};var r=new vr;return _r(t).forEach(function(t){r.append(t)}),e.type?r.getBlob(e.type):r.getBlob()}function Ar(t,e){return new Blob(_r(t),e||{})}"undefined"!=typeof Blob&&(kr.prototype=Blob.prototype,Ar.prototype=Blob.prototype);var Er=br?wr?Blob:Ar:Cr?kr:void 0,Sr=R(function(t,e){var r;"undefined"!=typeof ArrayBuffer&&(r=mr);var n="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),o="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),i=n||o;e.protocol=3;var s=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},a=Ke(s),c={type:"error",data:"parser error"};function u(t,e,r){for(var n=new Array(t.length),o=or(t.length,r),i=function(t,r,o){e(r,function(e,r){n[t]=r,o(e,n)})},s=0;s<t.length;s++)i(s,t[s],o)}e.encodePacket=function(t,r,n,o){"function"==typeof r&&(o=r,r=!1),"function"==typeof n&&(o=n,n=null);var a=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&a instanceof ArrayBuffer)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=t.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=s[t.type];for(var c=0;c<i.length;c++)a[c+1]=i[c];return n(a.buffer)}(t,r,o);if(void 0!==Er&&a instanceof Er)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);if(i)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=new FileReader;return o.onload=function(){e.encodePacket({type:t.type,data:o.result},r,!0,n)},o.readAsArrayBuffer(t.data)}(t,r,n);var o=new Uint8Array(1);o[0]=s[t.type];var a=new Er([o.buffer,t.data]);return n(a)}(t,r,o);if(a&&a.base64)return function(t,r){var n="b"+e.packets[t.type]+t.data.data;return r(n)}(t,o);var c=s[t.type];return void 0!==t.data&&(c+=n?gr.encode(String(t.data),{strict:!1}):String(t.data)),o(""+c)},e.encodeBase64Packet=function(t,r){var n,o="b"+e.packets[t.type];if(void 0!==Er&&t.data instanceof Er){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];r(o+t)},i.readAsDataURL(t.data)}try{n=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),c=0;c<s.length;c++)a[c]=s[c];n=String.fromCharCode.apply(null,a)}return o+=btoa(n),r(o)},e.decodePacket=function(t,r,n){if(void 0===t)return c;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(n&&!1===(t=function(t){try{t=gr.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return c;var o=t.charAt(0);return Number(o)==o&&a[o]?t.length>1?{type:a[o],data:t.substring(1)}:{type:a[o]}:c}o=new Uint8Array(t)[0];var i=nr(t,1);return Er&&"blob"===r&&(i=new Er([i])),{type:a[o],data:i}},e.decodeBase64Packet=function(t,e){var n=a[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var o=r.decode(t.substr(1));return"blob"===e&&Er&&(o=new Er([o])),{type:n,data:o}},e.encodePayload=function(t,r,n){"function"==typeof r&&(n=r,r=null);var o=rr(t);if(r&&o)return Er&&!i?e.encodePayloadAsBlob(t,n):e.encodePayloadAsArrayBuffer(t,n);if(!t.length)return n("0:");u(t,function(t,n){e.encodePacket(t,!!o&&r,!1,function(t){n(null,function(t){return t.length+":"+t}(t))})},function(t,e){return n(e.join(""))})},e.decodePayload=function(t,r,n){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,n);var o;if("function"==typeof r&&(n=r,r=null),""===t)return n(c,0,1);for(var i,s,a="",u=0,f=t.length;u<f;u++){var h=t.charAt(u);if(":"===h){if(""===a||a!=(i=Number(a)))return n(c,0,1);if(a!=(s=t.substr(u+1,i)).length)return n(c,0,1);if(s.length){if(o=e.decodePacket(s,r,!1),c.type===o.type&&c.data===o.data)return n(c,0,1);if(!1===n(o,u+i,f))return}u+=i,a=""}else a+=h}return""!==a?n(c,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,r){if(!t.length)return r(new ArrayBuffer(0));u(t,function(t,r){e.encodePacket(t,!0,!0,function(t){return r(null,t)})},function(t,e){var n=e.reduce(function(t,e){var r;return t+(r="string"==typeof e?e.length:e.byteLength).toString().length+r+2},0),o=new Uint8Array(n),i=0;return e.forEach(function(t){var e="string"==typeof t,r=t;if(e){for(var n=new Uint8Array(t.length),s=0;s<t.length;s++)n[s]=t.charCodeAt(s);r=n.buffer}o[i++]=e?0:1;var a=r.byteLength.toString();for(s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(n=new Uint8Array(r),s=0;s<n.length;s++)o[i++]=n[s]}),r(o.buffer)})},e.encodePayloadAsBlob=function(t,r){u(t,function(t,r){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var n=new Uint8Array(t.length),o=0;o<t.length;o++)n[o]=t.charCodeAt(o);t=n.buffer,e[0]=0}var i=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,Er){var a=new Er([e.buffer,s.buffer,t]);r(null,a)}})},function(t,e){return r(new Er(e))})},e.decodePayloadAsBinary=function(t,r,n){"function"==typeof r&&(n=r,r=null);for(var o=t,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],u="",f=1;255!==s[f];f++){if(u.length>310)return n(c,0,1);u+=s[f]}o=nr(o,2+u.length),u=parseInt(u);var h=nr(o,0,u);if(a)try{h=String.fromCharCode.apply(null,new Uint8Array(h))}catch(t){var l=new Uint8Array(h);h="";for(f=0;f<l.length;f++)h+=String.fromCharCode(l[f])}i.push(h),o=nr(o,u)}var p=i.length;i.forEach(function(t,o){n(e.decodePacket(t,r,!0),o,p)})}}),Fr=(Sr.protocol,Sr.packets,Sr.encodePacket,Sr.encodeBase64Packet,Sr.decodePacket,Sr.decodeBase64Packet,Sr.encodePayload,Sr.decodePayload,Sr.encodePayloadAsArrayBuffer,Sr.encodePayloadAsBlob,Sr.decodePayloadAsBinary,xr);function xr(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}Mt(xr.prototype),xr.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},xr.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},xr.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},xr.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},xr.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},xr.prototype.onData=function(t){var e=Sr.decodePacket(t,this.socket.binaryType);this.onPacket(e)},xr.prototype.onPacket=function(t){this.emit("packet",t)},xr.prototype.onClose=function(){this.readyState="closed",this.emit("close")};var Pr,Rr={encode:function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},decode:function(t){for(var e={},r=t.split("&"),n=0,o=r.length;n<o;n++){var i=r[n].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},Br=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t},Or="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),Tr=64,Nr={},Dr=0,jr=0;function Lr(t){var e="";do{e=Or[t%Tr]+e,t=Math.floor(t/Tr)}while(t>0);return e}function Mr(){var t=Lr(+new Date);return t!==Pr?(Dr=0,Pr=t):t+"."+Lr(Dr++)}for(;jr<Tr;jr++)Nr[Or[jr]]=jr;Mr.encode=Lr,Mr.decode=function(t){var e=0;for(jr=0;jr<t.length;jr++)e=e*Tr+Nr[t.charAt(jr)];return e};var Ur=Mr,Ir=1e3,qr=60*Ir,Yr=60*qr,zr=24*Yr,Hr=365.25*zr,Wr=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*Hr;case"days":case"day":case"d":return r*zr;case"hours":case"hour":case"hrs":case"hr":case"h":return r*Yr;case"minutes":case"minute":case"mins":case"min":case"m":return r*qr;case"seconds":case"second":case"secs":case"sec":case"s":return r*Ir;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===r&&!1===isNaN(t))return e.long?function(t){return Jr(t,zr,"day")||Jr(t,Yr,"hour")||Jr(t,qr,"minute")||Jr(t,Ir,"second")||t+" ms"}(t):function(t){if(t>=zr)return Math.round(t/zr)+"d";if(t>=Yr)return Math.round(t/Yr)+"h";if(t>=qr)return Math.round(t/qr)+"m";if(t>=Ir)return Math.round(t/Ir)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function Jr(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var Xr=R(function(t,e){function r(t){var r;function o(){if(o.enabled){var t=o,n=+new Date,i=n-(r||n);t.diff=i,t.prev=r,t.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(r,n){if("%%"===r)return r;c++;var o=e.formatters[n];if("function"==typeof o){var i=s[c];r=o.call(t,i),s.splice(c,1),c--}return r}),e.formatArgs.call(t,s),(o.log||e.log||console.log.bind(console)).apply(t,s)}}return o.namespace=t,o.enabled=e.enabled(t),o.useColors=e.useColors(),o.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),o.destroy=n,"function"==typeof e.init&&e.init(o),e.instances.push(o),o}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var i=e.instances[r];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=Wr,e.instances=[],e.names=[],e.skips=[],e.formatters={}}),Vr=(Xr.coerce,Xr.disable,Xr.enable,Xr.enabled,Xr.humanize,Xr.instances,Xr.names,Xr.skips,Xr.formatters,R(function(t,e){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==mt&&"env"in mt&&(t=mt.env.DEBUG),t}(e=t.exports=Xr).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())})),$r=(Vr.log,Vr.formatArgs,Vr.save,Vr.load,Vr.useColors,Vr.storage,Vr.colors,Vr("engine.io-client:polling")),Kr=Zr,Gr=null!=new $e({xdomain:!1}).responseType;function Zr(t){var e=t&&t.forceBase64;Gr&&!e||(this.supportsBinary=!1),Fr.call(this,t)}Br(Zr,Fr),Zr.prototype.name="polling",Zr.prototype.doOpen=function(){this.poll()},Zr.prototype.pause=function(t){var e=this;function r(){$r("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&($r("we are currently polling - waiting to pause"),n++,this.once("pollComplete",function(){$r("pre-pause polling complete"),--n||r()})),this.writable||($r("we are currently writing - waiting to pause"),n++,this.once("drain",function(){$r("pre-pause writing complete"),--n||r()}))}else r()},Zr.prototype.poll=function(){$r("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},Zr.prototype.onData=function(t){var e=this;$r("polling got data %s",t);Sr.decodePayload(t,this.socket.binaryType,function(t,r,n){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():$r('ignoring poll - transport state "%s"',this.readyState))},Zr.prototype.doClose=function(){var t=this;function e(){$r("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?($r("transport open - closing"),e()):($r("transport not open - deferring close"),this.once("open",e))},Zr.prototype.write=function(t){var e=this;this.writable=!1;var r=function(){e.writable=!0,e.emit("drain")};Sr.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,r)})},Zr.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(t[this.timestampParam]=Ur()),this.supportsBinary||t.sid||(t.b64=1),t=Rr.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t};var Qr=Vr("engine.io-client:polling-xhr"),tn=nn,en=on;function rn(){}function nn(t){if(Kr.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}}function on(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(Br(nn,Kr),nn.prototype.supportsBinary=!0,nn.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new on(t)},nn.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,n=this.request({method:"POST",data:t,isBinary:r}),o=this;n.on("success",e),n.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=n},nn.prototype.doPoll=function(){Qr("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},Mt(on.prototype),on.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new $e(t),r=this;try{Qr("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var n in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(n)&&e.setRequestHeader(n,this.extraHeaders[n])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=!0),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");r.supportsBinary&&"application/octet-stream"===t&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout(function(){r.onError(e.status)},0))},Qr("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout(function(){r.onError(t)},0)}"undefined"!=typeof document&&(this.index=on.requestsCount++,on.requests[this.index]=this)},on.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},on.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},on.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},on.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=rn:this.xhr.onreadystatechange=rn,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete on.requests[this.index],this.xhr=null}},on.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t="application/octet-stream"===e&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},on.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},on.prototype.abort=function(){this.cleanup()},on.requestsCount=0,on.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",an);else if("function"==typeof addEventListener){var sn="onpagehide"in self?"pagehide":"unload";addEventListener(sn,an,!1)}function an(){for(var t in on.requests)on.requests.hasOwnProperty(t)&&on.requests[t].abort()}tn.Request=en;var cn,un=dn,fn=/\n/g,hn=/\\n/g;function ln(){}function pn(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==P?P:{}}function dn(t){if(Kr.call(this,t),this.query=this.query||{},!cn){var e=pn();cn=e.___eio=e.___eio||[]}this.index=cn.length;var r=this;cn.push(function(t){r.onData(t)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){r.script&&(r.script.onerror=ln)},!1)}Br(dn,Kr),dn.prototype.supportsBinary=!1,dn.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),Kr.prototype.doClose.call(this)},dn.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},dn.prototype.doWrite=function(t,e){var r=this;if(!this.form){var n,o=document.createElement("form"),i=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=s,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function a(){c(),e()}function c(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(t)}catch(t){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),c(),t=t.replace(hn,"\\\n"),this.area.value=t.replace(fn,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&a()}:this.iframe.onload=a};var yn,gn,mn=Vr("engine.io-client:websocket");if("undefined"!=typeof WebSocket)yn=WebSocket;else if("undefined"!=typeof self)yn=self.WebSocket||self.MozWebSocket;else try{gn={}}catch(s){}var vn=yn||gn,bn=wn;function wn(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=yn&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(vn=gn),Fr.call(this,t)}Br(wn,Fr),wn.prototype.name="websocket",wn.prototype.supportsBinary=!0,wn.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new vn(t,e):new vn(t):new vn(t,e,r)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},wn.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},wn.prototype.write=function(t){var e=this;this.writable=!1;for(var r=t.length,n=0,o=r;n<o;n++)!function(t){Sr.encodePacket(t,e.supportsBinary,function(n){if(!e.usingBrowserWebSocket){var o={};if(t.options&&(o.compress=t.options.compress),e.perMessageDeflate)("string"==typeof n?te.byteLength(n):n.length)<e.perMessageDeflate.threshold&&(o.compress=!1)}try{e.usingBrowserWebSocket?e.ws.send(n):e.ws.send(n,o)}catch(t){mn("websocket closed before onclose event")}--r||i()})}(t[n]);function i(){e.emit("flush"),setTimeout(function(){e.writable=!0,e.emit("drain")},0)}},wn.prototype.onClose=function(){Fr.prototype.onClose.call(this)},wn.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},wn.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=Ur()),this.supportsBinary||(t.b64=1),(t=Rr.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t},wn.prototype.check=function(){return!(!vn||"__initialize"in vn&&this.name===wn.prototype.name)};var Cn={polling:function(t){var e=!1,r=!1,n=!1!==t.jsonp;if("undefined"!=typeof location){var o="https:"===location.protocol,i=location.port;i||(i=o?443:80),e=t.hostname!==location.hostname||i!==t.port,r=t.secure!==o}if(t.xdomain=e,t.xscheme=r,"open"in new $e(t)&&!t.forceJSONP)return new tn(t);if(!n)throw new Error("JSONP disabled");return new un(t)},websocket:bn},_n=[].indexOf,kn=function(t,e){if(_n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1},An=Vr("engine.io-client:socket"),En=Sn;function Sn(t,e){if(!(this instanceof Sn))return new Sn(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=J(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=J(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=Rr.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}Sn.priorWebsocketSuccess=!1,Mt(Sn.prototype),Sn.protocol=Sr.protocol,Sn.Socket=Sn,Sn.Transport=Fr,Sn.transports=Cn,Sn.parser=Sr,Sn.prototype.createTransport=function(t){An('creating transport "%s"',t);var e=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.query);e.EIO=Sr.protocol,e.transport=t;var r=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new Cn[t]({query:e,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},Sn.prototype.open=function(){var t;if(this.rememberUpgrade&&Sn.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},Sn.prototype.setTransport=function(t){An("setting transport %s",t.name);var e=this;this.transport&&(An("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},Sn.prototype.probe=function(t){An('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),r=!1,n=this;function o(){if(n.onlyBinaryUpgrades){var o=!this.supportsBinary&&n.transport.supportsBinary;r=r||o}r||(An('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",function(o){if(!r)if("pong"===o.type&&"probe"===o.data){if(An('probe transport "%s" pong',t),n.upgrading=!0,n.emit("upgrading",e),!e)return;Sn.priorWebsocketSuccess="websocket"===e.name,An('pausing current transport "%s"',n.transport.name),n.transport.pause(function(){r||"closed"!==n.readyState&&(An("changing transport and sending upgrade packet"),f(),n.setTransport(e),e.send([{type:"upgrade"}]),n.emit("upgrade",e),e=null,n.upgrading=!1,n.flush())})}else{An('probe transport "%s" failed',t);var i=new Error("probe error");i.transport=e.name,n.emit("upgradeError",i)}}))}function i(){r||(r=!0,f(),e.close(),e=null)}function s(r){var o=new Error("probe error: "+r);o.transport=e.name,i(),An('probe transport "%s" failed because of error: %s',t,r),n.emit("upgradeError",o)}function a(){s("transport closed")}function c(){s("socket closed")}function u(t){e&&t.name!==e.name&&(An('"%s" works - aborting "%s"',t.name,e.name),i())}function f(){e.removeListener("open",o),e.removeListener("error",s),e.removeListener("close",a),n.removeListener("close",c),n.removeListener("upgrading",u)}Sn.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",s),e.once("close",a),this.once("close",c),this.once("upgrading",u),e.open()},Sn.prototype.onOpen=function(){if(An("socket open"),this.readyState="open",Sn.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){An("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},Sn.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(An('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else An('packet received with socket readyState "%s"',this.readyState)},Sn.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},Sn.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},Sn.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){An("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},Sn.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},Sn.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},Sn.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(An("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},Sn.prototype.write=Sn.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this},Sn.prototype.sendPacket=function(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var o={type:t,data:e,options:r};this.emit("packetCreate",o),this.writeBuffer.push(o),n&&this.once("flush",n),this.flush()}},Sn.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():e()}):this.upgrading?n():e()}function e(){t.onClose("forced close"),An("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function n(){t.once("upgrade",r),t.once("upgradeError",r)}return this},Sn.prototype.onError=function(t){An("socket error %j",t),Sn.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},Sn.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){An('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},Sn.prototype.filterUpgrades=function(t){for(var e=[],r=0,n=t.length;r<n;r++)~kn(this.transports,t[r])&&e.push(t[r]);return e};var Fn=En,xn=Sr;Fn.parser=xn;var Pn=function(t,e){for(var r=[],n=(e=e||0)||0;n<t.length;n++)r[n-e]=t[n];return r};var Rn=function(t,e,r){return t.on(e,r),{destroy:function(){t.removeListener(e,r)}}};var Bn=[].slice,On=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=Bn.call(arguments,2);return function(){return e.apply(t,r.concat(Bn.call(arguments)))}},Tn=R(function(t,e){var r=St("socket.io-client:socket");t.exports=i;var n={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},o=Mt.prototype.emit;function i(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}Mt(i.prototype),i.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[Rn(t,"open",On(this,"onopen")),Rn(t,"packet",On(this,"onpacket")),Rn(t,"close",On(this,"onclose"))]}},i.prototype.open=i.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},i.prototype.send=function(){var t=Pn(arguments);return t.unshift("message"),this.emit.apply(this,t),this},i.prototype.emit=function(t){if(n.hasOwnProperty(t))return o.apply(this,arguments),this;var e=Pn(arguments),i={type:(void 0!==this.flags.binary?this.flags.binary:rr(e))?Xe.BINARY_EVENT:Xe.EVENT,data:e,options:{}};return i.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(r("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),i.id=this.ids++),this.connected?this.packet(i):this.sendBuffer.push(i),this.flags={},this},i.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},i.prototype.onopen=function(){if(r("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?Rr.encode(this.query):this.query;r("sending connect packet with query %s",t),this.packet({type:Xe.CONNECT,query:t})}else this.packet({type:Xe.CONNECT})},i.prototype.onclose=function(t){r("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},i.prototype.onpacket=function(t){var e=t.nsp===this.nsp,r=t.type===Xe.ERROR&&"/"===t.nsp;if(e||r)switch(t.type){case Xe.CONNECT:this.onconnect();break;case Xe.EVENT:case Xe.BINARY_EVENT:this.onevent(t);break;case Xe.ACK:case Xe.BINARY_ACK:this.onack(t);break;case Xe.DISCONNECT:this.ondisconnect();break;case Xe.ERROR:this.emit("error",t.data)}},i.prototype.onevent=function(t){var e=t.data||[];r("emitting event %j",e),null!=t.id&&(r("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?o.apply(this,e):this.receiveBuffer.push(e)},i.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var o=Pn(arguments);r("sending ack %j",o),e.packet({type:rr(o)?Xe.BINARY_ACK:Xe.ACK,id:t,data:o})}}},i.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(r("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):r("bad ack %s",t.id)},i.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},i.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)o.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},i.prototype.ondisconnect=function(){r("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},i.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},i.prototype.close=i.prototype.disconnect=function(){return this.connected&&(r("performing disconnect (%s)",this.nsp),this.packet({type:Xe.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},i.prototype.compress=function(t){return this.flags.compress=t,this},i.prototype.binary=function(t){return this.flags.binary=t,this}}),Nn=Dn;function Dn(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}Dn.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},Dn.prototype.reset=function(){this.attempts=0},Dn.prototype.setMin=function(t){this.ms=t},Dn.prototype.setMax=function(t){this.max=t},Dn.prototype.setJitter=function(t){this.jitter=t};var jn=St("socket.io-client:manager"),Ln=Object.prototype.hasOwnProperty,Mn=Un;function Un(t,e){if(!(this instanceof Un))return new Un(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new Nn({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=e.parser||Xe;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}Un.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)Ln.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},Un.prototype.updateSocketIds=function(){for(var t in this.nsps)Ln.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},Un.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},Mt(Un.prototype),Un.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},Un.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},Un.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},Un.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},Un.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},Un.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},Un.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},Un.prototype.open=Un.prototype.connect=function(t,e){if(jn("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;jn("opening %s",this.uri),this.engine=Fn(this.uri,this.opts);var r=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var o=Rn(r,"open",function(){n.onopen(),t&&t()}),i=Rn(r,"error",function(e){if(jn("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else n.maybeReconnectOnOpen()});if(!1!==this._timeout){var s=this._timeout;jn("connect attempt will timeout after %d",s);var a=setTimeout(function(){jn("connect attempt timed out after %d",s),o.destroy(),r.close(),r.emit("error","timeout"),n.emitAll("connect_timeout",s)},s);this.subs.push({destroy:function(){clearTimeout(a)}})}return this.subs.push(o),this.subs.push(i),this},Un.prototype.onopen=function(){jn("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(Rn(t,"data",On(this,"ondata"))),this.subs.push(Rn(t,"ping",On(this,"onping"))),this.subs.push(Rn(t,"pong",On(this,"onpong"))),this.subs.push(Rn(t,"error",On(this,"onerror"))),this.subs.push(Rn(t,"close",On(this,"onclose"))),this.subs.push(Rn(this.decoder,"decoded",On(this,"ondecoded")))},Un.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},Un.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},Un.prototype.ondata=function(t){this.decoder.add(t)},Un.prototype.ondecoded=function(t){this.emit("packet",t)},Un.prototype.onerror=function(t){jn("error",t),this.emitAll("error",t)},Un.prototype.socket=function(t,e){var r=this.nsps[t];if(!r){r=new Tn(this,t,e),this.nsps[t]=r;var n=this;r.on("connecting",o),r.on("connect",function(){r.id=n.generateId(t)}),this.autoConnect&&o()}function o(){~kn(n.connecting,r)||n.connecting.push(r)}return r},Un.prototype.destroy=function(t){var e=kn(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},Un.prototype.packet=function(t){jn("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(r){for(var n=0;n<r.length;n++)e.engine.write(r[n],t.options);e.encoding=!1,e.processPacketQueue()}))},Un.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},Un.prototype.cleanup=function(){jn("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},Un.prototype.close=Un.prototype.disconnect=function(){jn("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},Un.prototype.onclose=function(t){jn("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},Un.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)jn("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();jn("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout(function(){t.skipReconnect||(jn("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(jn("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(jn("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(r)}})}},Un.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)};var In=R(function(t,e){var r=St("socket.io-client");t.exports=e=o;var n=e.managers={};function o(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var o,i=xt(t),s=i.source,a=i.id,c=i.path,u=n[a]&&c in n[a].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||u?(r("ignoring socket cache for %s",s),o=Mn(s,e)):(n[a]||(r("new io instance for %s",s),n[a]=Mn(s,e)),o=n[a]),i.query&&!e.query&&(e.query=i.query),o.socket(i.path,e)}e.protocol=Xe.protocol,e.connect=o,e.Manager=Mn,e.Socket=Tn}),qn=(In.managers,In.protocol,In.connect,In.Manager,In.Socket,function(t){function e(){var t,r;N(this,e);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=U(this,(t=I(e)).call.apply(t,[this].concat(o))),z(M(r),"state",{token:null,socket:null}),r}var r;return Y(e,p),j(e,[{key:"componentWillMount",value:(r=T(B.mark(function t(){var e,r,n,o=this;return B.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=this.props.username,t.prev=1,t.next=4,fetch("http://localhost:3000".concat("/anonymous"),{method:"POST",body:JSON.stringify({username:e}),headers:{"Content-Type":"application/json"}});case 4:return r=t.sent,t.next=7,r.json();case 7:n=t.sent,this.socket=In("http://localhost:3000",{query:"token=".concat(n.token)}),this.socket.on("error",function(t){console.log("error from socket",t)}),this.socket.on("connect",function(){console.log("connected",o.socket)}),this.setState({socket:this.socket}),t.next=17;break;case 14:t.prev=14,t.t0=t.catch(1),console.log("error....",t.t0);case 17:case"end":return t.stop()}},t,this,[[1,14]])})),function(){return r.apply(this,arguments)})},{key:"render",value:function(){var t=this.props.children;return null!==this.state.socket?t({socket:this.state.socket}):f("div",null,"L.....")}}]),e}()),Yn=function(t){function e(){var t;return N(this,e),t=U(this,I(e).call(this)),z(M(t),"_isMounted",!1),z(M(t),"sendMessage",function(){console.log("send message clicked");var e=t.props,r=e.targetName,n=e.socket,o=t.state.message,i=(new Date).getTime();n.emit("text_message",{reciever:r,message:o,datetime:i}),t.setState({messageSent:{reciever:r,datetime:i,message:o},message:""})}),z(M(t),"onMessageChange",function(e){t.setState({message:e.target.value})}),t.state={messageRecieved:null,messageSent:null,connected:!1,message:"",errors:[]},t}return Y(e,p),j(e,[{key:"componentDidMount",value:function(){var t=this;this._isMounted=!0;var e=this.props.socket;this.socket=e,this.socket.on("text_message",function(e){var r=e.sender,n=e.message,o=e.datetime;t._isMounted&&t.setState({messageRecieved:{sender:r,message:n,datetime:o}})}),this.socket.on("connect",function(){t._isMounted&&t.setState({connected:!0})}),this.socket.on("disconnect",function(){t._isMounted&&t.setState({connected:!1})})}},{key:"componentWillUnmount",value:function(){this._isMounted=!1}},{key:"render",value:function(){var t=this.props.children,e=this.state,r=e.messageRecieved,n=e.messageSent,o=e.message,i=e.errors;return t({messageRecieved:r,messageSent:n,message:o,sendMessage:this.sendMessage,onMessageChange:this.onMessageChange,errors:i})}}]),e}(),zn=function(t){var e=t.datetime;return f("div",{style:{display:"flex"}},f("div",{style:{flex:"1"}},f("hr",null)),f("div",null,new Date(e).toLocaleDateString()),f("div",{style:{flex:1}},f("hr",null)))};function Hn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function Wn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Hn(r,!0).forEach(function(e){z(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Hn(r).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}var Jn,Xn=function(t){var e=t.children;return f("div",{style:Wn({display:"flex",justifyContent:"left"===t.side?"flex-start":"flex-end"},t.style)},e)},Vn=function(t){var e=t.message,r=t.backgroundColor,n=t.datetime;return f("div",{style:{backgroundColor:r,padding:5,margin:2,borderRadius:15,borderColor:"#9E9E9E",borderStyle:"solid",borderWidth:2,maxWidth:"100%",wordWrap:"break-word",wordBreak:"break-all",minWidth:"30%"}},f("div",null,e),f("div",{style:{fontSize:10,paddingTop:2,textAlign:"end"}},f("i",{style:{backgroundColor:"#efebe9"}},new Date(n).toLocaleTimeString())))},$n=function(t){var e=t.message,r=t.datetime;return f("div",{style:{display:"flex",alignItems:"center",marginLeft:45}},f(Vn,{message:e,datetime:r,backgroundColor:"#FFECB3"}))},Kn=(z(Jn={height:30,width:40},"height",40),z(Jn,"padding",3),z(Jn,"borderRadius",30),z(Jn,"backgroundColor","darkSmoke"),z(Jn,"borderStyle","solid"),z(Jn,"borderWidth",2),z(Jn,"display","flex"),z(Jn,"justifyContent","center"),z(Jn,"alignItems","center"),z(Jn,"color","#009688"),z(Jn,"borderColor","#80cbc4"),Jn),Gn=function(t){var e=t.letter;return f("div",{style:Kn},f("div",null,(void 0===e?"U":e).toUpperCase()))},Zn=function(t){var e=t.message,r=t.datetime,n=t.letter;return f("div",{style:{display:"flex",alignItems:"center"}},!t.local&&f(Gn,{letter:n}),f(Vn,{message:e,datetime:r,backgroundColor:"#FFECB3"}))},Qn=function(t){var e=t.order;return f("div",null,t.dateSpace&&f(zn,t),f(Xn,t,f("F"===e?Zn:$n,t)))},to=function(t){var e=t.messages,r=void 0===e?[]:e;return(0,t.children)({messages:r.sort(function(t,e){return t.datetime-e.datetime})})};function eo(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function ro(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?eo(r,!0).forEach(function(e){z(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):eo(r).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}var no=function(t){var e=t.messages,r=t.children,n=t.localSide,o=void 0===n?"right":n,i=t.remoteSide,s=void 0===i?"left":i;if(0===e.length)return r({messages:[]});var a=e[0].from,c=e[0].datetime;return r({messages:e.map(function(t,e){if(0===e&&t.local)return ro({},t,{side:o,order:"F",dateSpace:!0});if(0===e&&!t.local){var r=void 0!==t.from[0]?t.from[0]:"";return ro({},t,{side:s,order:"F",dateSpace:!0,letter:r})}if(e>0&&a===t.from&&t.local)return new Date(c).getDate()!==new Date(t.datetime).getDate()?(a=t.from,c=t.datetime,ro({},t,{side:o,order:"S",dateSpace:!0})):(a=t.from,c=t.datetime,ro({},t,{side:o,order:"S",dateSpace:!1}));if(e>0&&a!==t.from&&t.local)return new Date(c).getDate()===new Date(t.datetime).getDate()?(a=t.from,c=t.datetime,ro({},t,{side:o,order:"F",dateSpace:!1})):(a=t.from,c=t.datetime,ro({},t,{side:o,order:"F",dateSpace:!0}));if(e>0&&a===t.from&&!t.local){if(new Date(c).getDate()!==new Date(t.datetime).getDate()){var n=void 0!==t.from[0]?t.from[0]:"";return c=t.datetime,ro({},t,{side:s,order:"S",dateSpace:!0,letter:n})}var i=void 0!==t.from[0]?t.from[0]:"";return c=t.datetime,ro({},t,{side:s,order:"S",dateSpace:!1,letter:i})}if(e>0&&a!==t.from&&!t.local){if(new Date(c).getDate()===new Date(t.datetime).getDate()){var u=void 0!==t.from[0]?t.from[0]:"";return a=t.from,c=t.datetime,ro({},t,{side:s,order:"F",dateSpace:!1,letter:u})}var f=void 0!==t.from[0]?t.from[0]:"";return a=t.from,c=t.datetime,ro({},t,{side:s,order:"F",dateSpace:!0,letter:f})}})})},oo=R(function(t){function e(){return t.exports=e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},e.apply(this,arguments)}t.exports=e}),io=function(t){var e=t.messages;return e.length>0?e.map(function(t,e){return f(Qn,oo({},t,{key:e}))}):null};function so(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function ao(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?so(r,!0).forEach(function(e){z(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):so(r).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}var co=function(t){function e(){return N(this,e),U(this,I(e).apply(this,arguments))}return Y(e,p),j(e,[{key:"componentWillReceiveProps",value:function(){this.gotoBottom()}},{key:"componentDidUpdate",value:function(){this.gotoBottom()}},{key:"gotoBottom",value:function(){document.getElementsByName("msgViewScroller").forEach(function(t){t.scrollTop=t.scrollHeight-t.clientHeight})}},{key:"render",value:function(){var t=this.props,e=t.children;return f("div",{name:"msgViewScroller",style:ao({backgroundColor:"#edeff2",overflow:"auto",width:"100%",height:"100%"},t.style)},e)}}]),e}(),uo=function(t){var e=t.messages;return f(to,{messages:e},function(t){var e=t.messages;return f(no,{messages:e},function(t){var e=t.messages;return f(co,null,f(io,{messages:e}))})})};function fo(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function ho(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?fo(r,!0).forEach(function(e){z(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):fo(r).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}var lo=function(t){var e=t.onMessageChange,r=t.message,n=t.sendMessage,o=t.style,i=t.id,s=void 0===i?0:i;return f("div",{style:ho({},o),className:"input-group"},f("input",{"data-testid":"message".concat(s),onKeyDown:function(t){13===t.keyCode&&sendMesage()},className:"form-control",onChange:e,value:r,name:"message",type:"text",placeholder:"Enter message text"}),f("div",{className:"input-group-append"},f("button",{"data-testid":"sendMessage".concat(s),disabled:""===r,style:{marginLeft:2},className:"btn btn-secondary",onClick:n},"Send")))};var po=function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}};var yo=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)};var go=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")};var mo=function(t){return po(t)||yo(t)||go()},vo=function(t){var e=t.message,r=t.key,n=t.onSave,o=null===JSON.parse(localStorage.getItem(r))?[e]:[].concat(mo(JSON.parse(localStorage.getItem(r))),[e]);localStorage.setItem(r,JSON.stringify(o)),n({message:e})},bo=function(t){var e=t.key;(0,t.onLoad)({messages:null===JSON.parse(localStorage.getItem(e))?[]:mo(JSON.parse(localStorage.getItem(e)))})},wo=function(t){function e(){var t,r;N(this,e);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=U(this,(t=I(e)).call.apply(t,[this].concat(o))),z(M(r),"state",{messages:[],errors:[]}),z(M(r),"_loadFromStorage",function(t){var e=t.key;bo({key:e,onLoad:function(t){var e=t.messages;r.setState({messages:e})}})}),z(M(r),"_saveLocalMessage",function(t){var e=t.key,n=t.messageSent,o=e,i=n.datetime,s=n.message,a=n.reciever;vo({message:{message:s,from:o,local:!0,datetime:i,to:a},key:e,onSave:function(t){var e=t.message;r.setState(function(t){return{messages:[].concat(mo(t.messages),[e]),message:""}})}})}),z(M(r),"_saveRemoteMessage",function(t){var e=t.key,n=t.messageRecieved,o=n.datetime,i=n.message,s=n.sender;vo({message:{message:i,from:s,local:!1,datetime:o,to:e},key:e,onSave:function(t){var e=t.message;r.setState(function(t){return{messages:[].concat(mo(t.messages),[e])}})}})}),r}return Y(e,p),j(e,[{key:"componentDidMount",value:function(){var t=this.props.name;this._loadFromStorage({key:t})}},{key:"componentWillReceiveProps",value:function(t){var e=this.props,r=e.messageSent,n=e.messageRecieved,o=e.name;null===r&&t.messageSent?this._saveLocalMessage({key:o,messageSent:t.messageSent}):null===n&&t.messageRecieved?this._saveRemoteMessage({key:o,messageRecieved:t.messageRecieved}):null!==r&&t.messageSent.datetime>r.datetime?this._saveLocalMessage({key:o,messageSent:t.messageSent}):null!==n&&t.messageRecieved.datetime>n.datetime&&this._saveRemoteMessage({key:o,messageRecieved:t.messageRecieved})}},{key:"render",value:function(){var t=this.state.messages;return(0,this.props.children)({messages:t})}}]),e}(),Co=function(t){var e=t.name,r=t.targetName,n=t.socket,o=t.id,i=void 0===o?0:o,s=t.height,a=void 0===s?"96vh":s;return f(Yn,{targetName:r,socket:n},function(t){var r=t.messageSent,n=t.messageRecieved,o=t.message,s=t.sendMessage,c=t.onMessageChange;return f(wo,{messageRecieved:n,messageSent:r,name:e},function(t){var e=t.messages;return f("div",{style:{height:a,width:"100%"}},f(uo,{messages:e}),f(lo,{id:i,message:o,sendMessage:s,onMessageChange:c}))})})},_o=function(t){var e=t.name,r=t.targetName;return f(qn,{username:e},function(t){var n=t.socket;return f("div",{style:{flex:1,margin:10}},"User:",e,f(Co,{height:"50vh",name:e,targetName:r,socket:n}))})};!function(e,r,n){var a,c,u;t.__&&t.__(e,r),c=(a=n===o)?null:n&&n.__k||r.__k,e=f(l,null,[e]),u=[],k(r,(a?r:n||r).__k=e,c||i,i,void 0!==r.ownerSVGElement,n&&!a?[n]:c?null:s.slice.call(r.childNodes),u,n||i,a),A(u,e)}(f("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",marginTop:70}},f("div",{style:{display:"flex",justifyContent:"center"}},f("h3",null,"SocketIO text messaging demo")),f(function(){return f("div",{style:{display:"flex",alignItems:"center",width:"50%"}},f(_o,{name:"mario",targetName:"dragos"}),f(_o,{name:"dragos",targetName:"mario"}))},null)),document.getElementById("root"))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
