import{a as t,b as e,s as n,C as r,c as i,d as o,n as a,e as s,f as c,g as l,h as d,i as u,j as p,l as h,m as f,q as g,w as m,D as y,E as _,F as b,G as v,H as w,I as C,v as A,x as E,y as T,B as S,r as x}from"./chunk-b152c3ca.js";import{a as R,b as k}from"./index-ede860cf.js";import{a as O,b as I}from"./chunk-3246ca92.js";
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const L={ACTIVE:"mdc-tab-indicator--active",FADE:"mdc-tab-indicator--fade",NO_TRANSITION:"mdc-tab-indicator--no-transition"},P={CONTENT_SELECTOR:".mdc-tab-indicator__content"};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class N extends t{static get cssClasses(){return L}static get strings(){return P}static get defaultAdapter(){return{addClass:()=>{},removeClass:()=>{},computeContentClientRect:()=>{},setContentStyleProperty:()=>{}}}constructor(t){super(Object.assign(N.defaultAdapter,t))}computeContentClientRect(){return this.adapter_.computeContentClientRect()}activate(t){}deactivate(){}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class D extends N{activate(t){if(!t)return void this.adapter_.addClass(N.cssClasses.ACTIVE);const e=this.computeContentClientRect(),n=t.width/e.width,r=t.left-e.left;this.adapter_.addClass(N.cssClasses.NO_TRANSITION),this.adapter_.setContentStyleProperty("transform",`translateX(${r}px) scaleX(${n})`),this.computeContentClientRect(),this.adapter_.removeClass(N.cssClasses.NO_TRANSITION),this.adapter_.addClass(N.cssClasses.ACTIVE),this.adapter_.setContentStyleProperty("transform","")}deactivate(){this.adapter_.removeClass(N.cssClasses.ACTIVE)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class F extends N{activate(){this.adapter_.addClass(N.cssClasses.ACTIVE)}deactivate(){this.adapter_.removeClass(N.cssClasses.ACTIVE)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class B extends e{static attachTo(t){return new B(t)}constructor(...t){super(...t),this.content_}initialize(){this.content_=this.root_.querySelector(N.strings.CONTENT_SELECTOR)}computeContentClientRect(){return this.foundation_.computeContentClientRect()}getDefaultFoundation(){const t=Object.assign({addClass:t=>this.root_.classList.add(t),removeClass:t=>this.root_.classList.remove(t),computeContentClientRect:()=>this.content_.getBoundingClientRect(),setContentStyleProperty:(t,e)=>this.content_.style.setProperty(t,e)});return this.root_.classList.contains(N.cssClasses.FADE)?new F(t):new D(t)}activate(t){this.foundation_.activate(t)}deactivate(){this.foundation_.deactivate()}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const M={ACTIVE:"mdc-tab--active"},U={ARIA_SELECTED:"aria-selected",RIPPLE_SELECTOR:".mdc-tab__ripple",CONTENT_SELECTOR:".mdc-tab__content",TAB_INDICATOR_SELECTOR:".mdc-tab-indicator",TABINDEX:"tabIndex",INTERACTED_EVENT:"MDCTab:interacted"};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class j extends t{static get cssClasses(){return M}static get strings(){return U}static get defaultAdapter(){return{addClass:()=>{},removeClass:()=>{},hasClass:()=>{},setAttr:()=>{},activateIndicator:()=>{},deactivateIndicator:()=>{},notifyInteracted:()=>{},getOffsetLeft:()=>{},getOffsetWidth:()=>{},getContentOffsetLeft:()=>{},getContentOffsetWidth:()=>{},focus:()=>{}}}constructor(t){super(Object.assign(j.defaultAdapter,t)),this.handleClick_=()=>this.handleClick()}handleClick(){this.adapter_.notifyInteracted()}isActive(){return this.adapter_.hasClass(M.ACTIVE)}activate(t){this.adapter_.addClass(M.ACTIVE),this.adapter_.setAttr(U.ARIA_SELECTED,"true"),this.adapter_.setAttr(U.TABINDEX,"0"),this.adapter_.activateIndicator(t),this.adapter_.focus()}deactivate(){this.isActive()&&(this.adapter_.removeClass(M.ACTIVE),this.adapter_.setAttr(U.ARIA_SELECTED,"false"),this.adapter_.setAttr(U.TABINDEX,"-1"),this.adapter_.deactivateIndicator())}computeDimensions(){const t=this.adapter_.getOffsetWidth(),e=this.adapter_.getOffsetLeft(),n=this.adapter_.getContentOffsetWidth(),r=this.adapter_.getContentOffsetLeft();return{rootLeft:e,rootRight:e+t,contentLeft:e+r,contentRight:e+r+n}}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class Y extends e{constructor(...t){super(...t),this.ripple_,this.tabIndicator_,this.content_,this.handleClick_}static attachTo(t){return new Y(t)}initialize(t=((t,e)=>new n(t,e)),e=(t=>new B(t))){const i=this.root_.querySelector(j.strings.RIPPLE_SELECTOR),o=Object.assign(n.createAdapter(this),{addClass:t=>i.classList.add(t),removeClass:t=>i.classList.remove(t),updateCssVariable:(t,e)=>i.style.setProperty(t,e)}),a=new r(o);this.ripple_=t(this.root_,a);const s=this.root_.querySelector(j.strings.TAB_INDICATOR_SELECTOR);this.tabIndicator_=e(s),this.content_=this.root_.querySelector(j.strings.CONTENT_SELECTOR)}initialSyncWithDOM(){this.handleClick_=this.foundation_.handleClick.bind(this.foundation_),this.listen("click",this.handleClick_)}destroy(){this.unlisten("click",this.handleClick_),this.ripple_.destroy(),super.destroy()}getDefaultFoundation(){return new j({setAttr:(t,e)=>this.root_.setAttribute(t,e),addClass:t=>this.root_.classList.add(t),removeClass:t=>this.root_.classList.remove(t),hasClass:t=>this.root_.classList.contains(t),activateIndicator:t=>this.tabIndicator_.activate(t),deactivateIndicator:()=>this.tabIndicator_.deactivate(),notifyInteracted:()=>this.emit(j.strings.INTERACTED_EVENT,{tab:this},!0),getOffsetLeft:()=>this.root_.offsetLeft,getOffsetWidth:()=>this.root_.offsetWidth,getContentOffsetLeft:()=>this.content_.offsetLeft,getContentOffsetWidth:()=>this.content_.offsetWidth,focus:()=>this.root_.focus()})}get active(){return this.foundation_.isActive()}activate(t){this.foundation_.activate(t)}deactivate(){this.foundation_.deactivate()}computeIndicatorClientRect(){return this.tabIndicator_.computeContentClientRect()}computeDimensions(){return this.foundation_.computeDimensions()}focus(){this.root_.focus()}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const W={ANIMATING:"mdc-tab-scroller--animating",SCROLL_TEST:"mdc-tab-scroller__test",SCROLL_AREA_SCROLL:"mdc-tab-scroller__scroll-area--scroll"},H={AREA_SELECTOR:".mdc-tab-scroller__scroll-area",CONTENT_SELECTOR:".mdc-tab-scroller__scroll-content"};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class q{constructor(t){this.adapter_=t}getScrollPositionRTL(t){}scrollToRTL(t){}incrementScrollRTL(t){}getAnimatingScrollPosition(t,e){}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class z extends q{getScrollPositionRTL(){const t=this.adapter_.getScrollAreaScrollLeft(),{right:e}=this.calculateScrollEdges_();return Math.round(e-t)}scrollToRTL(t){const e=this.calculateScrollEdges_(),n=this.adapter_.getScrollAreaScrollLeft(),r=this.clampScrollValue_(e.right-t);return{finalScrollPosition:r,scrollDelta:r-n}}incrementScrollRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),n=this.clampScrollValue_(e-t);return{finalScrollPosition:n,scrollDelta:n-e}}getAnimatingScrollPosition(t){return t}calculateScrollEdges_(){return{left:0,right:this.adapter_.getScrollContentOffsetWidth()-this.adapter_.getScrollAreaOffsetWidth()}}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.min(Math.max(e.left,t),e.right)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class V extends q{getScrollPositionRTL(t){const e=this.adapter_.getScrollAreaScrollLeft();return Math.round(t-e)}scrollToRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),n=this.clampScrollValue_(-t);return{finalScrollPosition:n,scrollDelta:n-e}}incrementScrollRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),n=this.clampScrollValue_(e-t);return{finalScrollPosition:n,scrollDelta:n-e}}getAnimatingScrollPosition(t,e){return t-e}calculateScrollEdges_(){const t=this.adapter_.getScrollContentOffsetWidth();return{left:this.adapter_.getScrollAreaOffsetWidth()-t,right:0}}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.max(Math.min(e.right,t),e.left)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class K extends q{getScrollPositionRTL(t){const e=this.adapter_.getScrollAreaScrollLeft();return Math.round(e-t)}scrollToRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),n=this.clampScrollValue_(t);return{finalScrollPosition:n,scrollDelta:e-n}}incrementScrollRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),n=this.clampScrollValue_(e+t);return{finalScrollPosition:n,scrollDelta:e-n}}getAnimatingScrollPosition(t,e){return t+e}calculateScrollEdges_(){return{left:this.adapter_.getScrollContentOffsetWidth()-this.adapter_.getScrollAreaOffsetWidth(),right:0}}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.min(Math.max(e.right,t),e.left)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class X extends t{static get cssClasses(){return W}static get strings(){return H}static get defaultAdapter(){return{eventTargetMatchesSelector:()=>{},addClass:()=>{},removeClass:()=>{},addScrollAreaClass:()=>{},setScrollAreaStyleProperty:()=>{},setScrollContentStyleProperty:()=>{},getScrollContentStyleValue:()=>{},setScrollAreaScrollLeft:()=>{},getScrollAreaScrollLeft:()=>{},getScrollContentOffsetWidth:()=>{},getScrollAreaOffsetWidth:()=>{},computeScrollAreaClientRect:()=>{},computeScrollContentClientRect:()=>{},computeHorizontalScrollbarHeight:()=>{}}}constructor(t){super(Object.assign(X.defaultAdapter,t)),this.isAnimating_=!1,this.rtlScrollerInstance_}init(){const t=this.adapter_.computeHorizontalScrollbarHeight();this.adapter_.setScrollAreaStyleProperty("margin-bottom",-t+"px"),this.adapter_.addScrollAreaClass(X.cssClasses.SCROLL_AREA_SCROLL)}getScrollPosition(){if(this.isRTL_())return this.computeCurrentScrollPositionRTL_();const t=this.calculateCurrentTranslateX_();return this.adapter_.getScrollAreaScrollLeft()-t}handleInteraction(){this.isAnimating_&&this.stopScrollAnimation_()}handleTransitionEnd(t){this.isAnimating_&&this.adapter_.eventTargetMatchesSelector(t.target,X.strings.CONTENT_SELECTOR)&&(this.isAnimating_=!1,this.adapter_.removeClass(X.cssClasses.ANIMATING))}incrementScroll(t){if(0!==t)return this.isRTL_()?this.incrementScrollRTL_(t):void this.incrementScroll_(t)}scrollTo(t){if(this.isRTL_())return this.scrollToRTL_(t);this.scrollTo_(t)}getRTLScroller(){return this.rtlScrollerInstance_||(this.rtlScrollerInstance_=this.rtlScrollerFactory_()),this.rtlScrollerInstance_}calculateCurrentTranslateX_(){const t=this.adapter_.getScrollContentStyleValue("transform");if("none"===t)return 0;const e=/\((.+)\)/.exec(t)[1].split(",");return parseFloat(e[4])}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.min(Math.max(e.left,t),e.right)}computeCurrentScrollPositionRTL_(){const t=this.calculateCurrentTranslateX_();return this.getRTLScroller().getScrollPositionRTL(t)}calculateScrollEdges_(){return{left:0,right:this.adapter_.getScrollContentOffsetWidth()-this.adapter_.getScrollAreaOffsetWidth()}}scrollTo_(t){const e=this.getScrollPosition(),n=this.clampScrollValue_(t),r=n-e;this.animate_({finalScrollPosition:n,scrollDelta:r})}scrollToRTL_(t){const e=this.getRTLScroller().scrollToRTL(t);this.animate_(e)}incrementScroll_(t){const e=this.getScrollPosition(),n=t+e,r=this.clampScrollValue_(n),i=r-e;this.animate_({finalScrollPosition:r,scrollDelta:i})}incrementScrollRTL_(t){const e=this.getRTLScroller().incrementScrollRTL(t);this.animate_(e)}animate_(t){0!==t.scrollDelta&&(this.stopScrollAnimation_(),this.adapter_.setScrollAreaScrollLeft(t.finalScrollPosition),this.adapter_.setScrollContentStyleProperty("transform",`translateX(${t.scrollDelta}px)`),this.adapter_.computeScrollAreaClientRect(),requestAnimationFrame(()=>{this.adapter_.addClass(X.cssClasses.ANIMATING),this.adapter_.setScrollContentStyleProperty("transform","none")}),this.isAnimating_=!0)}stopScrollAnimation_(){this.isAnimating_=!1;const t=this.getAnimatingScrollPosition_();this.adapter_.removeClass(X.cssClasses.ANIMATING),this.adapter_.setScrollContentStyleProperty("transform","translateX(0px)"),this.adapter_.setScrollAreaScrollLeft(t)}getAnimatingScrollPosition_(){const t=this.calculateCurrentTranslateX_(),e=this.adapter_.getScrollAreaScrollLeft();return this.isRTL_()?this.getRTLScroller().getAnimatingScrollPosition(e,t):e-t}rtlScrollerFactory_(){const t=this.adapter_.getScrollAreaScrollLeft();this.adapter_.setScrollAreaScrollLeft(t-1);const e=this.adapter_.getScrollAreaScrollLeft();if(e<0)return this.adapter_.setScrollAreaScrollLeft(t),new V(this.adapter_);const n=this.adapter_.computeScrollAreaClientRect(),r=this.adapter_.computeScrollContentClientRect(),i=Math.round(r.right-n.right);return this.adapter_.setScrollAreaScrollLeft(t),i===e?new K(this.adapter_):new z(this.adapter_)}isRTL_(){return"rtl"===this.adapter_.getScrollContentStyleValue("direction")}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */let G;
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class J extends e{static attachTo(t){return new J(t)}constructor(...t){super(...t),this.content_,this.area_,this.handleInteraction_,this.handleTransitionEnd_}initialize(){this.area_=this.root_.querySelector(X.strings.AREA_SELECTOR),this.content_=this.root_.querySelector(X.strings.CONTENT_SELECTOR)}initialSyncWithDOM(){this.handleInteraction_=()=>this.foundation_.handleInteraction(),this.handleTransitionEnd_=t=>this.foundation_.handleTransitionEnd(t),this.area_.addEventListener("wheel",this.handleInteraction_),this.area_.addEventListener("touchstart",this.handleInteraction_),this.area_.addEventListener("pointerdown",this.handleInteraction_),this.area_.addEventListener("mousedown",this.handleInteraction_),this.area_.addEventListener("keydown",this.handleInteraction_),this.content_.addEventListener("transitionend",this.handleTransitionEnd_)}destroy(){super.destroy(),this.area_.removeEventListener("wheel",this.handleInteraction_),this.area_.removeEventListener("touchstart",this.handleInteraction_),this.area_.removeEventListener("pointerdown",this.handleInteraction_),this.area_.removeEventListener("mousedown",this.handleInteraction_),this.area_.removeEventListener("keydown",this.handleInteraction_),this.content_.removeEventListener("transitionend",this.handleTransitionEnd_)}getDefaultFoundation(){return new X({eventTargetMatchesSelector:(t,e)=>{return t[function(t){return["msMatchesSelector","matches"].filter(e=>e in t).pop()}(HTMLElement.prototype)](e)},addClass:t=>this.root_.classList.add(t),removeClass:t=>this.root_.classList.remove(t),addScrollAreaClass:t=>this.area_.classList.add(t),setScrollAreaStyleProperty:(t,e)=>this.area_.style.setProperty(t,e),setScrollContentStyleProperty:(t,e)=>this.content_.style.setProperty(t,e),getScrollContentStyleValue:t=>window.getComputedStyle(this.content_).getPropertyValue(t),setScrollAreaScrollLeft:t=>this.area_.scrollLeft=t,getScrollAreaScrollLeft:()=>this.area_.scrollLeft,getScrollContentOffsetWidth:()=>this.content_.offsetWidth,getScrollAreaOffsetWidth:()=>this.area_.offsetWidth,computeScrollAreaClientRect:()=>this.area_.getBoundingClientRect(),computeScrollContentClientRect:()=>this.content_.getBoundingClientRect(),computeHorizontalScrollbarHeight:()=>(function(t,e=!0){if(e&&void 0!==G)return G;const n=t.createElement("div");n.classList.add(W.SCROLL_TEST),t.body.appendChild(n);const r=n.offsetHeight-n.clientHeight;return t.body.removeChild(n),e&&(G=r),r})(document)})}getScrollPosition(){return this.foundation_.getScrollPosition()}getScrollContentWidth(){return this.content_.offsetWidth}incrementScroll(t){this.foundation_.incrementScroll(t)}scrollTo(t){this.foundation_.scrollTo(t)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const $={TAB_ACTIVATED_EVENT:"MDCTabBar:activated",TAB_SCROLLER_SELECTOR:".mdc-tab-scroller",TAB_SELECTOR:".mdc-tab",ARROW_LEFT_KEY:"ArrowLeft",ARROW_RIGHT_KEY:"ArrowRight",END_KEY:"End",HOME_KEY:"Home",ENTER_KEY:"Enter",SPACE_KEY:"Space"},Z={EXTRA_SCROLL_AMOUNT:20,ARROW_LEFT_KEYCODE:37,ARROW_RIGHT_KEYCODE:39,END_KEYCODE:35,HOME_KEYCODE:36,ENTER_KEYCODE:13,SPACE_KEYCODE:32},Q=new Set;Q.add($.ARROW_LEFT_KEY),Q.add($.ARROW_RIGHT_KEY),Q.add($.END_KEY),Q.add($.HOME_KEY),Q.add($.ENTER_KEY),Q.add($.SPACE_KEY);const tt=new Map;tt.set(Z.ARROW_LEFT_KEYCODE,$.ARROW_LEFT_KEY),tt.set(Z.ARROW_RIGHT_KEYCODE,$.ARROW_RIGHT_KEY),tt.set(Z.END_KEYCODE,$.END_KEY),tt.set(Z.HOME_KEYCODE,$.HOME_KEY),tt.set(Z.ENTER_KEYCODE,$.ENTER_KEY),tt.set(Z.SPACE_KEYCODE,$.SPACE_KEY);class et extends t{static get strings(){return $}static get numbers(){return Z}static get defaultAdapter(){return{scrollTo:()=>{},incrementScroll:()=>{},getScrollPosition:()=>{},getScrollContentWidth:()=>{},getOffsetWidth:()=>{},isRTL:()=>{},setActiveTab:()=>{},activateTabAtIndex:()=>{},deactivateTabAtIndex:()=>{},focusTabAtIndex:()=>{},getTabIndicatorClientRectAtIndex:()=>{},getTabDimensionsAtIndex:()=>{},getPreviousActiveTabIndex:()=>{},getFocusedTabIndex:()=>{},getIndexOfTab:()=>{},getTabListLength:()=>{},notifyTabActivated:()=>{}}}constructor(t){super(Object.assign(et.defaultAdapter,t)),this.useAutomaticActivation_=!1}setUseAutomaticActivation(t){this.useAutomaticActivation_=t}activateTab(t){const e=this.adapter_.getPreviousActiveTabIndex();this.indexIsInRange_(t)&&t!==e&&(this.adapter_.deactivateTabAtIndex(e),this.adapter_.activateTabAtIndex(t,this.adapter_.getTabIndicatorClientRectAtIndex(e)),this.scrollIntoView(t),this.adapter_.notifyTabActivated(t))}handleKeyDown(t){const e=this.getKeyFromEvent_(t);if(void 0!==e)if(this.isActivationKey_(e)||t.preventDefault(),this.useAutomaticActivation_){if(this.isActivationKey_(e))return;const t=this.determineTargetFromKey_(this.adapter_.getPreviousActiveTabIndex(),e);this.adapter_.setActiveTab(t),this.scrollIntoView(t)}else{const t=this.adapter_.getFocusedTabIndex();if(this.isActivationKey_(e))this.adapter_.setActiveTab(t);else{const n=this.determineTargetFromKey_(t,e);this.adapter_.focusTabAtIndex(n),this.scrollIntoView(n)}}}handleTabInteraction(t){this.adapter_.setActiveTab(this.adapter_.getIndexOfTab(t.detail.tab))}scrollIntoView(t){if(this.indexIsInRange_(t))return 0===t?this.adapter_.scrollTo(0):t===this.adapter_.getTabListLength()-1?this.adapter_.scrollTo(this.adapter_.getScrollContentWidth()):this.isRTL_()?this.scrollIntoViewRTL_(t):void this.scrollIntoView_(t)}determineTargetFromKey_(t,e){const n=this.isRTL_(),r=this.adapter_.getTabListLength()-1,i=e===$.END_KEY,o=e===$.ARROW_LEFT_KEY&&!n||e===$.ARROW_RIGHT_KEY&&n,a=e===$.ARROW_RIGHT_KEY&&!n||e===$.ARROW_LEFT_KEY&&n;let s=t;return i?s=r:o?s-=1:a?s+=1:s=0,s<0?s=r:s>r&&(s=0),s}calculateScrollIncrement_(t,e,n,r){const i=this.adapter_.getTabDimensionsAtIndex(e),o=i.contentLeft-n-r,a=i.contentRight-n-Z.EXTRA_SCROLL_AMOUNT,s=o+Z.EXTRA_SCROLL_AMOUNT;return e<t?Math.min(a,0):Math.max(s,0)}calculateScrollIncrementRTL_(t,e,n,r,i){const o=this.adapter_.getTabDimensionsAtIndex(e),a=i-o.contentLeft-n,s=i-o.contentRight-n-r+Z.EXTRA_SCROLL_AMOUNT,c=a-Z.EXTRA_SCROLL_AMOUNT;return e>t?Math.max(s,0):Math.min(c,0)}findAdjacentTabIndexClosestToEdge_(t,e,n,r){const i=e.rootLeft-n,o=e.rootRight-n-r,a=i+o;return i<0||a<0?t-1:o>0||a>0?t+1:-1}findAdjacentTabIndexClosestToEdgeRTL_(t,e,n,r,i){const o=i-e.rootLeft-r-n,a=i-e.rootRight-n,s=o+a;return o>0||s>0?t+1:a<0||s<0?t-1:-1}getKeyFromEvent_(t){return Q.has(t.key)?t.key:tt.get(t.keyCode)}isActivationKey_(t){return t===$.SPACE_KEY||t===$.ENTER_KEY}indexIsInRange_(t){return t>=0&&t<this.adapter_.getTabListLength()}isRTL_(){return this.adapter_.isRTL()}scrollIntoView_(t){const e=this.adapter_.getScrollPosition(),n=this.adapter_.getOffsetWidth(),r=this.adapter_.getTabDimensionsAtIndex(t),i=this.findAdjacentTabIndexClosestToEdge_(t,r,e,n);if(!this.indexIsInRange_(i))return;const o=this.calculateScrollIncrement_(t,i,e,n);this.adapter_.incrementScroll(o)}scrollIntoViewRTL_(t){const e=this.adapter_.getScrollPosition(),n=this.adapter_.getOffsetWidth(),r=this.adapter_.getTabDimensionsAtIndex(t),i=this.adapter_.getScrollContentWidth(),o=this.findAdjacentTabIndexClosestToEdgeRTL_(t,r,e,n,i);if(!this.indexIsInRange_(o))return;const a=this.calculateScrollIncrementRTL_(t,o,e,n,i);this.adapter_.incrementScroll(a)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class nt extends e{constructor(...t){super(...t),this.tabList_,this.tabFactory_,this.tabScroller_,this.tabScrollerFactory_,this.handleTabInteraction_,this.handleKeyDown_}static attachTo(t){return new nt(t)}set useAutomaticActivation(t){this.foundation_.setUseAutomaticActivation(t)}initialize(t=(t=>new Y(t)),e=(t=>new J(t))){this.tabFactory_=t,this.tabScrollerFactory_=e,this.tabList_=this.getTabElements_().map(t=>this.tabFactory_(t));const n=this.root_.querySelector(et.strings.TAB_SCROLLER_SELECTOR);n&&(this.tabScroller_=this.tabScrollerFactory_(n))}initialSyncWithDOM(){this.handleTabInteraction_=t=>this.foundation_.handleTabInteraction(t),this.handleKeyDown_=t=>this.foundation_.handleKeyDown(t),this.root_.addEventListener(j.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.root_.addEventListener("keydown",this.handleKeyDown_);for(let t=0;t<this.tabList_.length;t++)if(this.tabList_[t].active){this.scrollIntoView(t);break}}destroy(){super.destroy(),this.root_.removeEventListener(j.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.root_.removeEventListener("keydown",this.handleKeyDown_),this.tabList_.forEach(t=>t.destroy()),this.tabScroller_.destroy()}getDefaultFoundation(){return new et({scrollTo:t=>this.tabScroller_.scrollTo(t),incrementScroll:t=>this.tabScroller_.incrementScroll(t),getScrollPosition:()=>this.tabScroller_.getScrollPosition(),getScrollContentWidth:()=>this.tabScroller_.getScrollContentWidth(),getOffsetWidth:()=>this.root_.offsetWidth,isRTL:()=>"rtl"===window.getComputedStyle(this.root_).getPropertyValue("direction"),setActiveTab:t=>this.foundation_.activateTab(t),activateTabAtIndex:(t,e)=>this.tabList_[t].activate(e),deactivateTabAtIndex:t=>this.tabList_[t].deactivate(),focusTabAtIndex:t=>this.tabList_[t].focus(),getTabIndicatorClientRectAtIndex:t=>this.tabList_[t].computeIndicatorClientRect(),getTabDimensionsAtIndex:t=>this.tabList_[t].computeDimensions(),getPreviousActiveTabIndex:()=>{for(let t=0;t<this.tabList_.length;t++)if(this.tabList_[t].active)return t;return-1},getFocusedTabIndex:()=>{const t=this.getTabElements_(),e=document.activeElement;return t.indexOf(e)},getIndexOfTab:t=>this.tabList_.indexOf(t),getTabListLength:()=>this.tabList_.length,notifyTabActivated:t=>this.emit(et.strings.TAB_ACTIVATED_EVENT,{index:t},!0)})}activateTab(t){this.foundation_.activateTab(t)}scrollIntoView(t){this.foundation_.scrollIntoView(t)}getTabElements_(){return[].slice.call(this.root_.querySelectorAll(et.strings.TAB_SELECTOR))}}var rt=Object.freeze({MDCTabBar:nt,MDCTabBarFoundation:et}),it=i((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.TabBar=e.Tab=e.TabIcon=e.TabLabel=void 0;var n=o(a),r=o(s),i=o(c),f=o(l),g=o(d),m=o(u),y=o(p),_=function(t){function e(){var t;return(0,r.default)(this,e),(t=(0,f.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab__text-label",t.mdcProps=[],t}return(0,m.default)(e,t),(0,i.default)(e,[{key:"materialDom",value:function(t){return(0,h.h)("span",Object.assign({},t),t.children)}}]),e}(y.default);e.TabLabel=_;var b=function(t){function e(){var t;return(0,r.default)(this,e),(t=(0,f.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab__icon",t.mdcProps=[],t}return(0,m.default)(e,t),(0,i.default)(e,[{key:"materialDom",value:function(t){return(0,h.h)("span",Object.assign({className:"material-icons"},t),t.children)}}]),e}(y.default);e.TabIcon=b;var v=function(t){function e(){var t;return(0,r.default)(this,e),(t=(0,f.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab",t.mdcProps=["active"],t.mdcNotifyProps=["active"],t}return(0,m.default)(e,t),(0,i.default)(e,[{key:"materialDom",value:function(t){return(0,h.h)("button",Object.assign({class:"mdc-tab",role:"tab","aria-selected":"true"},t),(0,h.h)("span",{class:"mdc-tab__content"},t.children),(0,h.h)("span",{class:"mdc-tab-indicator ".concat(t.active?"mdc-tab-indicator--active":"")},(0,h.h)("span",{class:"mdc-tab-indicator__content mdc-tab-indicator__content--underline"})),(0,h.h)("span",{class:"mdc-tab__ripple"}))}}]),e}(y.default);e.Tab=v;var w=function(t){function e(){var t;return(0,r.default)(this,e),(t=(0,f.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab-bar",t.mdcProps=[],t.mdcNotifyProps=["activeTabIndex"],t}return(0,m.default)(e,t),(0,i.default)(e,[{key:"componentDidMount",value:function(){(0,n.default)((0,g.default)(e.prototype),"componentDidMount",this).call(this),this.control&&(this.MDComponent=new rt.MDCTabBar(this.control)),this.afterComponentDidMount()}},{key:"componentWillUnmount",value:function(){(0,n.default)((0,g.default)(e.prototype),"componentWillUnmount",this).call(this),this.MDComponent&&this.MDComponent.destroy()}},{key:"materialDom",value:function(t){return(0,h.h)("div",{class:"mdc-tab-bar",role:"tablist",ref:this.setControlRef},(0,h.h)("div",{class:"mdc-tab-scroller"},(0,h.h)("div",{class:"mdc-tab-scroller__scroll-area"},(0,h.h)("div",{class:"mdc-tab-scroller__scroll-content"},t.children))))}}]),e}(y.default);e.TabBar=w;var C=function(t){function e(){return(0,r.default)(this,e),(0,f.default)(this,(0,g.default)(e).apply(this,arguments))}return(0,m.default)(e,t),e}(w);e.default=C,C.Tab=v,C.TabLabel=_,C.TabIcon=b})),ot=f(it);it.TabBar,it.Tab,it.TabIcon,it.TabLabel;g('/*!\n Material Components for the Web\n Copyright (c) 2018 Google Inc.\n License: MIT\n*/\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n.mdc-tab-bar {\n  width: 100%; }');g('/*!\n Material Components for the Web\n Copyright (c) 2018 Google Inc.\n License: MIT\n*/\n@-webkit-keyframes mdc-ripple-fg-radius-in {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }\n  to {\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }\n\n@keyframes mdc-ripple-fg-radius-in {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }\n  to {\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }\n\n@-webkit-keyframes mdc-ripple-fg-opacity-in {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: 0; }\n  to {\n    opacity: var(--mdc-ripple-fg-opacity, 0); } }\n\n@keyframes mdc-ripple-fg-opacity-in {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: 0; }\n  to {\n    opacity: var(--mdc-ripple-fg-opacity, 0); } }\n\n@-webkit-keyframes mdc-ripple-fg-opacity-out {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: var(--mdc-ripple-fg-opacity, 0); }\n  to {\n    opacity: 0; } }\n\n@keyframes mdc-ripple-fg-opacity-out {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: var(--mdc-ripple-fg-opacity, 0); }\n  to {\n    opacity: 0; } }\n\n.mdc-ripple-surface--test-edge-var-bug {\n  --mdc-ripple-surface-test-edge-var: 1px solid #000;\n  visibility: hidden; }\n  .mdc-ripple-surface--test-edge-var-bug::before {\n    border: var(--mdc-ripple-surface-test-edge-var); }\n\n.mdc-tab {\n  font-family: Roboto, sans-serif;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-size: 0.875rem;\n  line-height: 2.25rem;\n  font-weight: 500;\n  letter-spacing: 0.08929em;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: rgba(0, 0, 0, 0.54);\n  /* @alternate */\n  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54));\n  --mdc-ripple-fg-size: 0;\n  --mdc-ripple-left: 0;\n  --mdc-ripple-top: 0;\n  --mdc-ripple-fg-scale: 1;\n  --mdc-ripple-fg-translate-end: 0;\n  --mdc-ripple-fg-translate-start: 0;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  will-change: transform, opacity;\n  display: table-cell;\n  position: relative;\n  box-sizing: border-box;\n  min-width: 160px;\n  min-height: 48px;\n  padding: 0 24px;\n  text-align: center;\n  text-decoration: none;\n  white-space: nowrap;\n  cursor: pointer;\n  overflow: hidden;\n  vertical-align: middle; }\n  .mdc-tab .mdc-tab__icon {\n    color: rgba(0, 0, 0, 0.54);\n    /* @alternate */\n    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }\n  .mdc-tab::before, .mdc-tab::after {\n    position: absolute;\n    border-radius: 50%;\n    opacity: 0;\n    pointer-events: none;\n    content: ""; }\n  .mdc-tab::before {\n    transition: opacity 15ms linear;\n    z-index: 1; }\n  .mdc-tab.mdc-ripple-upgraded::before {\n    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));\n            transform: scale(var(--mdc-ripple-fg-scale, 1)); }\n  .mdc-tab.mdc-ripple-upgraded::after {\n    top: 0;\n    /* @noflip */\n    left: 0;\n    -webkit-transform: scale(0);\n            transform: scale(0);\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n  .mdc-tab.mdc-ripple-upgraded--unbounded::after {\n    top: var(--mdc-ripple-top, 0);\n    /* @noflip */\n    left: var(--mdc-ripple-left, 0); }\n  .mdc-tab.mdc-ripple-upgraded--foreground-activation::after {\n    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;\n            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }\n  .mdc-tab.mdc-ripple-upgraded--foreground-deactivation::after {\n    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;\n            animation: 150ms mdc-ripple-fg-opacity-out;\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }\n  .mdc-tab::before, .mdc-tab::after {\n    background-color: black; }\n  .mdc-tab:hover::before {\n    opacity: 0.04; }\n  .mdc-tab:not(.mdc-ripple-upgraded):focus::before, .mdc-tab.mdc-ripple-upgraded--background-focused::before {\n    transition-duration: 75ms;\n    opacity: 0.12; }\n  .mdc-tab:not(.mdc-ripple-upgraded)::after {\n    transition: opacity 150ms linear; }\n  .mdc-tab:not(.mdc-ripple-upgraded):active::after {\n    transition-duration: 75ms;\n    opacity: 0.16; }\n  .mdc-tab.mdc-ripple-upgraded {\n    --mdc-ripple-fg-opacity: 0.16; }\n  .mdc-tab::before, .mdc-tab::after {\n    top: calc(50% - 100%);\n    /* @noflip */\n    left: calc(50% - 100%);\n    width: 200%;\n    height: 200%; }\n  .mdc-tab.mdc-ripple-upgraded::after {\n    width: var(--mdc-ripple-fg-size, 100%);\n    height: var(--mdc-ripple-fg-size, 100%); }\n  .mdc-tab:hover {\n    color: rgba(0, 0, 0, 0.87);\n    /* @alternate */\n    color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n    .mdc-tab:hover .mdc-tab__icon {\n      color: rgba(0, 0, 0, 0.87);\n      /* @alternate */\n      color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n  .mdc-tab:focus {\n    outline: none; }\n  @media screen and (max-width: 600px) {\n    .mdc-tab {\n      min-width: 72px;\n      padding: 0 12px; } }\n  .mdc-tab__icon {\n    display: block;\n    margin: 0 auto;\n    width: 24px;\n    height: 24px; }\n    .mdc-tab-bar--icons-with-text .mdc-tab__icon {\n      margin-top: 4px; }\n  .mdc-tab__icon-text {\n    display: block;\n    margin: 0 auto; }\n  .mdc-tab__icon + .mdc-tab__icon-text {\n    padding-top: 6px; }\n\n.mdc-tab--active {\n  color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n  .mdc-tab--active .mdc-tab__icon {\n    color: rgba(0, 0, 0, 0.87);\n    /* @alternate */\n    color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n  .mdc-tab--active::before {\n    bottom: 0; }\n\n.mdc-tab__indicator {\n  background-color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));\n  position: absolute;\n  bottom: 0;\n  height: 2px;\n  visibility: hidden;\n  left: 2px;\n  width: calc(100% - 4px); }\n\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab--active .mdc-tab__indicator,\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:hover .mdc-tab__indicator,\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:active .mdc-tab__indicator {\n  visibility: visible; }\n\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:not(.mdc-tab--active):hover .mdc-tab__indicator {\n  opacity: .38; }\n\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab--active,\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:not(.mdc-tab--active):active .mdc-tab__indicator {\n  opacity: .87; }\n\n.mdc-tab-bar__indicator,\n.mdc-tab__indicator {\n  background-color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  background-color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n\n.mdc-tab-bar {\n  display: table;\n  position: relative;\n  height: 48px;\n  margin: 0 auto;\n  text-transform: uppercase; }\n\n.mdc-tab-bar__indicator {\n  background-color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));\n  position: absolute;\n  bottom: 0;\n  height: 2px;\n  visibility: hidden;\n  left: 0;\n  width: 100%;\n  -webkit-transform-origin: left top;\n          transform-origin: left top;\n  transition: -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  will-change: transform; }\n\n.mdc-tab-bar--icons-with-text {\n  height: 72px; }\n\n.mdc-tab-bar-scroller {\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  width: 100%;\n  background-color: inherit;\n  overflow: hidden; }\n  .mdc-tab-bar-scroller__scroll-frame {\n    display: flex;\n    position: relative;\n    flex: 1;\n    justify-content: flex-start;\n    overflow: hidden; }\n    .mdc-tab-bar-scroller__scroll-frame__tabs {\n      transition: -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      will-change: transform; }\n  .mdc-tab-bar-scroller__indicator {\n    color: rgba(0, 0, 0, 0.54);\n    /* @alternate */\n    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54));\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 48px;\n    cursor: pointer;\n    visibility: hidden; }\n    .mdc-tab-bar-scroller__indicator:hover {\n      color: rgba(0, 0, 0, 0.87);\n      /* @alternate */\n      color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n    .mdc-tab-bar-scroller__indicator__inner {\n      color: inherit;\n      text-decoration: inherit;\n      cursor: inherit; }\n      .mdc-tab-bar-scroller__indicator__inner:focus {\n        outline-color: inherit; }\n      .mdc-tab-bar-scroller[dir="rtl"] .mdc-tab-bar-scroller__indicator__inner,\n      [dir="rtl"] .mdc-tab-bar-scroller .mdc-tab-bar-scroller__indicator__inner {\n        -webkit-transform: rotate(180deg);\n                transform: rotate(180deg); }\n    .mdc-tab-bar-scroller__indicator__inner:hover {\n      color: inherit; }\n  .mdc-tab-bar-scroller__indicator--enabled {\n    visibility: visible; }');var at=i((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.LayoutGrid=e.LayoutGridCell=e.LayoutGridInner=void 0;var n=o(a),r=o(s),i=o(c),f=o(l),g=o(d),m=o(u),y=o(p),_=function(t){function e(){var t;return(0,r.default)(this,e),(t=(0,f.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="layout-grid__inner",t.mdcProps=[],t}return(0,m.default)(e,t),(0,i.default)(e,[{key:"materialDom",value:function(t){return(0,h.h)("div",Object.assign({ref:this.setControlRef},t),t.children)}}]),e}(y.default);e.LayoutGridInner=_;var b=function(t){function e(){var t;return(0,r.default)(this,e),(t=(0,f.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="layout-grid__cell",t.mdcProps=[],t}return(0,m.default)(e,t),(0,i.default)(e,[{key:"render",value:function(t){var r=(0,n.default)((0,g.default)(e.prototype),"render",this).call(this,t);return Object.keys(e.propsDict).forEach((function(t){return delete(r.props||r.attributes)[e.propsDict[t]]})),r}},{key:"materialDom",value:function(t){return(0,h.h)("div",Object.assign({},t,{className:e.createClassName(t),ref:this.setControlRef}),t.children)}}],[{key:"createClassName",value:function(t){var n="mdc-layout-grid__cell--",r=[];return t[e.propsDict.cols]&&r.push("".concat(n,"span-").concat(t[e.propsDict.cols])),t[e.propsDict.desktop]&&r.push("".concat(n,"span-").concat(t[e.propsDict.desktop],"-desktop")),t[e.propsDict.tablet]&&r.push("".concat(n,"span-").concat(t[e.propsDict.tablet],"-tablet")),t[e.propsDict.phone]&&r.push("".concat(n,"span-").concat(t[e.propsDict.phone],"-phone")),t[e.propsDict.order]&&r.push("".concat(n,"order-").concat(t[e.propsDict.order])),t[e.propsDict.align]&&r.push("".concat(n,"align-").concat(t[e.propsDict.align])),r.join(" ")}}]),e}(y.default);e.LayoutGridCell=b,b.propsDict={align:"align",cols:"cols",desktop:"desktopCols",order:"order",phone:"phoneCols",tablet:"tabletCols"};var v=function(t){function e(){var t;return(0,r.default)(this,e),(t=(0,f.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="layout-grid",t.mdcProps=[],t}return(0,m.default)(e,t),(0,i.default)(e,[{key:"materialDom",value:function(t){return(0,h.h)("div",Object.assign({ref:this.setControlRef},t),t.children)}}]),e}(y.default);e.LayoutGrid=v;var w=function(t){function e(){return(0,r.default)(this,e),(0,f.default)(this,(0,g.default)(e).apply(this,arguments))}return(0,m.default)(e,t),e}(v);e.default=w,w.Cell=b,w.Inner=_}));f(at);at.LayoutGrid,at.LayoutGridCell,at.LayoutGridInner;g("/*!\n Material Components for the Web\n Copyright (c) 2018 Google Inc.\n License: MIT\n*/\n:root {\n  --mdc-layout-grid-margin-desktop: 24px;\n  --mdc-layout-grid-gutter-desktop: 24px;\n  --mdc-layout-grid-column-width-desktop: 72px;\n  --mdc-layout-grid-margin-tablet: 16px;\n  --mdc-layout-grid-gutter-tablet: 16px;\n  --mdc-layout-grid-column-width-tablet: 72px;\n  --mdc-layout-grid-margin-phone: 16px;\n  --mdc-layout-grid-gutter-phone: 16px;\n  --mdc-layout-grid-column-width-phone: 72px; }\n\n@media (min-width: 840px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 24px;\n    padding: var(--mdc-layout-grid-margin-desktop, 24px); } }\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 16px;\n    padding: var(--mdc-layout-grid-margin-tablet, 16px); } }\n\n@media (max-width: 479px) {\n  .mdc-layout-grid {\n    box-sizing: border-box;\n    margin: 0 auto;\n    padding: 16px;\n    padding: var(--mdc-layout-grid-margin-phone, 16px); } }\n\n@media (min-width: 840px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -12px;\n    margin: calc(var(--mdc-layout-grid-gutter-desktop, 24px) / 2 * -1); }\n    @supports (display: grid) {\n      .mdc-layout-grid__inner {\n        display: grid;\n        margin: 0;\n        grid-gap: 24px;\n        grid-gap: var(--mdc-layout-grid-gutter-desktop, 24px);\n        grid-template-columns: repeat(12, minmax(0, 1fr)); } } }\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -8px;\n    margin: calc(var(--mdc-layout-grid-gutter-tablet, 16px) / 2 * -1); }\n    @supports (display: grid) {\n      .mdc-layout-grid__inner {\n        display: grid;\n        margin: 0;\n        grid-gap: 16px;\n        grid-gap: var(--mdc-layout-grid-gutter-tablet, 16px);\n        grid-template-columns: repeat(8, minmax(0, 1fr)); } } }\n\n@media (max-width: 479px) {\n  .mdc-layout-grid__inner {\n    display: flex;\n    flex-flow: row wrap;\n    align-items: stretch;\n    margin: -8px;\n    margin: calc(var(--mdc-layout-grid-gutter-phone, 16px) / 2 * -1); }\n    @supports (display: grid) {\n      .mdc-layout-grid__inner {\n        display: grid;\n        margin: 0;\n        grid-gap: 16px;\n        grid-gap: var(--mdc-layout-grid-gutter-phone, 16px);\n        grid-template-columns: repeat(4, minmax(0, 1fr)); } } }\n\n@media (min-width: 840px) {\n  .mdc-layout-grid__cell {\n    width: calc(33.33333% - 24px);\n    width: calc(33.33333% - var(--mdc-layout-grid-gutter-desktop, 24px));\n    box-sizing: border-box;\n    margin: 12px;\n    margin: calc(var(--mdc-layout-grid-gutter-desktop, 24px) / 2); }\n    @supports (display: grid) {\n      .mdc-layout-grid__cell {\n        width: auto;\n        grid-column-end: span 4; } }\n    @supports (display: grid) {\n      .mdc-layout-grid__cell {\n        margin: 0; } }\n    .mdc-layout-grid__cell--span-1,\n    .mdc-layout-grid__cell--span-1-desktop {\n      width: calc(8.33333% - 24px);\n      width: calc(8.33333% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-1,\n        .mdc-layout-grid__cell--span-1-desktop {\n          width: auto;\n          grid-column-end: span 1; } }\n    .mdc-layout-grid__cell--span-2,\n    .mdc-layout-grid__cell--span-2-desktop {\n      width: calc(16.66667% - 24px);\n      width: calc(16.66667% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-2,\n        .mdc-layout-grid__cell--span-2-desktop {\n          width: auto;\n          grid-column-end: span 2; } }\n    .mdc-layout-grid__cell--span-3,\n    .mdc-layout-grid__cell--span-3-desktop {\n      width: calc(25% - 24px);\n      width: calc(25% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-3,\n        .mdc-layout-grid__cell--span-3-desktop {\n          width: auto;\n          grid-column-end: span 3; } }\n    .mdc-layout-grid__cell--span-4,\n    .mdc-layout-grid__cell--span-4-desktop {\n      width: calc(33.33333% - 24px);\n      width: calc(33.33333% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-4,\n        .mdc-layout-grid__cell--span-4-desktop {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-5,\n    .mdc-layout-grid__cell--span-5-desktop {\n      width: calc(41.66667% - 24px);\n      width: calc(41.66667% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-5,\n        .mdc-layout-grid__cell--span-5-desktop {\n          width: auto;\n          grid-column-end: span 5; } }\n    .mdc-layout-grid__cell--span-6,\n    .mdc-layout-grid__cell--span-6-desktop {\n      width: calc(50% - 24px);\n      width: calc(50% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-6,\n        .mdc-layout-grid__cell--span-6-desktop {\n          width: auto;\n          grid-column-end: span 6; } }\n    .mdc-layout-grid__cell--span-7,\n    .mdc-layout-grid__cell--span-7-desktop {\n      width: calc(58.33333% - 24px);\n      width: calc(58.33333% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-7,\n        .mdc-layout-grid__cell--span-7-desktop {\n          width: auto;\n          grid-column-end: span 7; } }\n    .mdc-layout-grid__cell--span-8,\n    .mdc-layout-grid__cell--span-8-desktop {\n      width: calc(66.66667% - 24px);\n      width: calc(66.66667% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-8,\n        .mdc-layout-grid__cell--span-8-desktop {\n          width: auto;\n          grid-column-end: span 8; } }\n    .mdc-layout-grid__cell--span-9,\n    .mdc-layout-grid__cell--span-9-desktop {\n      width: calc(75% - 24px);\n      width: calc(75% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-9,\n        .mdc-layout-grid__cell--span-9-desktop {\n          width: auto;\n          grid-column-end: span 9; } }\n    .mdc-layout-grid__cell--span-10,\n    .mdc-layout-grid__cell--span-10-desktop {\n      width: calc(83.33333% - 24px);\n      width: calc(83.33333% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-10,\n        .mdc-layout-grid__cell--span-10-desktop {\n          width: auto;\n          grid-column-end: span 10; } }\n    .mdc-layout-grid__cell--span-11,\n    .mdc-layout-grid__cell--span-11-desktop {\n      width: calc(91.66667% - 24px);\n      width: calc(91.66667% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-11,\n        .mdc-layout-grid__cell--span-11-desktop {\n          width: auto;\n          grid-column-end: span 11; } }\n    .mdc-layout-grid__cell--span-12,\n    .mdc-layout-grid__cell--span-12-desktop {\n      width: calc(100% - 24px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-desktop, 24px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-12,\n        .mdc-layout-grid__cell--span-12-desktop {\n          width: auto;\n          grid-column-end: span 12; } } }\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid__cell {\n    width: calc(50% - 16px);\n    width: calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px));\n    box-sizing: border-box;\n    margin: 8px;\n    margin: calc(var(--mdc-layout-grid-gutter-tablet, 16px) / 2); }\n    @supports (display: grid) {\n      .mdc-layout-grid__cell {\n        width: auto;\n        grid-column-end: span 4; } }\n    @supports (display: grid) {\n      .mdc-layout-grid__cell {\n        margin: 0; } }\n    .mdc-layout-grid__cell--span-1,\n    .mdc-layout-grid__cell--span-1-tablet {\n      width: calc(12.5% - 16px);\n      width: calc(12.5% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-1,\n        .mdc-layout-grid__cell--span-1-tablet {\n          width: auto;\n          grid-column-end: span 1; } }\n    .mdc-layout-grid__cell--span-2,\n    .mdc-layout-grid__cell--span-2-tablet {\n      width: calc(25% - 16px);\n      width: calc(25% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-2,\n        .mdc-layout-grid__cell--span-2-tablet {\n          width: auto;\n          grid-column-end: span 2; } }\n    .mdc-layout-grid__cell--span-3,\n    .mdc-layout-grid__cell--span-3-tablet {\n      width: calc(37.5% - 16px);\n      width: calc(37.5% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-3,\n        .mdc-layout-grid__cell--span-3-tablet {\n          width: auto;\n          grid-column-end: span 3; } }\n    .mdc-layout-grid__cell--span-4,\n    .mdc-layout-grid__cell--span-4-tablet {\n      width: calc(50% - 16px);\n      width: calc(50% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-4,\n        .mdc-layout-grid__cell--span-4-tablet {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-5,\n    .mdc-layout-grid__cell--span-5-tablet {\n      width: calc(62.5% - 16px);\n      width: calc(62.5% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-5,\n        .mdc-layout-grid__cell--span-5-tablet {\n          width: auto;\n          grid-column-end: span 5; } }\n    .mdc-layout-grid__cell--span-6,\n    .mdc-layout-grid__cell--span-6-tablet {\n      width: calc(75% - 16px);\n      width: calc(75% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-6,\n        .mdc-layout-grid__cell--span-6-tablet {\n          width: auto;\n          grid-column-end: span 6; } }\n    .mdc-layout-grid__cell--span-7,\n    .mdc-layout-grid__cell--span-7-tablet {\n      width: calc(87.5% - 16px);\n      width: calc(87.5% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-7,\n        .mdc-layout-grid__cell--span-7-tablet {\n          width: auto;\n          grid-column-end: span 7; } }\n    .mdc-layout-grid__cell--span-8,\n    .mdc-layout-grid__cell--span-8-tablet {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-8,\n        .mdc-layout-grid__cell--span-8-tablet {\n          width: auto;\n          grid-column-end: span 8; } }\n    .mdc-layout-grid__cell--span-9,\n    .mdc-layout-grid__cell--span-9-tablet {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-9,\n        .mdc-layout-grid__cell--span-9-tablet {\n          width: auto;\n          grid-column-end: span 8; } }\n    .mdc-layout-grid__cell--span-10,\n    .mdc-layout-grid__cell--span-10-tablet {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-10,\n        .mdc-layout-grid__cell--span-10-tablet {\n          width: auto;\n          grid-column-end: span 8; } }\n    .mdc-layout-grid__cell--span-11,\n    .mdc-layout-grid__cell--span-11-tablet {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-11,\n        .mdc-layout-grid__cell--span-11-tablet {\n          width: auto;\n          grid-column-end: span 8; } }\n    .mdc-layout-grid__cell--span-12,\n    .mdc-layout-grid__cell--span-12-tablet {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-tablet, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-12,\n        .mdc-layout-grid__cell--span-12-tablet {\n          width: auto;\n          grid-column-end: span 8; } } }\n\n@media (max-width: 479px) {\n  .mdc-layout-grid__cell {\n    width: calc(100% - 16px);\n    width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px));\n    box-sizing: border-box;\n    margin: 8px;\n    margin: calc(var(--mdc-layout-grid-gutter-phone, 16px) / 2); }\n    @supports (display: grid) {\n      .mdc-layout-grid__cell {\n        width: auto;\n        grid-column-end: span 4; } }\n    @supports (display: grid) {\n      .mdc-layout-grid__cell {\n        margin: 0; } }\n    .mdc-layout-grid__cell--span-1,\n    .mdc-layout-grid__cell--span-1-phone {\n      width: calc(25% - 16px);\n      width: calc(25% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-1,\n        .mdc-layout-grid__cell--span-1-phone {\n          width: auto;\n          grid-column-end: span 1; } }\n    .mdc-layout-grid__cell--span-2,\n    .mdc-layout-grid__cell--span-2-phone {\n      width: calc(50% - 16px);\n      width: calc(50% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-2,\n        .mdc-layout-grid__cell--span-2-phone {\n          width: auto;\n          grid-column-end: span 2; } }\n    .mdc-layout-grid__cell--span-3,\n    .mdc-layout-grid__cell--span-3-phone {\n      width: calc(75% - 16px);\n      width: calc(75% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-3,\n        .mdc-layout-grid__cell--span-3-phone {\n          width: auto;\n          grid-column-end: span 3; } }\n    .mdc-layout-grid__cell--span-4,\n    .mdc-layout-grid__cell--span-4-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-4,\n        .mdc-layout-grid__cell--span-4-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-5,\n    .mdc-layout-grid__cell--span-5-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-5,\n        .mdc-layout-grid__cell--span-5-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-6,\n    .mdc-layout-grid__cell--span-6-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-6,\n        .mdc-layout-grid__cell--span-6-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-7,\n    .mdc-layout-grid__cell--span-7-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-7,\n        .mdc-layout-grid__cell--span-7-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-8,\n    .mdc-layout-grid__cell--span-8-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-8,\n        .mdc-layout-grid__cell--span-8-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-9,\n    .mdc-layout-grid__cell--span-9-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-9,\n        .mdc-layout-grid__cell--span-9-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-10,\n    .mdc-layout-grid__cell--span-10-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-10,\n        .mdc-layout-grid__cell--span-10-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-11,\n    .mdc-layout-grid__cell--span-11-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-11,\n        .mdc-layout-grid__cell--span-11-phone {\n          width: auto;\n          grid-column-end: span 4; } }\n    .mdc-layout-grid__cell--span-12,\n    .mdc-layout-grid__cell--span-12-phone {\n      width: calc(100% - 16px);\n      width: calc(100% - var(--mdc-layout-grid-gutter-phone, 16px)); }\n      @supports (display: grid) {\n        .mdc-layout-grid__cell--span-12,\n        .mdc-layout-grid__cell--span-12-phone {\n          width: auto;\n          grid-column-end: span 4; } } }\n\n.mdc-layout-grid__cell--order-1 {\n  order: 1; }\n\n.mdc-layout-grid__cell--order-2 {\n  order: 2; }\n\n.mdc-layout-grid__cell--order-3 {\n  order: 3; }\n\n.mdc-layout-grid__cell--order-4 {\n  order: 4; }\n\n.mdc-layout-grid__cell--order-5 {\n  order: 5; }\n\n.mdc-layout-grid__cell--order-6 {\n  order: 6; }\n\n.mdc-layout-grid__cell--order-7 {\n  order: 7; }\n\n.mdc-layout-grid__cell--order-8 {\n  order: 8; }\n\n.mdc-layout-grid__cell--order-9 {\n  order: 9; }\n\n.mdc-layout-grid__cell--order-10 {\n  order: 10; }\n\n.mdc-layout-grid__cell--order-11 {\n  order: 11; }\n\n.mdc-layout-grid__cell--order-12 {\n  order: 12; }\n\n.mdc-layout-grid__cell--align-top {\n  align-self: flex-start; }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--align-top {\n      align-self: start; } }\n\n.mdc-layout-grid__cell--align-middle {\n  align-self: center; }\n\n.mdc-layout-grid__cell--align-bottom {\n  align-self: flex-end; }\n  @supports (display: grid) {\n    .mdc-layout-grid__cell--align-bottom {\n      align-self: end; } }\n\n@media (min-width: 840px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 1176px;\n    width: calc( var(--mdc-layout-grid-column-width-desktop, 72px) * 12 + var(--mdc-layout-grid-gutter-desktop, 24px) * 11 + var(--mdc-layout-grid-margin-desktop, 24px) * 2); } }\n\n@media (min-width: 480px) and (max-width: 839px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 720px;\n    width: calc( var(--mdc-layout-grid-column-width-tablet, 72px) * 8 + var(--mdc-layout-grid-gutter-tablet, 16px) * 7 + var(--mdc-layout-grid-margin-tablet, 16px) * 2); } }\n\n@media (max-width: 479px) {\n  .mdc-layout-grid--fixed-column-width {\n    width: 368px;\n    width: calc( var(--mdc-layout-grid-column-width-phone, 72px) * 4 + var(--mdc-layout-grid-gutter-phone, 16px) * 3 + var(--mdc-layout-grid-margin-phone, 16px) * 2); } }\n\n.mdc-layout-grid--align-left {\n  margin-right: auto;\n  margin-left: 0; }\n\n.mdc-layout-grid--align-right {\n  margin-right: 0;\n  margin-left: auto; }");var st=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},ct=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,lt=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],dt=function(t){var e=t,n=t.indexOf("["),r=t.indexOf("]");-1!=n&&-1!=r&&(t=t.substring(0,n)+t.substring(n,r).replace(/:/g,";")+t.substring(r,t.length));for(var i=ct.exec(t||""),o={},a=14;a--;)o[lt[a]]=i[a]||"";return-1!=n&&-1!=r&&(o.source=e,o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":"),o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":"),o.ipv6uri=!0),o},ut=1e3,pt=60*ut,ht=60*pt,ft=24*ht,gt=7*ft,mt=365.25*ft,yt=function(t,e){e=e||{};var n=typeof t;if("string"===n&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var n=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*mt;case"weeks":case"week":case"w":return n*gt;case"days":case"day":case"d":return n*ft;case"hours":case"hour":case"hrs":case"hr":case"h":return n*ht;case"minutes":case"minute":case"mins":case"min":case"m":return n*pt;case"seconds":case"second":case"secs":case"sec":case"s":return n*ut;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(t);if("number"===n&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=ft)return _t(t,e,ft,"day");if(e>=ht)return _t(t,e,ht,"hour");if(e>=pt)return _t(t,e,pt,"minute");if(e>=ut)return _t(t,e,ut,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=ft)return Math.round(t/ft)+"d";if(e>=ht)return Math.round(t/ht)+"h";if(e>=pt)return Math.round(t/pt)+"m";if(e>=ut)return Math.round(t/ut)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function _t(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}var bt=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return n.colors[Math.abs(e)%n.colors.length]}function n(t){let o;function a(...t){if(!a.enabled)return;const e=a,r=Number(new Date),i=r-(o||r);e.diff=i,e.prev=o,e.curr=r,o=r,t[0]=n.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(r,i)=>{if("%%"===r)return r;s++;const o=n.formatters[i];if("function"==typeof o){const n=t[s];r=o.call(e,n),t.splice(s,1),s--}return r}),n.formatArgs.call(e,t),(e.log||n.log).apply(e,t)}return a.namespace=t,a.enabled=n.enabled(t),a.useColors=n.useColors(),a.color=e(t),a.destroy=r,a.extend=i,"function"==typeof n.init&&n.init(a),n.instances.push(a),a}function r(){const t=n.instances.indexOf(this);return-1!==t&&(n.instances.splice(t,1),!0)}function i(t,e){const r=n(this.namespace+(void 0===e?":":e)+t);return r.log=this.log,r}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return n.debug=n,n.default=n,n.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},n.disable=function(){const t=[...n.names.map(o),...n.skips.map(o).map(t=>"-"+t)].join(",");return n.enable(""),t},n.enable=function(t){let e;n.save(t),n.names=[],n.skips=[];const r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(e=0;e<i;e++)r[e]&&("-"===(t=r[e].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$")));for(e=0;e<n.instances.length;e++){const t=n.instances[e];t.enabled=n.enabled(t.namespace)}},n.enabled=function(t){if("*"===t[t.length-1])return!0;let e,r;for(e=0,r=n.skips.length;e<r;e++)if(n.skips[e].test(t))return!1;for(e=0,r=n.names.length;e<r;e++)if(n.names[e].test(t))return!0;return!1},n.humanize=yt,Object.keys(t).forEach(e=>{n[e]=t[e]}),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=e,n.enable(n.load()),n},vt=i((function(t,e){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==R&&"env"in R&&(t=R.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=bt(e);const{formatters:n}=t.exports;n.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}})),wt=(vt.log,vt.formatArgs,vt.save,vt.load,vt.useColors,vt.storage,vt.colors,vt("socket.io-client:url")),Ct=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(wt("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),wt("parse %s",t),n=dt(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var r=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+r+":"+n.port,n.href=n.protocol+"://"+r+(e&&e.port===n.port?"":":"+n.port),n};var At=1e3,Et=60*At,Tt=60*Et,St=24*Tt,xt=365.25*St,Rt=function(t,e){e=e||{};var n=typeof t;if("string"===n&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var n=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*xt;case"days":case"day":case"d":return n*St;case"hours":case"hour":case"hrs":case"hr":case"h":return n*Tt;case"minutes":case"minute":case"mins":case"min":case"m":return n*Et;case"seconds":case"second":case"secs":case"sec":case"s":return n*At;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(t);if("number"===n&&!1===isNaN(t))return e.long?function(t){return kt(t,St,"day")||kt(t,Tt,"hour")||kt(t,Et,"minute")||kt(t,At,"second")||t+" ms"}(t):function(t){if(t>=St)return Math.round(t/St)+"d";if(t>=Tt)return Math.round(t/Tt)+"h";if(t>=Et)return Math.round(t/Et)+"m";if(t>=At)return Math.round(t/At)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function kt(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}var Ot=i((function(t,e){function n(t){var n;function i(){if(i.enabled){var t=i,r=+new Date,o=r-(n||r);t.diff=o,t.prev=n,t.curr=r,n=r;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=e.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var c=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,(function(n,r){if("%%"===n)return n;c++;var i=e.formatters[r];if("function"==typeof i){var o=a[c];n=i.call(t,o),a.splice(c,1),c--}return n})),e.formatArgs.call(t,a),(i.log||e.log||console.log.bind(console)).apply(t,a)}}return i.namespace=t,i.enabled=e.enabled(t),i.useColors=e.useColors(),i.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),i.destroy=r,"function"==typeof e.init&&e.init(i),e.instances.push(i),i}function r(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=n.debug=n.default=n).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var o=e.instances[n];o.enabled=e.enabled(o.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=Rt,e.instances=[],e.names=[],e.skips=[],e.formatters={}})),It=(Ot.coerce,Ot.disable,Ot.enable,Ot.enabled,Ot.humanize,Ot.instances,Ot.names,Ot.skips,Ot.formatters,i((function(t,e){function n(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==R&&"env"in R&&(t=R.env.DEBUG),t}(e=t.exports=Ot).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var i=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(i++,"%c"===t&&(o=i))})),t.splice(o,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=n,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(n())}))),Lt=(It.log,It.formatArgs,It.save,It.load,It.useColors,It.storage,It.colors,i((function(t){function e(t){if(t)return function(t){for(var n in e.prototype)t[n]=e.prototype[n];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((n=r[i])===e||n.fn===e){r.splice(i,1);break}return this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,e);return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}}))),Pt={}.toString,Nt=Array.isArray||function(t){return"[object Array]"==Pt.call(t)},Dt=[],Ft=[],Bt="undefined"!=typeof Uint8Array?Uint8Array:Array,Mt=!1;function Ut(){Mt=!0;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0,n=t.length;e<n;++e)Dt[e]=t[e],Ft[t.charCodeAt(e)]=e;Ft["-".charCodeAt(0)]=62,Ft["_".charCodeAt(0)]=63}function jt(t,e,n){for(var r,i,o=[],a=e;a<n;a+=3)r=(t[a]<<16)+(t[a+1]<<8)+t[a+2],o.push(Dt[(i=r)>>18&63]+Dt[i>>12&63]+Dt[i>>6&63]+Dt[63&i]);return o.join("")}function Yt(t){var e;Mt||Ut();for(var n=t.length,r=n%3,i="",o=[],a=0,s=n-r;a<s;a+=16383)o.push(jt(t,a,a+16383>s?s:a+16383));return 1===r?(e=t[n-1],i+=Dt[e>>2],i+=Dt[e<<4&63],i+="=="):2===r&&(e=(t[n-2]<<8)+t[n-1],i+=Dt[e>>10],i+=Dt[e>>4&63],i+=Dt[e<<2&63],i+="="),o.push(i),o.join("")}function Wt(t,e,n,r,i){var o,a,s=8*i-r-1,c=(1<<s)-1,l=c>>1,d=-7,u=n?i-1:0,p=n?-1:1,h=t[e+u];for(u+=p,o=h&(1<<-d)-1,h>>=-d,d+=s;d>0;o=256*o+t[e+u],u+=p,d-=8);for(a=o&(1<<-d)-1,o>>=-d,d+=r;d>0;a=256*a+t[e+u],u+=p,d-=8);if(0===o)o=1-l;else{if(o===c)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),o-=l}return(h?-1:1)*a*Math.pow(2,o-r)}function Ht(t,e,n,r,i,o){var a,s,c,l=8*o-i-1,d=(1<<l)-1,u=d>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,f=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=d):(a=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-a))<1&&(a--,c*=2),(e+=a+u>=1?p/c:p*Math.pow(2,1-u))*c>=2&&(a++,c/=2),a+u>=d?(s=0,a=d):a+u>=1?(s=(e*c-1)*Math.pow(2,i),a+=u):(s=e*Math.pow(2,u-1)*Math.pow(2,i),a=0));i>=8;t[n+h]=255&s,h+=f,s/=256,i-=8);for(a=a<<i|s,l+=i;l>0;t[n+h]=255&a,h+=f,a/=256,l-=8);t[n+h-f]|=128*g}var qt={}.toString,zt=Array.isArray||function(t){return"[object Array]"==qt.call(t)};function Vt(){return Xt.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Kt(t,e){if(Vt()<e)throw new RangeError("Invalid typed array length");return Xt.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=Xt.prototype:(null===t&&(t=new Xt(e)),t.length=e),t}function Xt(t,e,n){if(!(Xt.TYPED_ARRAY_SUPPORT||this instanceof Xt))return new Xt(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return $t(this,t)}return Gt(this,t,e,n)}function Gt(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);Xt.TYPED_ARRAY_SUPPORT?(t=e).__proto__=Xt.prototype:t=Zt(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!Xt.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|ee(e,n),i=(t=Kt(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(te(e)){var n=0|Qt(e.length);return 0===(t=Kt(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?Kt(t,0):Zt(t,e);if("Buffer"===e.type&&zt(e.data))return Zt(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function Jt(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function $t(t,e){if(Jt(e),t=Kt(t,e<0?0:0|Qt(e)),!Xt.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function Zt(t,e){var n=e.length<0?0:0|Qt(e.length);t=Kt(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function Qt(t){if(t>=Vt())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Vt().toString(16)+" bytes");return 0|t}function te(t){return!(null==t||!t._isBuffer)}function ee(t,e){if(te(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return Re(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return ke(t).length;default:if(r)return Re(t).length;e=(""+e).toLowerCase(),r=!0}}function ne(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return ye(this,e,n);case"utf8":case"utf-8":return he(this,e,n);case"ascii":return ge(this,e,n);case"latin1":case"binary":return me(this,e,n);case"base64":return pe(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _e(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function re(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function ie(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=Xt.from(e,r)),te(e))return 0===e.length?-1:oe(t,e,n,r,i);if("number"==typeof e)return e&=255,Xt.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):oe(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function oe(t,e,n,r,i){var o,a=1,s=t.length,c=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,c/=2,n/=2}function l(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var d=-1;for(o=n;o<s;o++)if(l(t,o)===l(e,-1===d?0:o-d)){if(-1===d&&(d=o),o-d+1===c)return d*a}else-1!==d&&(o-=o-d),d=-1}else for(n+c>s&&(n=s-c),o=n;o>=0;o--){for(var u=!0,p=0;p<c;p++)if(l(t,o+p)!==l(e,p)){u=!1;break}if(u)return o}return-1}function ae(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function se(t,e,n,r){return Oe(Re(e,t.length-n),t,n,r)}function ce(t,e,n,r){return Oe(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function le(t,e,n,r){return ce(t,e,n,r)}function de(t,e,n,r){return Oe(ke(e),t,n,r)}function ue(t,e,n,r){return Oe(function(t,e){for(var n,r,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function pe(t,e,n){return 0===e&&n===t.length?Yt(t):Yt(t.slice(e,n))}function he(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,a,s,c,l=t[i],d=null,u=l>239?4:l>223?3:l>191?2:1;if(i+u<=n)switch(u){case 1:l<128&&(d=l);break;case 2:128==(192&(o=t[i+1]))&&(c=(31&l)<<6|63&o)>127&&(d=c);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(c=(15&l)<<12|(63&o)<<6|63&a)>2047&&(c<55296||c>57343)&&(d=c);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(c=(15&l)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&c<1114112&&(d=c)}null===d?(d=65533,u=1):d>65535&&(d-=65536,r.push(d>>>10&1023|55296),d=56320|1023&d),r.push(d),i+=u}return function(t){var e=t.length;if(e<=fe)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=fe));return n}(r)}Xt.TYPED_ARRAY_SUPPORT=void 0===k.TYPED_ARRAY_SUPPORT||k.TYPED_ARRAY_SUPPORT,Xt.poolSize=8192,Xt._augment=function(t){return t.__proto__=Xt.prototype,t},Xt.from=function(t,e,n){return Gt(null,t,e,n)},Xt.TYPED_ARRAY_SUPPORT&&(Xt.prototype.__proto__=Uint8Array.prototype,Xt.__proto__=Uint8Array),Xt.alloc=function(t,e,n){return function(t,e,n,r){return Jt(e),e<=0?Kt(t,e):void 0!==n?"string"==typeof r?Kt(t,e).fill(n,r):Kt(t,e).fill(n):Kt(t,e)}(null,t,e,n)},Xt.allocUnsafe=function(t){return $t(null,t)},Xt.allocUnsafeSlow=function(t){return $t(null,t)},Xt.isBuffer=Ie,Xt.compare=function(t,e){if(!te(t)||!te(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},Xt.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Xt.concat=function(t,e){if(!zt(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return Xt.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=Xt.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var o=t[n];if(!te(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},Xt.byteLength=ee,Xt.prototype._isBuffer=!0,Xt.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)re(this,e,e+1);return this},Xt.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)re(this,e,e+3),re(this,e+1,e+2);return this},Xt.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)re(this,e,e+7),re(this,e+1,e+6),re(this,e+2,e+5),re(this,e+3,e+4);return this},Xt.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?he(this,0,t):ne.apply(this,arguments)},Xt.prototype.equals=function(t){if(!te(t))throw new TypeError("Argument must be a Buffer");return this===t||0===Xt.compare(this,t)},Xt.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},Xt.prototype.compare=function(t,e,n,r,i){if(!te(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0),s=Math.min(o,a),c=this.slice(r,i),l=t.slice(e,n),d=0;d<s;++d)if(c[d]!==l[d]){o=c[d],a=l[d];break}return o<a?-1:a<o?1:0},Xt.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},Xt.prototype.indexOf=function(t,e,n){return ie(this,t,e,n,!0)},Xt.prototype.lastIndexOf=function(t,e,n){return ie(this,t,e,n,!1)},Xt.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return ae(this,t,e,n);case"utf8":case"utf-8":return se(this,t,e,n);case"ascii":return ce(this,t,e,n);case"latin1":case"binary":return le(this,t,e,n);case"base64":return de(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ue(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},Xt.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var fe=4096;function ge(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function me(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function ye(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=xe(t[o]);return i}function _e(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function be(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function ve(t,e,n,r,i,o){if(!te(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function we(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function Ce(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function Ae(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function Ee(t,e,n,r,i){return i||Ae(t,0,n,4),Ht(t,e,n,r,23,4),n+4}function Te(t,e,n,r,i){return i||Ae(t,0,n,8),Ht(t,e,n,r,52,8),n+8}Xt.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),Xt.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=Xt.prototype;else{var i=e-t;n=new Xt(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},Xt.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||be(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},Xt.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||be(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},Xt.prototype.readUInt8=function(t,e){return e||be(t,1,this.length),this[t]},Xt.prototype.readUInt16LE=function(t,e){return e||be(t,2,this.length),this[t]|this[t+1]<<8},Xt.prototype.readUInt16BE=function(t,e){return e||be(t,2,this.length),this[t]<<8|this[t+1]},Xt.prototype.readUInt32LE=function(t,e){return e||be(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Xt.prototype.readUInt32BE=function(t,e){return e||be(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Xt.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||be(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},Xt.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||be(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},Xt.prototype.readInt8=function(t,e){return e||be(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},Xt.prototype.readInt16LE=function(t,e){e||be(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},Xt.prototype.readInt16BE=function(t,e){e||be(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},Xt.prototype.readInt32LE=function(t,e){return e||be(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Xt.prototype.readInt32BE=function(t,e){return e||be(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Xt.prototype.readFloatLE=function(t,e){return e||be(t,4,this.length),Wt(this,t,!0,23,4)},Xt.prototype.readFloatBE=function(t,e){return e||be(t,4,this.length),Wt(this,t,!1,23,4)},Xt.prototype.readDoubleLE=function(t,e){return e||be(t,8,this.length),Wt(this,t,!0,52,8)},Xt.prototype.readDoubleBE=function(t,e){return e||be(t,8,this.length),Wt(this,t,!1,52,8)},Xt.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||ve(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},Xt.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||ve(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},Xt.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,1,255,0),Xt.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},Xt.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,2,65535,0),Xt.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):we(this,t,e,!0),e+2},Xt.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,2,65535,0),Xt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):we(this,t,e,!1),e+2},Xt.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,4,4294967295,0),Xt.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):Ce(this,t,e,!0),e+4},Xt.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,4,4294967295,0),Xt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Ce(this,t,e,!1),e+4},Xt.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);ve(this,t,e,n,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<n&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},Xt.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);ve(this,t,e,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},Xt.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,1,127,-128),Xt.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},Xt.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,2,32767,-32768),Xt.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):we(this,t,e,!0),e+2},Xt.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,2,32767,-32768),Xt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):we(this,t,e,!1),e+2},Xt.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,4,2147483647,-2147483648),Xt.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):Ce(this,t,e,!0),e+4},Xt.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||ve(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),Xt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Ce(this,t,e,!1),e+4},Xt.prototype.writeFloatLE=function(t,e,n){return Ee(this,t,e,!0,n)},Xt.prototype.writeFloatBE=function(t,e,n){return Ee(this,t,e,!1,n)},Xt.prototype.writeDoubleLE=function(t,e,n){return Te(this,t,e,!0,n)},Xt.prototype.writeDoubleBE=function(t,e,n){return Te(this,t,e,!1,n)},Xt.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!Xt.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},Xt.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Xt.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var a=te(t)?t:Re(new Xt(t,r).toString()),s=a.length;for(o=0;o<n-e;++o)this[o+e]=a[o%s]}return this};var Se=/[^+\/0-9A-Za-z-_]/g;function xe(t){return t<16?"0"+t.toString(16):t.toString(16)}function Re(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function ke(t){return function(t){var e,n,r,i,o,a;Mt||Ut();var s=t.length;if(s%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===t[s-2]?2:"="===t[s-1]?1:0,a=new Bt(3*s/4-o),r=o>0?s-4:s;var c=0;for(e=0,n=0;e<r;e+=4,n+=3)i=Ft[t.charCodeAt(e)]<<18|Ft[t.charCodeAt(e+1)]<<12|Ft[t.charCodeAt(e+2)]<<6|Ft[t.charCodeAt(e+3)],a[c++]=i>>16&255,a[c++]=i>>8&255,a[c++]=255&i;return 2===o?(i=Ft[t.charCodeAt(e)]<<2|Ft[t.charCodeAt(e+1)]>>4,a[c++]=255&i):1===o&&(i=Ft[t.charCodeAt(e)]<<10|Ft[t.charCodeAt(e+1)]<<4|Ft[t.charCodeAt(e+2)]>>2,a[c++]=i>>8&255,a[c++]=255&i),a}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(Se,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Oe(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}function Ie(t){return null!=t&&(!!t._isBuffer||Le(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&Le(t.slice(0,0))}(t))}function Le(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}var Pe=function(t){return Ne&&Ie(t)||De&&(t instanceof ArrayBuffer||Fe(t))},Ne=!0,De="function"==typeof ArrayBuffer,Fe=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer};var Be=Object.prototype.toString,Me="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Be.call(Blob),Ue="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Be.call(File);var je={deconstructPacket:function(t){var e=[],n=t.data,r=t;return r.data=function t(e,n){if(!e)return e;if(Pe(e)){var r={_placeholder:!0,num:n.length};return n.push(e),r}if(Nt(e)){for(var i=new Array(e.length),o=0;o<e.length;o++)i[o]=t(e[o],n);return i}if("object"==typeof e&&!(e instanceof Date)){i={};for(var a in e)i[a]=t(e[a],n);return i}return e}(n,e),r.attachments=e.length,{packet:r,buffers:e}},reconstructPacket:function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(Nt(e))for(var r=0;r<e.length;r++)e[r]=t(e[r],n);else if("object"==typeof e)for(var i in e)e[i]=t(e[i],n);return e}(t.data,e),t.attachments=void 0,t},removeBlobs:function(t,e){var n=0,r=t;!function t(i,o,a){if(!i)return i;if(Me&&i instanceof Blob||Ue&&i instanceof File){n++;var s=new FileReader;s.onload=function(){a?a[o]=this.result:r=this.result,--n||e(r)},s.readAsArrayBuffer(i)}else if(Nt(i))for(var c=0;c<i.length;c++)t(i[c],c,i);else if("object"==typeof i&&!Pe(i))for(var l in i)t(i[l],l,i)}(r),n||e(r)}},Ye=i((function(t,e){var n=It("socket.io-parser");function r(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=r,e.Decoder=a;var i=e.ERROR+'"encode error"';function o(t){var r=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(r+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(r+=t.nsp+","),null!=t.id&&(r+=t.id),null!=t.data){var o=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===o)return i;r+=o}return n("encoded %j as %s",t,r),r}function a(){this.reconstructor=null}function s(t){this.reconPack=t,this.buffers=[]}function c(t){return{type:e.ERROR,data:"parser error: "+t}}r.prototype.encode=function(t,r){(n("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){je.removeBlobs(t,(function(t){var n=je.deconstructPacket(t),r=o(n.packet),i=n.buffers;i.unshift(r),e(i)}))}(t,r):r([o(t)])},Lt(a.prototype),a.prototype.add=function(t){var r;if("string"==typeof t)r=function(t){var r=0,i={type:Number(t.charAt(0))};if(null==e.types[i.type])return c("unknown packet type "+i.type);if(e.BINARY_EVENT===i.type||e.BINARY_ACK===i.type){for(var o="";"-"!==t.charAt(++r)&&(o+=t.charAt(r),r!=t.length););if(o!=Number(o)||"-"!==t.charAt(r))throw new Error("Illegal attachments");i.attachments=Number(o)}if("/"===t.charAt(r+1))for(i.nsp="";++r;){if(","===(s=t.charAt(r)))break;if(i.nsp+=s,r===t.length)break}else i.nsp="/";var a=t.charAt(r+1);if(""!==a&&Number(a)==a){for(i.id="";++r;){var s;if(null==(s=t.charAt(r))||Number(s)!=s){--r;break}if(i.id+=t.charAt(r),r===t.length)break}i.id=Number(i.id)}if(t.charAt(++r)){var l=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(r));if(!(!1!==l&&(i.type===e.ERROR||Nt(l))))return c("invalid payload");i.data=l}return n("decoded %s as %j",t,i),i}(t),e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type?(this.reconstructor=new s(r),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",r)):this.emit("decoded",r);else{if(!Pe(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(r=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",r))}},a.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},s.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=je.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},s.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}})),We=(Ye.protocol,Ye.types,Ye.CONNECT,Ye.DISCONNECT,Ye.EVENT,Ye.ACK,Ye.ERROR,Ye.BINARY_EVENT,Ye.BINARY_ACK,Ye.Encoder,Ye.Decoder,i((function(t){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}}))),He=function(t){var e=t.xdomain,n=t.xscheme,r=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||We))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&r)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}},qe=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e},ze={}.toString,Ve=Array.isArray||function(t){return"[object Array]"==ze.call(t)},Ke=Object.prototype.toString,Xe="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Ke.call(Blob),Ge="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Ke.call(File),Je=function t(e){if(!e||"object"!=typeof e)return!1;if(Ve(e)){for(var n=0,r=e.length;n<r;n++)if(t(e[n]))return!0;return!1}if(Ie&&Ie(e)||"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||Xe&&e instanceof Blob||Ge&&e instanceof File)return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)&&t(e[i]))return!0;return!1};var $e=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var i=new Uint8Array(t),o=new Uint8Array(n-e),a=e,s=0;a<n;a++,s++)o[s]=i[a];return o.buffer},Ze=function(t,e,n){var r=!1;return n=n||Qe,i.count=t,0===t?e():i;function i(t,o){if(i.count<=0)throw new Error("after called too many times");--i.count,t?(r=!0,e(t),e=n):0!==i.count||r||e(null,o)}};function Qe(){}
/*! https://mths.be/utf8js v2.1.2 by @mathias */var tn,en,nn,rn=String.fromCharCode;function on(t){for(var e,n,r=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(n=t.charCodeAt(i++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),i--):r.push(e);return r}function an(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function sn(t,e){return rn(t>>e&63|128)}function cn(t,e){if(0==(4294967168&t))return rn(t);var n="";return 0==(4294965248&t)?n=rn(t>>6&31|192):0==(4294901760&t)?(an(t,e)||(t=65533),n=rn(t>>12&15|224),n+=sn(t,6)):0==(4292870144&t)&&(n=rn(t>>18&7|240),n+=sn(t,12),n+=sn(t,6)),n+=rn(63&t|128)}function ln(){if(nn>=en)throw Error("Invalid byte index");var t=255&tn[nn];if(nn++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function dn(t){var e,n;if(nn>en)throw Error("Invalid byte index");if(nn==en)return!1;if(e=255&tn[nn],nn++,0==(128&e))return e;if(192==(224&e)){if((n=(31&e)<<6|ln())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&e)){if((n=(15&e)<<12|ln()<<6|ln())>=2048)return an(n,t)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(n=(7&e)<<18|ln()<<12|ln()<<6|ln())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var un={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,r=on(t),i=r.length,o=-1,a="";++o<i;)a+=cn(r[o],n);return a},decode:function(t,e){var n=!1!==(e=e||{}).strict;tn=on(t),en=tn.length,nn=0;for(var r,i=[];!1!==(r=dn(n));)i.push(r);return function(t){for(var e,n=t.length,r=-1,i="";++r<n;)(e=t[r])>65535&&(i+=rn((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=rn(e);return i}(i)}},pn=i((function(t,e){!function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),i=r.length,o="";for(n=0;n<i;n+=3)o+=t[r[n]>>2],o+=t[(3&r[n])<<4|r[n+1]>>4],o+=t[(15&r[n+1])<<2|r[n+2]>>6],o+=t[63&r[n+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(t){var e,r,i,o,a,s=.75*t.length,c=t.length,l=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var d=new ArrayBuffer(s),u=new Uint8Array(d);for(e=0;e<c;e+=4)r=n[t.charCodeAt(e)],i=n[t.charCodeAt(e+1)],o=n[t.charCodeAt(e+2)],a=n[t.charCodeAt(e+3)],u[l++]=r<<2|i>>4,u[l++]=(15&i)<<4|o>>2,u[l++]=(3&o)<<6|63&a;return d}}()})),hn=(pn.encode,pn.decode,void 0!==hn?hn:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder),fn=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),gn=fn&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),mn=hn&&hn.prototype.append&&hn.prototype.getBlob;function yn(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t}))}function _n(t,e){e=e||{};var n=new hn;return yn(t).forEach((function(t){n.append(t)})),e.type?n.getBlob(e.type):n.getBlob()}function bn(t,e){return new Blob(yn(t),e||{})}"undefined"!=typeof Blob&&(_n.prototype=Blob.prototype,bn.prototype=Blob.prototype);var vn=fn?gn?Blob:bn:mn?_n:void 0,wn=i((function(t,e){var n;"undefined"!=typeof ArrayBuffer&&(n=pn);var r="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),i="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),o=r||i;e.protocol=3;var a=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},s=qe(a),c={type:"error",data:"parser error"};function l(t,e,n){for(var r=new Array(t.length),i=Ze(t.length,n),o=function(t,n,i){e(n,(function(e,n){r[t]=n,i(e,r)}))},a=0;a<t.length;a++)o(a,t[a],i)}e.encodePacket=function(t,n,r,i){"function"==typeof n&&(i=n,n=!1),"function"==typeof r&&(i=r,r=null);var s=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&s instanceof ArrayBuffer)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=t.data,o=new Uint8Array(i),s=new Uint8Array(1+i.byteLength);s[0]=a[t.type];for(var c=0;c<o.length;c++)s[c+1]=o[c];return r(s.buffer)}(t,n,i);if(void 0!==vn&&s instanceof vn)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(o)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=new FileReader;return i.onload=function(){e.encodePacket({type:t.type,data:i.result},n,!0,r)},i.readAsArrayBuffer(t.data)}(t,n,r);var i=new Uint8Array(1);i[0]=a[t.type];var s=new vn([i.buffer,t.data]);return r(s)}(t,n,i);if(s&&s.base64)return function(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}(t,i);var c=a[t.type];return void 0!==t.data&&(c+=r?un.encode(String(t.data),{strict:!1}):String(t.data)),i(""+c)},e.encodeBase64Packet=function(t,n){var r,i="b"+e.packets[t.type];if(void 0!==vn&&t.data instanceof vn){var o=new FileReader;return o.onload=function(){var t=o.result.split(",")[1];n(i+t)},o.readAsDataURL(t.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var a=new Uint8Array(t.data),s=new Array(a.length),c=0;c<a.length;c++)s[c]=a[c];r=String.fromCharCode.apply(null,s)}return i+=btoa(r),n(i)},e.decodePacket=function(t,n,r){if(void 0===t)return c;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&!1===(t=function(t){try{t=un.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return c;var i=t.charAt(0);return Number(i)==i&&s[i]?t.length>1?{type:s[i],data:t.substring(1)}:{type:s[i]}:c}i=new Uint8Array(t)[0];var o=$e(t,1);return vn&&"blob"===n&&(o=new vn([o])),{type:s[i],data:o}},e.decodeBase64Packet=function(t,e){var r=s[t.charAt(0)];if(!n)return{type:r,data:{base64:!0,data:t.substr(1)}};var i=n.decode(t.substr(1));return"blob"===e&&vn&&(i=new vn([i])),{type:r,data:i}},e.encodePayload=function(t,n,r){"function"==typeof n&&(r=n,n=null);var i=Je(t);if(n&&i)return vn&&!o?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r);if(!t.length)return r("0:");l(t,(function(t,r){e.encodePacket(t,!!i&&n,!1,(function(t){r(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return r(e.join(""))}))},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);var i;if("function"==typeof n&&(r=n,n=null),""===t)return r(c,0,1);for(var o,a,s="",l=0,d=t.length;l<d;l++){var u=t.charAt(l);if(":"===u){if(""===s||s!=(o=Number(s)))return r(c,0,1);if(s!=(a=t.substr(l+1,o)).length)return r(c,0,1);if(a.length){if(i=e.decodePacket(a,n,!1),c.type===i.type&&c.data===i.data)return r(c,0,1);if(!1===r(i,l+o,d))return}l+=o,s=""}else s+=u}return""!==s?r(c,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));l(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){return n(null,t)}))}),(function(t,e){var r=e.reduce((function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2}),0),i=new Uint8Array(r),o=0;return e.forEach((function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),a=0;a<t.length;a++)r[a]=t.charCodeAt(a);n=r.buffer}i[o++]=e?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)i[o++]=parseInt(s[a]);i[o++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)i[o++]=r[a]})),n(i.buffer)}))},e.encodePayloadAsBlob=function(t,n){l(t,(function(t,n){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),i=0;i<t.length;i++)r[i]=t.charCodeAt(i);t=r.buffer,e[0]=0}var o=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),a=new Uint8Array(o.length+1);for(i=0;i<o.length;i++)a[i]=parseInt(o[i]);if(a[o.length]=255,vn){var s=new vn([e.buffer,a.buffer,t]);n(null,s)}}))}),(function(t,e){return n(new vn(e))}))},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var i=t,o=[];i.byteLength>0;){for(var a=new Uint8Array(i),s=0===a[0],l="",d=1;255!==a[d];d++){if(l.length>310)return r(c,0,1);l+=a[d]}i=$e(i,2+l.length),l=parseInt(l);var u=$e(i,0,l);if(s)try{u=String.fromCharCode.apply(null,new Uint8Array(u))}catch(t){var p=new Uint8Array(u);u="";for(d=0;d<p.length;d++)u+=String.fromCharCode(p[d])}o.push(u),i=$e(i,l)}var h=o.length;o.forEach((function(t,i){r(e.decodePacket(t,n,!0),i,h)}))}})),Cn=(wn.protocol,wn.packets,wn.encodePacket,wn.encodeBase64Packet,wn.decodePacket,wn.decodeBase64Packet,wn.encodePayload,wn.decodePayload,wn.encodePayloadAsArrayBuffer,wn.encodePayloadAsBlob,wn.decodePayloadAsBinary,An);function An(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}Lt(An.prototype),An.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},An.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},An.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},An.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},An.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},An.prototype.onData=function(t){var e=wn.decodePacket(t,this.socket.binaryType);this.onPacket(e)},An.prototype.onPacket=function(t){this.emit("packet",t)},An.prototype.onClose=function(){this.readyState="closed",this.emit("close")};var En,Tn={encode:function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},decode:function(t){for(var e={},n=t.split("&"),r=0,i=n.length;r<i;r++){var o=n[r].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},Sn=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t},xn="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),Rn=64,kn={},On=0,In=0;function Ln(t){var e="";do{e=xn[t%Rn]+e,t=Math.floor(t/Rn)}while(t>0);return e}function Pn(){var t=Ln(+new Date);return t!==En?(On=0,En=t):t+"."+Ln(On++)}for(;In<Rn;In++)kn[xn[In]]=In;Pn.encode=Ln,Pn.decode=function(t){var e=0;for(In=0;In<t.length;In++)e=e*Rn+kn[t.charAt(In)];return e};var Nn=Pn,Dn=vt("engine.io-client:polling"),Fn=Mn,Bn=null!=new He({xdomain:!1}).responseType;function Mn(t){var e=t&&t.forceBase64;Bn&&!e||(this.supportsBinary=!1),Cn.call(this,t)}Sn(Mn,Cn),Mn.prototype.name="polling",Mn.prototype.doOpen=function(){this.poll()},Mn.prototype.pause=function(t){var e=this;function n(){Dn("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(Dn("we are currently polling - waiting to pause"),r++,this.once("pollComplete",(function(){Dn("pre-pause polling complete"),--r||n()}))),this.writable||(Dn("we are currently writing - waiting to pause"),r++,this.once("drain",(function(){Dn("pre-pause writing complete"),--r||n()})))}else n()},Mn.prototype.poll=function(){Dn("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},Mn.prototype.onData=function(t){var e=this;Dn("polling got data %s",t);wn.decodePayload(t,this.socket.binaryType,(function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():Dn('ignoring poll - transport state "%s"',this.readyState))},Mn.prototype.doClose=function(){var t=this;function e(){Dn("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(Dn("transport open - closing"),e()):(Dn("transport not open - deferring close"),this.once("open",e))},Mn.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};wn.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,n)}))},Mn.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=Nn()),this.supportsBinary||t.sid||(t.b64=1),t=Tn.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t};var Un=vt("engine.io-client:polling-xhr"),jn=Hn,Yn=qn;function Wn(){}function Hn(t){if(Fn.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function qn(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(Sn(Hn,Fn),Hn.prototype.supportsBinary=!0,Hn.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new qn(t)},Hn.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),i=this;r.on("success",e),r.on("error",(function(t){i.onError("xhr post error",t)})),this.sendXhr=r},Hn.prototype.doPoll=function(){Un("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},Lt(qn.prototype),qn.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new He(t),n=this;try{Un("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var r in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(r)&&e.setRequestHeader(r,this.extraHeaders[r])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof e.status?e.status:0)}),0))},Un("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){n.onError(t)}),0)}"undefined"!=typeof document&&(this.index=qn.requestsCount++,qn.requests[this.index]=this)},qn.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},qn.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},qn.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},qn.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=Wn:this.xhr.onreadystatechange=Wn,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete qn.requests[this.index],this.xhr=null}},qn.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},qn.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},qn.prototype.abort=function(){this.cleanup()},qn.requestsCount=0,qn.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",Vn);else if("function"==typeof addEventListener){var zn="onpagehide"in self?"pagehide":"unload";addEventListener(zn,Vn,!1)}function Vn(){for(var t in qn.requests)qn.requests.hasOwnProperty(t)&&qn.requests[t].abort()}jn.Request=Yn;var Kn,Xn=Qn,Gn=/\n/g,Jn=/\\n/g;function $n(){}function Zn(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==m?m:{}}function Qn(t){if(Fn.call(this,t),this.query=this.query||{},!Kn){var e=Zn();Kn=e.___eio=e.___eio||[]}this.index=Kn.length;var n=this;Kn.push((function(t){n.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){n.script&&(n.script.onerror=$n)}),!1)}Sn(Qn,Fn),Qn.prototype.supportsBinary=!1,Qn.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),Fn.prototype.doClose.call(this)},Qn.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},Qn.prototype.doWrite=function(t,e){var n=this;if(!this.form){var r,i=document.createElement("form"),o=document.createElement("textarea"),a=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=a,i.method="POST",i.setAttribute("accept-charset","utf-8"),o.name="d",i.appendChild(o),document.body.appendChild(i),this.form=i,this.area=o}function s(){c(),e()}function c(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),c(),t=t.replace(Jn,"\\\n"),this.area.value=t.replace(Gn,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&s()}:this.iframe.onload=s};var tr,er,nr=vt("engine.io-client:websocket");if("undefined"!=typeof WebSocket?tr=WebSocket:"undefined"!=typeof self&&(tr=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{er={}}catch(t){}var rr=tr||er,ir=or;function or(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=tr&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(rr=er),Cn.call(this,t)}Sn(or,Cn),or.prototype.name="websocket",or.prototype.supportsBinary=!0,or.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new rr(t,e):new rr(t):new rr(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},or.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},or.prototype.write=function(t){var e=this;this.writable=!1;for(var n=t.length,r=0,i=n;r<i;r++)!function(t){wn.encodePacket(t,e.supportsBinary,(function(r){if(!e.usingBrowserWebSocket){var i={};if(t.options&&(i.compress=t.options.compress),e.perMessageDeflate)("string"==typeof r?Xt.byteLength(r):r.length)<e.perMessageDeflate.threshold&&(i.compress=!1)}try{e.usingBrowserWebSocket?e.ws.send(r):e.ws.send(r,i)}catch(t){nr("websocket closed before onclose event")}--n||o()}))}(t[r]);function o(){e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0)}},or.prototype.onClose=function(){Cn.prototype.onClose.call(this)},or.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},or.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=Nn()),this.supportsBinary||(t.b64=1),(t=Tn.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},or.prototype.check=function(){return!(!rr||"__initialize"in rr&&this.name===or.prototype.name)};var ar={polling:function(t){var e=!1,n=!1,r=!1!==t.jsonp;if("undefined"!=typeof location){var i="https:"===location.protocol,o=location.port;o||(o=i?443:80),e=t.hostname!==location.hostname||o!==t.port,n=t.secure!==i}if(t.xdomain=e,t.xscheme=n,"open"in new He(t)&&!t.forceJSONP)return new jn(t);if(!r)throw new Error("JSONP disabled");return new Xn(t)},websocket:ir},sr=[].indexOf,cr=function(t,e){if(sr)return t.indexOf(e);for(var n=0;n<t.length;++n)if(t[n]===e)return n;return-1},lr=vt("engine.io-client:socket"),dr=ur;function ur(t,e){if(!(this instanceof ur))return new ur(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=dt(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=dt(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=Tn.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}ur.priorWebsocketSuccess=!1,Lt(ur.prototype),ur.protocol=wn.protocol,ur.Socket=ur,ur.Transport=Cn,ur.transports=ar,ur.parser=wn,ur.prototype.createTransport=function(t){lr('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=wn.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new ar[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},ur.prototype.open=function(){var t;if(this.rememberUpgrade&&ur.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},ur.prototype.setTransport=function(t){lr("setting transport %s",t.name);var e=this;this.transport&&(lr("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},ur.prototype.probe=function(t){lr('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,r=this;function i(){if(r.onlyBinaryUpgrades){var i=!this.supportsBinary&&r.transport.supportsBinary;n=n||i}n||(lr('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(i){if(!n)if("pong"===i.type&&"probe"===i.data){if(lr('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;ur.priorWebsocketSuccess="websocket"===e.name,lr('pausing current transport "%s"',r.transport.name),r.transport.pause((function(){n||"closed"!==r.readyState&&(lr("changing transport and sending upgrade packet"),d(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())}))}else{lr('probe transport "%s" failed',t);var o=new Error("probe error");o.transport=e.name,r.emit("upgradeError",o)}})))}function o(){n||(n=!0,d(),e.close(),e=null)}function a(n){var i=new Error("probe error: "+n);i.transport=e.name,o(),lr('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",i)}function s(){a("transport closed")}function c(){a("socket closed")}function l(t){e&&t.name!==e.name&&(lr('"%s" works - aborting "%s"',t.name,e.name),o())}function d(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",s),r.removeListener("close",c),r.removeListener("upgrading",l)}ur.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",s),this.once("close",c),this.once("upgrading",l),e.open()},ur.prototype.onOpen=function(){if(lr("socket open"),this.readyState="open",ur.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){lr("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},ur.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(lr('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else lr('packet received with socket readyState "%s"',this.readyState)},ur.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},ur.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},ur.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){lr("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},ur.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},ur.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},ur.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(lr("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},ur.prototype.write=ur.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},ur.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var i={type:t,data:e,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}},ur.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?r():e()})):this.upgrading?r():e()}function e(){t.onClose("forced close"),lr("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return this},ur.prototype.onError=function(t){lr("socket error %j",t),ur.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},ur.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){lr('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},ur.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~cr(this.transports,t[n])&&e.push(t[n]);return e};var pr=dr,hr=wn;pr.parser=hr;var fr=function(t,e){for(var n=[],r=(e=e||0)||0;r<t.length;r++)n[r-e]=t[r];return n};var gr=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}};var mr=[].slice,yr=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var n=mr.call(arguments,2);return function(){return e.apply(t,n.concat(mr.call(arguments)))}},_r=i((function(t,e){var n=vt("socket.io-client:socket");t.exports=o;var r={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},i=Lt.prototype.emit;function o(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}Lt(o.prototype),o.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[gr(t,"open",yr(this,"onopen")),gr(t,"packet",yr(this,"onpacket")),gr(t,"close",yr(this,"onclose"))]}},o.prototype.open=o.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},o.prototype.send=function(){var t=fr(arguments);return t.unshift("message"),this.emit.apply(this,t),this},o.prototype.emit=function(t){if(r.hasOwnProperty(t))return i.apply(this,arguments),this;var e=fr(arguments),o={type:(void 0!==this.flags.binary?this.flags.binary:Je(e))?Ye.BINARY_EVENT:Ye.EVENT,data:e,options:{}};return o.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(n("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),o.id=this.ids++),this.connected?this.packet(o):this.sendBuffer.push(o),this.flags={},this},o.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},o.prototype.onopen=function(){if(n("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?Tn.encode(this.query):this.query;n("sending connect packet with query %s",t),this.packet({type:Ye.CONNECT,query:t})}else this.packet({type:Ye.CONNECT})},o.prototype.onclose=function(t){n("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},o.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===Ye.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case Ye.CONNECT:this.onconnect();break;case Ye.EVENT:case Ye.BINARY_EVENT:this.onevent(t);break;case Ye.ACK:case Ye.BINARY_ACK:this.onack(t);break;case Ye.DISCONNECT:this.ondisconnect();break;case Ye.ERROR:this.emit("error",t.data)}},o.prototype.onevent=function(t){var e=t.data||[];n("emitting event %j",e),null!=t.id&&(n("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?i.apply(this,e):this.receiveBuffer.push(e)},o.prototype.ack=function(t){var e=this,r=!1;return function(){if(!r){r=!0;var i=fr(arguments);n("sending ack %j",i),e.packet({type:Je(i)?Ye.BINARY_ACK:Ye.ACK,id:t,data:i})}}},o.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(n("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):n("bad ack %s",t.id)},o.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},o.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)i.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},o.prototype.ondisconnect=function(){n("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},o.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},o.prototype.close=o.prototype.disconnect=function(){return this.connected&&(n("performing disconnect (%s)",this.nsp),this.packet({type:Ye.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},o.prototype.compress=function(t){return this.flags.compress=t,this},o.prototype.binary=function(t){return this.flags.binary=t,this}})),br=vr;function vr(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}vr.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},vr.prototype.reset=function(){this.attempts=0},vr.prototype.setMin=function(t){this.ms=t},vr.prototype.setMax=function(t){this.max=t},vr.prototype.setJitter=function(t){this.jitter=t};var wr=vt("socket.io-client:manager"),Cr=Object.prototype.hasOwnProperty,Ar=Er;function Er(t,e){if(!(this instanceof Er))return new Er(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new br({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||Ye;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}Er.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)Cr.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},Er.prototype.updateSocketIds=function(){for(var t in this.nsps)Cr.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},Er.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},Lt(Er.prototype),Er.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},Er.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},Er.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},Er.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},Er.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},Er.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},Er.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},Er.prototype.open=Er.prototype.connect=function(t,e){if(wr("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;wr("opening %s",this.uri),this.engine=pr(this.uri,this.opts);var n=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var i=gr(n,"open",(function(){r.onopen(),t&&t()})),o=gr(n,"error",(function(e){if(wr("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else r.maybeReconnectOnOpen()}));if(!1!==this._timeout){var a=this._timeout;wr("connect attempt will timeout after %d",a);var s=setTimeout((function(){wr("connect attempt timed out after %d",a),i.destroy(),n.close(),n.emit("error","timeout"),r.emitAll("connect_timeout",a)}),a);this.subs.push({destroy:function(){clearTimeout(s)}})}return this.subs.push(i),this.subs.push(o),this},Er.prototype.onopen=function(){wr("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(gr(t,"data",yr(this,"ondata"))),this.subs.push(gr(t,"ping",yr(this,"onping"))),this.subs.push(gr(t,"pong",yr(this,"onpong"))),this.subs.push(gr(t,"error",yr(this,"onerror"))),this.subs.push(gr(t,"close",yr(this,"onclose"))),this.subs.push(gr(this.decoder,"decoded",yr(this,"ondecoded")))},Er.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},Er.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},Er.prototype.ondata=function(t){this.decoder.add(t)},Er.prototype.ondecoded=function(t){this.emit("packet",t)},Er.prototype.onerror=function(t){wr("error",t),this.emitAll("error",t)},Er.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new _r(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",i),n.on("connect",(function(){n.id=r.generateId(t)})),this.autoConnect&&i()}function i(){~cr(r.connecting,n)||r.connecting.push(n)}return n},Er.prototype.destroy=function(t){var e=cr(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},Er.prototype.packet=function(t){wr("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()})))},Er.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},Er.prototype.cleanup=function(){wr("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},Er.prototype.close=Er.prototype.disconnect=function(){wr("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},Er.prototype.onclose=function(t){wr("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},Er.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)wr("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();wr("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout((function(){t.skipReconnect||(wr("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(wr("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(wr("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(n)}})}},Er.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)};var Tr=i((function(t,e){var n=vt("socket.io-client");t.exports=e=i;var r=e.managers={};function i(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,o=Ct(t),a=o.source,s=o.id,c=o.path,l=r[s]&&c in r[s].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||l?(n("ignoring socket cache for %s",a),i=Ar(a,e)):(r[s]||(n("new io instance for %s",a),r[s]=Ar(a,e)),i=r[s]),o.query&&!e.query&&(e.query=o.query),i.socket(o.path,e)}e.protocol=Ye.protocol,e.connect=i,e.Manager=Ar,e.Socket=_r})),Sr=(Tr.managers,Tr.protocol,Tr.connect,Tr.Manager,Tr.Socket,function(t){function e(){var t,n;_(this,e);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return n=b(this,(t=v(e)).call.apply(t,[this].concat(i))),st(w(n),"state",{token:null,socket:null,connected:!1}),n}var n;return y(e,A),C(e,[{key:"componentWillMount",value:(n=O(I.mark((function t(){var e,n,r,i=this;return I.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=this.props.username,t.prev=1,t.next=4,fetch("/anonymous",{method:"POST",body:JSON.stringify({username:e}),headers:{"Content-Type":"application/json"}});case 4:return n=t.sent,t.next=7,n.json();case 7:r=t.sent,this.socket=Tr("http://localhost:3000",{query:"token=".concat(r.token)}),this.socket.on("error",(function(t){console.log("error from socket",t)})),this.socket.on("connect",(function(){i.setState({connected:!0})})),this.setState({socket:this.socket}),t.next=17;break;case 14:t.prev=14,t.t0=t.catch(1),console.log("error....",t.t0);case 17:case"end":return t.stop()}}),t,this,[[1,14]])}))),function(){return n.apply(this,arguments)})},{key:"render",value:function(){var t=this.props.children,e=this.state.connected;return t({socket:this.state.socket,connected:e})}}]),e}());var xr=function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}};var Rr=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)};var kr=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")};var Or=function(t){return xr(t)||Rr(t)||kr()},Ir=function(t){var e=t.datetime;return x("div",{style:{display:"flex"}},x("div",{style:{flex:"1"}},x("hr",null)),x("div",null,new Date(e).toLocaleDateString()),x("div",{style:{flex:1}},x("hr",null)))};function Lr(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Pr(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Lr(n,!0).forEach((function(e){st(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Lr(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var Nr=function(t){var e=t.children,n=t.side,r=t.style;return x("div",{style:Pr({display:"flex",justifyContent:"left"===n?"flex-start":"flex-end"},r)},e)},Dr=function(t){var e=t.message,n=t.backgroundColor,r=t.datetime;return x("div",{style:{backgroundColor:n,padding:5,margin:2,borderRadius:15,borderColor:"#9E9E9E",borderStyle:"solid",borderWidth:2,maxWidth:"100%",wordWrap:"break-word",wordBreak:"break-all",minWidth:"30%"}},x("div",null,e),x("div",{style:{fontSize:10,paddingTop:2,textAlign:"end"}},x("i",{style:{backgroundColor:"#efebe9"}},new Date(r).toLocaleTimeString())))},Fr=function(t){var e=t.message,n=t.datetime;return x("div",{style:{display:"flex",alignItems:"center",marginLeft:45}},x(Dr,{message:e,datetime:n,backgroundColor:"#FFECB3"}))},Br={height:30,width:40,padding:3,borderRadius:30,backgroundColor:"darkSmoke",borderStyle:"solid",borderWidth:2,display:"flex",justifyContent:"center",alignItems:"center",color:"#009688",borderColor:"#80cbc4"},Mr=function(t){var e=t.letter;return x("div",{style:Br},x("div",null,(void 0===e?"U":e).toUpperCase()))},Ur=function(t){var e=t.message,n=t.datetime,r=t.letter,i=t.local;return x("div",{style:{display:"flex",alignItems:"center"}},!i&&x(Mr,{letter:r}),x(Dr,{message:e,datetime:n,backgroundColor:"#FFECB3"}))},jr=function(t){var e=t.order,n=t.dateSpace;return x("div",null,n&&x(Ir,t),x(Nr,t,x("F"===e?Ur:Fr,t)))};function Yr(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Wr(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Yr(n,!0).forEach((function(e){st(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Yr(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var Hr=function(t){var e=E(t),n=T(e,2),r=n[0],i=n[1];return S((function(){i(function(){if(0===t.length)return[];var e=t[0].from,n=t[0].datetime;return t.map((function(t,r){if(0===r&&t.local)return Wr({},t,{side:"right",order:"F",dateSpace:!0});if(0===r&&!t.local)return Wr({},t,{side:"left",order:"F",dateSpace:!0,letter:void 0!==t.from[0]?t.from[0]:""});if(r>0&&e===t.from&&t.local)return new Date(n).getDate()!==new Date(t.datetime).getDate()?(e=t.from,n=t.datetime,Wr({},t,{side:"right",order:"S",dateSpace:!0})):(e=t.from,n=t.datetime,Wr({},t,{side:"right",order:"S",dateSpace:!1}));if(r>0&&e!==t.from&&t.local)return new Date(n).getDate()===new Date(t.datetime).getDate()?(e=t.from,n=t.datetime,Wr({},t,{side:"right",order:"F",dateSpace:!1})):(e=t.from,n=t.datetime,Wr({},t,{side:"right",order:"F",dateSpace:!0}));if(r>0&&e===t.from&&!t.local){if(new Date(n).getDate()!==new Date(t.datetime).getDate()){var i=void 0!==t.from[0]?t.from[0]:"";return n=t.datetime,Wr({},t,{side:"left",order:"S",dateSpace:!0,letter:i})}var o=void 0!==t.from[0]?t.from[0]:"";return n=t.datetime,Wr({},t,{side:"left",order:"S",dateSpace:!1,letter:o})}if(r>0&&e!==t.from&&!t.local){if(new Date(n).getDate()===new Date(t.datetime).getDate()){var a=void 0!==t.from[0]?t.from[0]:"";return e=t.from,n=t.datetime,Wr({},t,{side:"left",order:"F",dateSpace:!1,letter:a})}var s=void 0!==t.from[0]?t.from[0]:"";return e=t.from,n=t.datetime,Wr({},t,{side:"left",order:"F",dateSpace:!0,letter:s})}return null}))}())}),[t]),{mappedMessages:r}},qr=i((function(t){function e(){return t.exports=e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},e.apply(this,arguments)}t.exports=e})),zr=function(t){var e=t.messages;return e.length>0?e.map((function(t,e){return x(jr,qr({},t,{key:e}))})):null},Vr=function(t){var e=t.children;return x("div",{style:{transform:"rotate(180deg)",height:"85%",backgroundColor:"#edeff2",overflow:"scroll"}},x("div",{style:{transform:"rotate(180deg)"}},e))},Kr=function(t){var e=t.onMessageChange,n=t.message,r=t.sendMessage,i=t.id,o=void 0===i?0:i,a=t.disabled;return x("div",{style:{display:"flex"}},x("input",{style:{flex:1},"data-testid":"message".concat(o),onInput:e,value:n,name:"message",type:"text",placeholder:"Enter message text"}),x("div",{style:{display:"flex"}},x("button",{"data-testid":"sendMessage".concat(o),disabled:""===n||a,style:{marginLeft:2,width:"100%"},onClick:r},x("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},x("path",{d:"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"}),x("path",{d:"M0 0h24v24H0z",fill:"none"})))))},Xr=function(t){var e=t.messages,n=t.socket,r=t.id,i=t.messageText,o=t.sendMessage,a=t.handleMessageChange,s=function(t){var e=E(t),n=T(e,2),r=n[0],i=n[1];return S((function(){i(t.sort((function(t,e){return t.datetime-e.datetime})))}),[t]),{sortedMessages:r}}(e).sortedMessages,c=Hr(s).mappedMessages;return[x(Vr,null,x(zr,{messages:c})),x(Kr,{disabled:null===n,id:r,message:i,sendMessage:o,onMessageChange:a})]},Gr=function(t){var e=t.name,n=t.targetName,r=t.socket,i=(t.id,t.height,function(t){var e=t.socket,n=t.targetName,r=E(""),i=T(r,2),o=i[0],a=i[1],s=E(null),c=T(s,2),l=c[0],d=c[1],u=E(null),p=T(u,2),h=p[0],f=p[1],g=E(!1),m=T(g,2),y=m[0],_=m[1],b=E([]),v=T(b,2),w=v[0],C=v[1];return S((function(){null!==e&&(e.on("text_message",(function(t){var e=t.sender,n=t.message,r=t.datetime;d({sender:e,message:n,datetime:r})})),e.on("connect",(function(){_(!0)})),e.on("disconnect",(function(){_(!1)})),e.on("error",(function(t){C([].concat(Or(w),[t]))})))})),{messageRecieved:l,messageSent:h,messageText:o,sendMessage:function(){var t=(new Date).getTime();e.emit("text_message",{reciever:n,message:o,datetime:t}),f({reciever:n,datetime:t,message:o}),a("")},handleMessageChange:function(t){a(t.target.value)},errors:w,connected:y}}({socket:r,targetName:n})),o=i.messageSent,a=i.messageRecieved,s=i.messageText,c=i.sendMessage,l=i.handleMessageChange,d=function(t){var e=t.name,n=t.messageRecieved,r=t.messageSent,i=E([]),o=T(i,2),a=o[0],s=o[1],c=function(t,e){var n=null===JSON.parse(localStorage.getItem(e))?[t]:[].concat(Or(JSON.parse(localStorage.getItem(e))),[t]);return localStorage.setItem(e,JSON.stringify(n)),n};return S((function(){s(null===JSON.parse(localStorage.getItem(e))?[]:Or(JSON.parse(localStorage.getItem(e))))}),[]),S((function(){if(null!==n){var t=n.datetime,r=n.message,i=n.sender;s(c({message:r,from:i,local:!1,datetime:t,to:e},e))}}),[n]),S((function(){if(null!==r){var t=r.datetime,n=r.message,i=r.reciever;s(c({message:n,from:e,local:!0,datetime:t,to:i},e))}}),[r]),{messages:a}}({name:e,messageRecieved:a,messageSent:o}).messages;return x(Xr,{handleMessageChange:l,sendMessage:c,messageText:s,messages:d})},Jr=function(t){var e=t.name,n=t.targetName;return x(Sr,{username:e},(function(t){var r=t.socket,i=t.connected;return console.log(e,i),x(Gr,{name:e,targetName:n,socket:r})}))};g("");var $r=function(){var t=E(0),e=T(t,2),n=e[0],r=e[1];return x("div",{style:{width:"100%",height:"100%"}},x(ot,null,x(ot.Tab,{active:!0,onClick:function(){return r(0)}},x(ot.TabLabel,null,"Client 1")),x(ot.Tab,{onClick:function(){return r(1)}},x(ot.TabLabel,null,"Client 2"))),0===n&&x(Jr,{name:"mario",targetName:"dragos"}),1===n&&x(Jr,{name:"dragos",targetName:"mario"}))},Zr=function(){return x($r,null)},Qr=function(){return x("div",{style:{marginTop:200}},"WebRTC Messaging")},ti=function(){return x("div",{style:{marginTop:200}},"WebRTCVideoChat")};export{Zr as a,Qr as b,ti as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmstYjExZGQ2ZjMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLWluZGljYXRvci9jb25zdGFudHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1pbmRpY2F0b3IvZm91bmRhdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLWluZGljYXRvci9zbGlkaW5nLWZvdW5kYXRpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1pbmRpY2F0b3IvZmFkaW5nLWZvdW5kYXRpb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1pbmRpY2F0b3IvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi9jb25zdGFudHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi9mb3VuZGF0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWIvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1zY3JvbGxlci9jb25zdGFudHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1zY3JvbGxlci9ydGwtc2Nyb2xsZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1zY3JvbGxlci9ydGwtZGVmYXVsdC1zY3JvbGxlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLXNjcm9sbGVyL3J0bC1uZWdhdGl2ZS1zY3JvbGxlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLXNjcm9sbGVyL3J0bC1yZXZlcnNlLXNjcm9sbGVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90YWItc2Nyb2xsZXIvZm91bmRhdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLXNjcm9sbGVyL3V0aWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1zY3JvbGxlci9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLWJhci9jb25zdGFudHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RhYi1iYXIvZm91bmRhdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGFiLWJhci9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcmVhY3QtbWF0ZXJpYWwtY29tcG9uZW50cy9UYWJCYXIvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJlYWN0LW1hdGVyaWFsLWNvbXBvbmVudHMvTGF5b3V0R3JpZC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9jb21tb24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvdXJsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci1lczYvYmFzZTY0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci1lczYvaWVlZTc1NC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXItZXM2L2lzQXJyYXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyLWVzNi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2tleXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYXJyYXlidWZmZXIuc2xpY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWZ0ZXIvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ibG9iL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2Jyb3dzZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWluaGVyaXQvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy14aHIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLWpzb25wLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlL3NyYy9lbXB0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL29uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1iaW5kL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvbWFuYWdlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIi4uL21vZHVsZXMvc29ja2V0LWlvLW1lc3NhZ2luZy9Tb2NrZXRDb21wb25lbnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlLW9iamVjdC1tYXBwZXIvZGF0ZS1saW5lYnJlYWsuanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlLW9iamVjdC1tYXBwZXIvbWVzc2FnZS1hbGlnbmVyLmpzIiwiLi4vLi4vLi4vcnRjanMvc2hhcmVhYmxlLXVpL21lc3NhZ2VzLWRpc3BsYXllci9saWIvbWVzc2FnZS1vYmplY3QtbWFwcGVyL21lc3NhZ2Utdmlldy5qcyIsIi4uLy4uLy4uL3J0Y2pzL3NoYXJlYWJsZS11aS9tZXNzYWdlcy1kaXNwbGF5ZXIvbGliL21lc3NhZ2Utb2JqZWN0LW1hcHBlci9zdWJzZXF1ZW50LW1lc3NhZ2UuanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlLW9iamVjdC1tYXBwZXIvbWVzc2FnZS1hdmF0YXIuanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlLW9iamVjdC1tYXBwZXIvZmlyc3QtbWVzc2FnZS5qcyIsIi4uLy4uLy4uL3J0Y2pzL3NoYXJlYWJsZS11aS9tZXNzYWdlcy1kaXNwbGF5ZXIvbGliL21lc3NhZ2Utb2JqZWN0LW1hcHBlci9tZXNzYWdlLW9iamVjdC1tYXBwZXIuanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi91c2VNZXNzYWdlTWFwcGVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIi4uLy4uLy4uL3J0Y2pzL3NoYXJlYWJsZS11aS9tZXNzYWdlcy1kaXNwbGF5ZXIvbGliL21lc3NhZ2UtY29sbGVjdGlvbi12aWV3LmpzIiwiLi4vLi4vLi4vcnRjanMvc2hhcmVhYmxlLXVpL21lc3NhZ2VzLWRpc3BsYXllci9saWIvbWVzc2FnZXMtdmlldy1zY3JvbGxlci5qcyIsIi4uLy4uLy4uL3J0Y2pzL3NoYXJlYWJsZS11aS9tZXNzYWdlLWVkaXRvci1kaXNwbGF5ZXIvaW5kZXguanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi9tZXNzYWdlcy1kaXNwbGF5ZXIuanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyL2xpYi91c2VNZXNzYWdlU29ydGVyLmpzIiwiLi4vLi4vLi4vcnRjanMvbWVzc2FnaW5nLW1vZHVsZS1zb2NrZXQvaW5kZXguanMiLCIuLi8uLi8uLi9ydGNqcy9tZXNzYWdpbmctbW9kdWxlLXNvY2tldC91c2VTb2NrZXQuanMiLCIuLi8uLi8uLi9ydGNqcy9zaGFyZWFibGUtaG9va3MvdXNlQ2hhdExvZy5qcyIsIi4uL21vZHVsZXMvc29ja2V0LWlvLW1lc3NhZ2luZy9DaGF0VXNlci5qcyIsIi4uL21vZHVsZXMvc29ja2V0LWlvLW1lc3NhZ2luZy9DaGF0Um9vbS5qcyIsIi4uL21vZHVsZXMvc29ja2V0LWlvLW1lc3NhZ2luZy9pbmRleC5qcyIsIi4uL21vZHVsZXMvd2VicnRjLW1lc3NhZ2luZy9pbmRleC5qcyIsIi4uL21vZHVsZXMvd2VicnRjLXZpZGVvLWNoYXQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qKiBAZW51bSB7c3RyaW5nfSAqL1xuY29uc3QgY3NzQ2xhc3NlcyA9IHtcbiAgQUNUSVZFOiAnbWRjLXRhYi1pbmRpY2F0b3ItLWFjdGl2ZScsXG4gIEZBREU6ICdtZGMtdGFiLWluZGljYXRvci0tZmFkZScsXG4gIE5PX1RSQU5TSVRJT046ICdtZGMtdGFiLWluZGljYXRvci0tbm8tdHJhbnNpdGlvbicsXG59O1xuXG4vKiogQGVudW0ge3N0cmluZ30gKi9cbmNvbnN0IHN0cmluZ3MgPSB7XG4gIENPTlRFTlRfU0VMRUNUT1I6ICcubWRjLXRhYi1pbmRpY2F0b3JfX2NvbnRlbnQnLFxufTtcblxuZXhwb3J0IHtcbiAgY3NzQ2xhc3NlcyxcbiAgc3RyaW5ncyxcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IE1EQ0ZvdW5kYXRpb24gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgTURDVGFiSW5kaWNhdG9yQWRhcHRlciBmcm9tICcuL2FkYXB0ZXInO1xuaW1wb3J0IHtcbiAgY3NzQ2xhc3NlcyxcbiAgc3RyaW5ncyxcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIEBleHRlbmRzIHtNRENGb3VuZGF0aW9uPCFNRENUYWJJbmRpY2F0b3JBZGFwdGVyPn1cbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIGV4dGVuZHMgTURDRm91bmRhdGlvbiB7XG4gIC8qKiBAcmV0dXJuIGVudW0ge3N0cmluZ30gKi9cbiAgc3RhdGljIGdldCBjc3NDbGFzc2VzKCkge1xuICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICB9XG5cbiAgLyoqIEByZXR1cm4gZW51bSB7c3RyaW5nfSAqL1xuICBzdGF0aWMgZ2V0IHN0cmluZ3MoKSB7XG4gICAgcmV0dXJuIHN0cmluZ3M7XG4gIH1cblxuICAvKipcbiAgICogQHNlZSBNRENUYWJJbmRpY2F0b3JBZGFwdGVyIGZvciB0eXBpbmcgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7IU1EQ1RhYkluZGljYXRvckFkYXB0ZXJ9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRBZGFwdGVyKCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFNRENUYWJJbmRpY2F0b3JBZGFwdGVyfSAqLyAoe1xuICAgICAgYWRkQ2xhc3M6ICgpID0+IHt9LFxuICAgICAgcmVtb3ZlQ2xhc3M6ICgpID0+IHt9LFxuICAgICAgY29tcHV0ZUNvbnRlbnRDbGllbnRSZWN0OiAoKSA9PiB7fSxcbiAgICAgIHNldENvbnRlbnRTdHlsZVByb3BlcnR5OiAoKSA9PiB7fSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAcGFyYW0geyFNRENUYWJJbmRpY2F0b3JBZGFwdGVyfSBhZGFwdGVyICovXG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIpIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIsIGFkYXB0ZXIpKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJuIHshQ2xpZW50UmVjdH0gKi9cbiAgY29tcHV0ZUNvbnRlbnRDbGllbnRSZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXJfLmNvbXB1dGVDb250ZW50Q2xpZW50UmVjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgaW5kaWNhdG9yXG4gICAqIEBwYXJhbSB7IUNsaWVudFJlY3Q9fSBwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3RcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBhY3RpdmF0ZShwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAvKiogQGFic3RyYWN0ICovXG4gIGRlYWN0aXZhdGUoKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCBNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIGZyb20gJy4vZm91bmRhdGlvbic7XG5cbi8qKlxuICogQGV4dGVuZHMge01EQ1RhYkluZGljYXRvckZvdW5kYXRpb259XG4gKiBAZmluYWxcbiAqL1xuY2xhc3MgTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24gZXh0ZW5kcyBNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIHtcbiAgLyoqIEBwYXJhbSB7IUNsaWVudFJlY3Q9fSBwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QgKi9cbiAgYWN0aXZhdGUocHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0KSB7XG4gICAgLy8gRWFybHkgZXhpdCBpZiBubyBpbmRpY2F0b3IgaXMgcHJlc2VudCB0byBoYW5kbGUgY2FzZXMgd2hlcmUgYW4gaW5kaWNhdG9yXG4gICAgLy8gbWF5IGJlIGFjdGl2YXRlZCB3aXRob3V0IGEgcHJpb3IgaW5kaWNhdG9yIHN0YXRlXG4gICAgaWYgKCFwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QpIHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFDVElWRSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVGhpcyBhbmltYXRpb24gdXNlcyB0aGUgRkxJUCBhcHByb2FjaC4gWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgaXQgYXQgdGhlIGxpbmsgYmVsb3c6XG4gICAgLy8gaHR0cHM6Ly9hZXJvdHdpc3QuY29tL2Jsb2cvZmxpcC15b3VyLWFuaW1hdGlvbnMvXG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRpbWVuc2lvbnMgYmFzZWQgb24gdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHByZXZpb3VzIGluZGljYXRvclxuICAgIGNvbnN0IGN1cnJlbnRDbGllbnRSZWN0ID0gdGhpcy5jb21wdXRlQ29udGVudENsaWVudFJlY3QoKTtcbiAgICBjb25zdCB3aWR0aERlbHRhID0gcHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0LndpZHRoIC8gY3VycmVudENsaWVudFJlY3Qud2lkdGg7XG4gICAgY29uc3QgeFBvc2l0aW9uID0gcHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0LmxlZnQgLSBjdXJyZW50Q2xpZW50UmVjdC5sZWZ0O1xuICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLk5PX1RSQU5TSVRJT04pO1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0Q29udGVudFN0eWxlUHJvcGVydHkoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGVYKCR7eFBvc2l0aW9ufXB4KSBzY2FsZVgoJHt3aWR0aERlbHRhfSlgKTtcblxuICAgIC8vIEZvcmNlIHJlcGFpbnQgYmVmb3JlIHVwZGF0aW5nIGNsYXNzZXMgYW5kIHRyYW5zZm9ybSB0byBlbnN1cmUgdGhlIHRyYW5zZm9ybSBwcm9wZXJseSB0YWtlcyBlZmZlY3RcbiAgICB0aGlzLmNvbXB1dGVDb250ZW50Q2xpZW50UmVjdCgpO1xuXG4gICAgdGhpcy5hZGFwdGVyXy5yZW1vdmVDbGFzcyhNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uLmNzc0NsYXNzZXMuTk9fVFJBTlNJVElPTik7XG4gICAgdGhpcy5hZGFwdGVyXy5hZGRDbGFzcyhNRENUYWJJbmRpY2F0b3JGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQUNUSVZFKTtcbiAgICB0aGlzLmFkYXB0ZXJfLnNldENvbnRlbnRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nLCAnJyk7XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFDVElWRSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb247XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24gZnJvbSAnLi9mb3VuZGF0aW9uJztcblxuLyoqXG4gKiBAZXh0ZW5kcyB7TURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbn1cbiAqIEBmaW5hbFxuICovXG5jbGFzcyBNRENGYWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uIGV4dGVuZHMgTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbiB7XG4gIGFjdGl2YXRlKCkge1xuICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFDVElWRSk7XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFDVElWRSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTURDRmFkaW5nVGFiSW5kaWNhdG9yRm91bmRhdGlvbjtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgTURDQ29tcG9uZW50IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5cbmltcG9ydCBNRENUYWJJbmRpY2F0b3JBZGFwdGVyIGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbiBmcm9tICcuL2ZvdW5kYXRpb24nO1xuXG5pbXBvcnQgTURDU2xpZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24gZnJvbSAnLi9zbGlkaW5nLWZvdW5kYXRpb24nO1xuaW1wb3J0IE1EQ0ZhZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24gZnJvbSAnLi9mYWRpbmctZm91bmRhdGlvbic7XG5cbi8qKlxuICogQGV4dGVuZHMge01EQ0NvbXBvbmVudDwhTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbj59XG4gKiBAZmluYWxcbiAqL1xuY2xhc3MgTURDVGFiSW5kaWNhdG9yIGV4dGVuZHMgTURDQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RcbiAgICogQHJldHVybiB7IU1EQ1RhYkluZGljYXRvcn1cbiAgICovXG4gIHN0YXRpYyBhdHRhY2hUbyhyb290KSB7XG4gICAgcmV0dXJuIG5ldyBNRENUYWJJbmRpY2F0b3Iocm9vdCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHsuLi4/fSBhcmdzXG4gICAqL1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gICAgLyoqIEB0eXBlIHs/RWxlbWVudH0gKi9cbiAgICB0aGlzLmNvbnRlbnRfO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmNvbnRlbnRfID0gdGhpcy5yb290Xy5xdWVyeVNlbGVjdG9yKE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24uc3RyaW5ncy5DT05URU5UX1NFTEVDVE9SKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshQ2xpZW50UmVjdH1cbiAgICovXG4gIGNvbXB1dGVDb250ZW50Q2xpZW50UmVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uXy5jb21wdXRlQ29udGVudENsaWVudFJlY3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbn1cbiAgICovXG4gIGdldERlZmF1bHRGb3VuZGF0aW9uKCkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSAvKiogQHR5cGUgeyFNRENUYWJJbmRpY2F0b3JBZGFwdGVyfSAqLyAoT2JqZWN0LmFzc2lnbih7XG4gICAgICBhZGRDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSksXG4gICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSksXG4gICAgICBjb21wdXRlQ29udGVudENsaWVudFJlY3Q6ICgpID0+IHRoaXMuY29udGVudF8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBzZXRDb250ZW50U3R5bGVQcm9wZXJ0eTogKHByb3AsIHZhbHVlKSA9PiB0aGlzLmNvbnRlbnRfLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIHZhbHVlKSxcbiAgICB9KSk7XG5cbiAgICBpZiAodGhpcy5yb290Xy5jbGFzc0xpc3QuY29udGFpbnMoTURDVGFiSW5kaWNhdG9yRm91bmRhdGlvbi5jc3NDbGFzc2VzLkZBREUpKSB7XG4gICAgICByZXR1cm4gbmV3IE1EQ0ZhZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCB0byB0aGUgc2xpZGluZyBpbmRpY2F0b3JcbiAgICByZXR1cm4gbmV3IE1EQ1NsaWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uKGFkYXB0ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUNsaWVudFJlY3Q9fSBwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3RcbiAgICovXG4gIGFjdGl2YXRlKHByZXZpb3VzSW5kaWNhdG9yQ2xpZW50UmVjdCkge1xuICAgIHRoaXMuZm91bmRhdGlvbl8uYWN0aXZhdGUocHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0KTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5kZWFjdGl2YXRlKCk7XG4gIH1cbn1cblxuZXhwb3J0IHtNRENUYWJJbmRpY2F0b3IsIE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24sIE1EQ1NsaWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9uLCBNRENGYWRpbmdUYWJJbmRpY2F0b3JGb3VuZGF0aW9ufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKiogQGVudW0ge3N0cmluZ30gKi9cbmNvbnN0IGNzc0NsYXNzZXMgPSB7XG4gIEFDVElWRTogJ21kYy10YWItLWFjdGl2ZScsXG59O1xuXG4vKiogQGVudW0ge3N0cmluZ30gKi9cbmNvbnN0IHN0cmluZ3MgPSB7XG4gIEFSSUFfU0VMRUNURUQ6ICdhcmlhLXNlbGVjdGVkJyxcbiAgUklQUExFX1NFTEVDVE9SOiAnLm1kYy10YWJfX3JpcHBsZScsXG4gIENPTlRFTlRfU0VMRUNUT1I6ICcubWRjLXRhYl9fY29udGVudCcsXG4gIFRBQl9JTkRJQ0FUT1JfU0VMRUNUT1I6ICcubWRjLXRhYi1pbmRpY2F0b3InLFxuICBUQUJJTkRFWDogJ3RhYkluZGV4JyxcbiAgSU5URVJBQ1RFRF9FVkVOVDogJ01EQ1RhYjppbnRlcmFjdGVkJyxcbn07XG5cbmV4cG9ydCB7XG4gIGNzc0NsYXNzZXMsXG4gIHN0cmluZ3MsXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCBNRENGb3VuZGF0aW9uIGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHtNRENUYWJBZGFwdGVyLCBNRENUYWJEaW1lbnNpb25zfSBmcm9tICcuL2FkYXB0ZXInO1xuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5pbXBvcnQge1xuICBjc3NDbGFzc2VzLFxuICBzdHJpbmdzLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8qKlxuICogQGV4dGVuZHMge01EQ0ZvdW5kYXRpb248IU1EQ1RhYkFkYXB0ZXI+fVxuICogQGZpbmFsXG4gKi9cbmNsYXNzIE1EQ1RhYkZvdW5kYXRpb24gZXh0ZW5kcyBNRENGb3VuZGF0aW9uIHtcbiAgLyoqIEByZXR1cm4gZW51bSB7c3RyaW5nfSAqL1xuICBzdGF0aWMgZ2V0IGNzc0NsYXNzZXMoKSB7XG4gICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gIH1cblxuICAvKiogQHJldHVybiBlbnVtIHtzdHJpbmd9ICovXG4gIHN0YXRpYyBnZXQgc3RyaW5ncygpIHtcbiAgICByZXR1cm4gc3RyaW5ncztcbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIE1EQ1RhYkFkYXB0ZXIgZm9yIHR5cGluZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHshTURDVGFiQWRhcHRlcn1cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdEFkYXB0ZXIoKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IU1EQ1RhYkFkYXB0ZXJ9ICovICh7XG4gICAgICBhZGRDbGFzczogKCkgPT4ge30sXG4gICAgICByZW1vdmVDbGFzczogKCkgPT4ge30sXG4gICAgICBoYXNDbGFzczogKCkgPT4ge30sXG4gICAgICBzZXRBdHRyOiAoKSA9PiB7fSxcbiAgICAgIGFjdGl2YXRlSW5kaWNhdG9yOiAoKSA9PiB7fSxcbiAgICAgIGRlYWN0aXZhdGVJbmRpY2F0b3I6ICgpID0+IHt9LFxuICAgICAgbm90aWZ5SW50ZXJhY3RlZDogKCkgPT4ge30sXG4gICAgICBnZXRPZmZzZXRMZWZ0OiAoKSA9PiB7fSxcbiAgICAgIGdldE9mZnNldFdpZHRoOiAoKSA9PiB7fSxcbiAgICAgIGdldENvbnRlbnRPZmZzZXRMZWZ0OiAoKSA9PiB7fSxcbiAgICAgIGdldENvbnRlbnRPZmZzZXRXaWR0aDogKCkgPT4ge30sXG4gICAgICBmb2N1czogKCkgPT4ge30sXG4gICAgfSk7XG4gIH1cblxuICAvKiogQHBhcmFtIHshTURDVGFiQWRhcHRlcn0gYWRhcHRlciAqL1xuICBjb25zdHJ1Y3RvcihhZGFwdGVyKSB7XG4gICAgc3VwZXIoT2JqZWN0LmFzc2lnbihNRENUYWJGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyLCBhZGFwdGVyKSk7XG5cbiAgICAvKiogQHByaXZhdGUge2Z1bmN0aW9uKD9FdmVudCk6IHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmhhbmRsZUNsaWNrXyA9ICgpID0+IHRoaXMuaGFuZGxlQ2xpY2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBcImNsaWNrXCIgZXZlbnRcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIC8vIEl0J3MgdXAgdG8gdGhlIHBhcmVudCBjb21wb25lbnQgdG8ga2VlcCB0cmFjayBvZiB0aGUgYWN0aXZlIFRhYiBhbmRcbiAgICAvLyBlbnN1cmUgd2UgZG9uJ3QgYWN0aXZhdGUgYSBUYWIgdGhhdCdzIGFscmVhZHkgYWN0aXZlLlxuICAgIHRoaXMuYWRhcHRlcl8ubm90aWZ5SW50ZXJhY3RlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIFRhYidzIGFjdGl2ZSBzdGF0ZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcl8uaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5BQ1RJVkUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgVGFiXG4gICAqIEBwYXJhbSB7IUNsaWVudFJlY3Q9fSBwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3RcbiAgICovXG4gIGFjdGl2YXRlKHByZXZpb3VzSW5kaWNhdG9yQ2xpZW50UmVjdCkge1xuICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5BQ1RJVkUpO1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0QXR0cihzdHJpbmdzLkFSSUFfU0VMRUNURUQsICd0cnVlJyk7XG4gICAgdGhpcy5hZGFwdGVyXy5zZXRBdHRyKHN0cmluZ3MuVEFCSU5ERVgsICcwJyk7XG4gICAgdGhpcy5hZGFwdGVyXy5hY3RpdmF0ZUluZGljYXRvcihwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QpO1xuICAgIHRoaXMuYWRhcHRlcl8uZm9jdXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWFjdGl2YXRlcyB0aGUgVGFiXG4gICAqL1xuICBkZWFjdGl2YXRlKCkge1xuICAgIC8vIEVhcmx5IGV4aXRcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5BQ1RJVkUpO1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0QXR0cihzdHJpbmdzLkFSSUFfU0VMRUNURUQsICdmYWxzZScpO1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0QXR0cihzdHJpbmdzLlRBQklOREVYLCAnLTEnKTtcbiAgICB0aGlzLmFkYXB0ZXJfLmRlYWN0aXZhdGVJbmRpY2F0b3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaW1lbnNpb25zIG9mIHRoZSBUYWJcbiAgICogQHJldHVybiB7IU1EQ1RhYkRpbWVuc2lvbnN9XG4gICAqL1xuICBjb21wdXRlRGltZW5zaW9ucygpIHtcbiAgICBjb25zdCByb290V2lkdGggPSB0aGlzLmFkYXB0ZXJfLmdldE9mZnNldFdpZHRoKCk7XG4gICAgY29uc3Qgcm9vdExlZnQgPSB0aGlzLmFkYXB0ZXJfLmdldE9mZnNldExlZnQoKTtcbiAgICBjb25zdCBjb250ZW50V2lkdGggPSB0aGlzLmFkYXB0ZXJfLmdldENvbnRlbnRPZmZzZXRXaWR0aCgpO1xuICAgIGNvbnN0IGNvbnRlbnRMZWZ0ID0gdGhpcy5hZGFwdGVyXy5nZXRDb250ZW50T2Zmc2V0TGVmdCgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJvb3RMZWZ0LFxuICAgICAgcm9vdFJpZ2h0OiByb290TGVmdCArIHJvb3RXaWR0aCxcbiAgICAgIGNvbnRlbnRMZWZ0OiByb290TGVmdCArIGNvbnRlbnRMZWZ0LFxuICAgICAgY29udGVudFJpZ2h0OiByb290TGVmdCArIGNvbnRlbnRMZWZ0ICsgY29udGVudFdpZHRoLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTURDVGFiRm91bmRhdGlvbjtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgTURDQ29tcG9uZW50IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5pbXBvcnQge01EQ1JpcHBsZSwgTURDUmlwcGxlRm91bmRhdGlvbiwgUmlwcGxlQ2FwYWJsZVN1cmZhY2V9IGZyb20gJ0BtYXRlcmlhbC9yaXBwbGUvaW5kZXgnO1xuaW1wb3J0IHtNRENUYWJJbmRpY2F0b3IsIE1EQ1RhYkluZGljYXRvckZvdW5kYXRpb259IGZyb20gJ0BtYXRlcmlhbC90YWItaW5kaWNhdG9yL2luZGV4JztcbmltcG9ydCB7TURDVGFiQWRhcHRlciwgTURDVGFiRGltZW5zaW9uc30gZnJvbSAnLi9hZGFwdGVyJztcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuaW1wb3J0IE1EQ1RhYkZvdW5kYXRpb24gZnJvbSAnLi9mb3VuZGF0aW9uJztcblxuLyoqXG4gKiBAZXh0ZW5kcyB7TURDQ29tcG9uZW50PCFNRENUYWJGb3VuZGF0aW9uPn1cbiAqIEBmaW5hbFxuICovXG5jbGFzcyBNRENUYWIgZXh0ZW5kcyBNRENDb21wb25lbnQge1xuICAvKipcbiAgICogQHBhcmFtIHsuLi4/fSBhcmdzXG4gICAqL1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gICAgLyoqIEBwcml2YXRlIHs/TURDUmlwcGxlfSAqL1xuICAgIHRoaXMucmlwcGxlXztcbiAgICAvKiogQHByaXZhdGUgez9NRENUYWJJbmRpY2F0b3J9ICovXG4gICAgdGhpcy50YWJJbmRpY2F0b3JfO1xuICAgIC8qKiBAcHJpdmF0ZSB7P0VsZW1lbnR9ICovXG4gICAgdGhpcy5jb250ZW50XztcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0Z1bmN0aW9ufSAqL1xuICAgIHRoaXMuaGFuZGxlQ2xpY2tfO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RcbiAgICogQHJldHVybiB7IU1EQ1RhYn1cbiAgICovXG4gIHN0YXRpYyBhdHRhY2hUbyhyb290KSB7XG4gICAgcmV0dXJuIG5ldyBNRENUYWIocm9vdCk7XG4gIH1cblxuICBpbml0aWFsaXplKFxuICAgIHJpcHBsZUZhY3RvcnkgPSAoZWwsIGZvdW5kYXRpb24pID0+IG5ldyBNRENSaXBwbGUoZWwsIGZvdW5kYXRpb24pLFxuICAgIHRhYkluZGljYXRvckZhY3RvcnkgPSAoZWwpID0+IG5ldyBNRENUYWJJbmRpY2F0b3IoZWwpKSB7XG4gICAgY29uc3QgcmlwcGxlU3VyZmFjZSA9IHRoaXMucm9vdF8ucXVlcnlTZWxlY3RvcihNRENUYWJGb3VuZGF0aW9uLnN0cmluZ3MuUklQUExFX1NFTEVDVE9SKTtcbiAgICBjb25zdCByaXBwbGVBZGFwdGVyID0gT2JqZWN0LmFzc2lnbihNRENSaXBwbGUuY3JlYXRlQWRhcHRlcigvKiogQHR5cGUgeyFSaXBwbGVDYXBhYmxlU3VyZmFjZX0gKi8gKHRoaXMpKSwge1xuICAgICAgYWRkQ2xhc3M6IChjbGFzc05hbWUpID0+IHJpcHBsZVN1cmZhY2UuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpLFxuICAgICAgcmVtb3ZlQ2xhc3M6IChjbGFzc05hbWUpID0+IHJpcHBsZVN1cmZhY2UuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpLFxuICAgICAgdXBkYXRlQ3NzVmFyaWFibGU6ICh2YXJOYW1lLCB2YWx1ZSkgPT4gcmlwcGxlU3VyZmFjZS5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJOYW1lLCB2YWx1ZSksXG4gICAgfSk7XG4gICAgY29uc3QgcmlwcGxlRm91bmRhdGlvbiA9IG5ldyBNRENSaXBwbGVGb3VuZGF0aW9uKHJpcHBsZUFkYXB0ZXIpO1xuICAgIHRoaXMucmlwcGxlXyA9IHJpcHBsZUZhY3RvcnkodGhpcy5yb290XywgcmlwcGxlRm91bmRhdGlvbik7XG5cbiAgICBjb25zdCB0YWJJbmRpY2F0b3JFbGVtZW50ID0gdGhpcy5yb290Xy5xdWVyeVNlbGVjdG9yKE1EQ1RhYkZvdW5kYXRpb24uc3RyaW5ncy5UQUJfSU5ESUNBVE9SX1NFTEVDVE9SKTtcbiAgICB0aGlzLnRhYkluZGljYXRvcl8gPSB0YWJJbmRpY2F0b3JGYWN0b3J5KHRhYkluZGljYXRvckVsZW1lbnQpO1xuXG4gICAgdGhpcy5jb250ZW50XyA9IHRoaXMucm9vdF8ucXVlcnlTZWxlY3RvcihNRENUYWJGb3VuZGF0aW9uLnN0cmluZ3MuQ09OVEVOVF9TRUxFQ1RPUik7XG4gIH1cblxuICBpbml0aWFsU3luY1dpdGhET00oKSB7XG4gICAgdGhpcy5oYW5kbGVDbGlja18gPSB0aGlzLmZvdW5kYXRpb25fLmhhbmRsZUNsaWNrLmJpbmQodGhpcy5mb3VuZGF0aW9uXyk7XG4gICAgdGhpcy5saXN0ZW4oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja18pO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCdjbGljaycsIC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyAodGhpcy5oYW5kbGVDbGlja18pKTtcbiAgICB0aGlzLnJpcHBsZV8uZGVzdHJveSgpO1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshTURDVGFiRm91bmRhdGlvbn1cbiAgICovXG4gIGdldERlZmF1bHRGb3VuZGF0aW9uKCkge1xuICAgIHJldHVybiBuZXcgTURDVGFiRm91bmRhdGlvbihcbiAgICAgIC8qKiBAdHlwZSB7IU1EQ1RhYkFkYXB0ZXJ9ICovICh7XG4gICAgICAgIHNldEF0dHI6IChhdHRyLCB2YWx1ZSkgPT4gdGhpcy5yb290Xy5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpLFxuICAgICAgICBhZGRDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSksXG4gICAgICAgIHJlbW92ZUNsYXNzOiAoY2xhc3NOYW1lKSA9PiB0aGlzLnJvb3RfLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKSxcbiAgICAgICAgaGFzQ2xhc3M6IChjbGFzc05hbWUpID0+IHRoaXMucm9vdF8uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSksXG4gICAgICAgIGFjdGl2YXRlSW5kaWNhdG9yOiAocHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0KSA9PiB0aGlzLnRhYkluZGljYXRvcl8uYWN0aXZhdGUocHJldmlvdXNJbmRpY2F0b3JDbGllbnRSZWN0KSxcbiAgICAgICAgZGVhY3RpdmF0ZUluZGljYXRvcjogKCkgPT4gdGhpcy50YWJJbmRpY2F0b3JfLmRlYWN0aXZhdGUoKSxcbiAgICAgICAgbm90aWZ5SW50ZXJhY3RlZDogKCkgPT4gdGhpcy5lbWl0KE1EQ1RhYkZvdW5kYXRpb24uc3RyaW5ncy5JTlRFUkFDVEVEX0VWRU5ULCB7dGFiOiB0aGlzfSwgdHJ1ZSAvKiBidWJibGUgKi8pLFxuICAgICAgICBnZXRPZmZzZXRMZWZ0OiAoKSA9PiB0aGlzLnJvb3RfLm9mZnNldExlZnQsXG4gICAgICAgIGdldE9mZnNldFdpZHRoOiAoKSA9PiB0aGlzLnJvb3RfLm9mZnNldFdpZHRoLFxuICAgICAgICBnZXRDb250ZW50T2Zmc2V0TGVmdDogKCkgPT4gdGhpcy5jb250ZW50Xy5vZmZzZXRMZWZ0LFxuICAgICAgICBnZXRDb250ZW50T2Zmc2V0V2lkdGg6ICgpID0+IHRoaXMuY29udGVudF8ub2Zmc2V0V2lkdGgsXG4gICAgICAgIGZvY3VzOiAoKSA9PiB0aGlzLnJvb3RfLmZvY3VzKCksXG4gICAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciB0aGUgYWN0aXZlIHN0YXRlIG9mIHRoZSB0YWJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbl8uaXNBY3RpdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgdGhlIHRhYlxuICAgKiBAcGFyYW0geyFDbGllbnRSZWN0PX0gY29tcHV0ZUluZGljYXRvckNsaWVudFJlY3RcbiAgICovXG4gIGFjdGl2YXRlKGNvbXB1dGVJbmRpY2F0b3JDbGllbnRSZWN0KSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5hY3RpdmF0ZShjb21wdXRlSW5kaWNhdG9yQ2xpZW50UmVjdCk7XG4gIH1cblxuICAvKipcbiAgICogRGVhY3RpdmF0ZXMgdGhlIHRhYlxuICAgKi9cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLmRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbmRpY2F0b3IncyBjbGllbnQgcmVjdFxuICAgKiBAcmV0dXJuIHshQ2xpZW50UmVjdH1cbiAgICovXG4gIGNvbXB1dGVJbmRpY2F0b3JDbGllbnRSZWN0KCkge1xuICAgIHJldHVybiB0aGlzLnRhYkluZGljYXRvcl8uY29tcHV0ZUNvbnRlbnRDbGllbnRSZWN0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU1EQ1RhYkRpbWVuc2lvbnN9XG4gICAqL1xuICBjb21wdXRlRGltZW5zaW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uXy5jb21wdXRlRGltZW5zaW9ucygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvY3VzZXMgdGhlIHRhYlxuICAgKi9cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5yb290Xy5mb2N1cygpO1xuICB9XG59XG5cbmV4cG9ydCB7TURDVGFiLCBNRENUYWJGb3VuZGF0aW9ufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKiogQGVudW0ge3N0cmluZ30gKi9cbmNvbnN0IGNzc0NsYXNzZXMgPSB7XG4gIEFOSU1BVElORzogJ21kYy10YWItc2Nyb2xsZXItLWFuaW1hdGluZycsXG4gIFNDUk9MTF9URVNUOiAnbWRjLXRhYi1zY3JvbGxlcl9fdGVzdCcsXG4gIFNDUk9MTF9BUkVBX1NDUk9MTDogJ21kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhLS1zY3JvbGwnLFxufTtcblxuLyoqIEBlbnVtIHtzdHJpbmd9ICovXG5jb25zdCBzdHJpbmdzID0ge1xuICBBUkVBX1NFTEVDVE9SOiAnLm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhJyxcbiAgQ09OVEVOVF9TRUxFQ1RPUjogJy5tZGMtdGFiLXNjcm9sbGVyX19zY3JvbGwtY29udGVudCcsXG59O1xuXG5leHBvcnQge1xuICBjc3NDbGFzc2VzLFxuICBzdHJpbmdzLFxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFsyLCB7XCJhcmdzXCI6IFwibm9uZVwifV0gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB7TURDVGFiU2Nyb2xsZXJBZGFwdGVyLCBNRENUYWJTY3JvbGxlckFuaW1hdGlvbn0gZnJvbSAnLi9hZGFwdGVyJztcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgTURDVGFiU2Nyb2xsZXJSVEwge1xuICAvKiogQHBhcmFtIHshTURDVGFiU2Nyb2xsZXJBZGFwdGVyfSBhZGFwdGVyICovXG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIpIHtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLmFkYXB0ZXJfID0gYWRhcHRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHJhbnNsYXRlWCBUaGUgY3VycmVudCB0cmFuc2xhdGVYIHBvc2l0aW9uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBnZXRTY3JvbGxQb3NpdGlvblJUTCh0cmFuc2xhdGVYKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWFxuICAgKiBAcmV0dXJuIHshTURDVGFiU2Nyb2xsZXJBbmltYXRpb259XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgc2Nyb2xsVG9SVEwoc2Nyb2xsWCkge31cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFhcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVyQW5pbWF0aW9ufVxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGluY3JlbWVudFNjcm9sbFJUTChzY3JvbGxYKSB7fVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWCBUaGUgY3VycmVudCBzY3JvbGxYIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cmFuc2xhdGVYIFRoZSBjdXJyZW50IHRyYW5zbGF0ZVggcG9zaXRpb25cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uKHNjcm9sbFgsIHRyYW5zbGF0ZVgpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RhYlNjcm9sbGVyUlRMO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCBNRENUYWJTY3JvbGxlclJUTCBmcm9tICcuL3J0bC1zY3JvbGxlcic7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5pbXBvcnQge01EQ1RhYlNjcm9sbGVyQW5pbWF0aW9uLCBNRENUYWJTY3JvbGxlckhvcml6b250YWxFZGdlc30gZnJvbSAnLi9hZGFwdGVyJztcbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBAZXh0ZW5kcyB7TURDVGFiU2Nyb2xsZXJSVEx9XG4gKiBAZmluYWxcbiAqL1xuY2xhc3MgTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0IGV4dGVuZHMgTURDVGFiU2Nyb2xsZXJSVEwge1xuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0U2Nyb2xsUG9zaXRpb25SVEwoKSB7XG4gICAgY29uc3QgY3VycmVudFNjcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXJfLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgY29uc3Qge3JpZ2h0fSA9IHRoaXMuY2FsY3VsYXRlU2Nyb2xsRWRnZXNfKCk7XG4gICAgLy8gU2Nyb2xsIHZhbHVlcyBvbiBtb3N0IGJyb3dzZXJzIGFyZSBpbnRzIGluc3RlYWQgb2YgZmxvYXRzIHNvIHdlIHJvdW5kXG4gICAgcmV0dXJuIE1hdGgucm91bmQocmlnaHQgLSBjdXJyZW50U2Nyb2xsTGVmdCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFhcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVyQW5pbWF0aW9ufVxuICAgKi9cbiAgc2Nyb2xsVG9SVEwoc2Nyb2xsWCkge1xuICAgIGNvbnN0IGVkZ2VzID0gdGhpcy5jYWxjdWxhdGVTY3JvbGxFZGdlc18oKTtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICBjb25zdCBjbGFtcGVkU2Nyb2xsTGVmdCA9IHRoaXMuY2xhbXBTY3JvbGxWYWx1ZV8oZWRnZXMucmlnaHQgLSBzY3JvbGxYKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJBbmltYXRpb259ICovICh7XG4gICAgICBmaW5hbFNjcm9sbFBvc2l0aW9uOiBjbGFtcGVkU2Nyb2xsTGVmdCxcbiAgICAgIHNjcm9sbERlbHRhOiBjbGFtcGVkU2Nyb2xsTGVmdCAtIGN1cnJlbnRTY3JvbGxMZWZ0LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYXG4gICAqIEByZXR1cm4geyFNRENUYWJTY3JvbGxlckFuaW1hdGlvbn1cbiAgICovXG4gIGluY3JlbWVudFNjcm9sbFJUTChzY3JvbGxYKSB7XG4gICAgY29uc3QgY3VycmVudFNjcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXJfLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgY29uc3QgY2xhbXBlZFNjcm9sbExlZnQgPSB0aGlzLmNsYW1wU2Nyb2xsVmFsdWVfKGN1cnJlbnRTY3JvbGxMZWZ0IC0gc2Nyb2xsWCk7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IU1EQ1RhYlNjcm9sbGVyQW5pbWF0aW9ufSAqLyAoe1xuICAgICAgZmluYWxTY3JvbGxQb3NpdGlvbjogY2xhbXBlZFNjcm9sbExlZnQsXG4gICAgICBzY3JvbGxEZWx0YTogY2xhbXBlZFNjcm9sbExlZnQgLSBjdXJyZW50U2Nyb2xsTGVmdCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRBbmltYXRpbmdTY3JvbGxQb3NpdGlvbihzY3JvbGxYKSB7XG4gICAgcmV0dXJuIHNjcm9sbFg7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVySG9yaXpvbnRhbEVkZ2VzfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsY3VsYXRlU2Nyb2xsRWRnZXNfKCkge1xuICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQ29udGVudE9mZnNldFdpZHRoKCk7XG4gICAgY29uc3Qgcm9vdFdpZHRoID0gdGhpcy5hZGFwdGVyXy5nZXRTY3JvbGxBcmVhT2Zmc2V0V2lkdGgoKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJIb3Jpem9udGFsRWRnZXN9ICovICh7XG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IGNvbnRlbnRXaWR0aCAtIHJvb3RXaWR0aCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjbGFtcFNjcm9sbFZhbHVlXyhzY3JvbGxYKSB7XG4gICAgY29uc3QgZWRnZXMgPSB0aGlzLmNhbGN1bGF0ZVNjcm9sbEVkZ2VzXygpO1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChlZGdlcy5sZWZ0LCBzY3JvbGxYKSwgZWRnZXMucmlnaHQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RhYlNjcm9sbGVyUlRMRGVmYXVsdDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgTURDVGFiU2Nyb2xsZXJSVEwgZnJvbSAnLi9ydGwtc2Nyb2xsZXInO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHtNRENUYWJTY3JvbGxlckFuaW1hdGlvbiwgTURDVGFiU2Nyb2xsZXJIb3Jpem9udGFsRWRnZXN9IGZyb20gJy4vYWRhcHRlcic7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogQGV4dGVuZHMge01EQ1RhYlNjcm9sbGVyUlRMfVxuICogQGZpbmFsXG4gKi9cbmNsYXNzIE1EQ1RhYlNjcm9sbGVyUlRMTmVnYXRpdmUgZXh0ZW5kcyBNRENUYWJTY3JvbGxlclJUTCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHJhbnNsYXRlWCBUaGUgY3VycmVudCB0cmFuc2xhdGVYIHBvc2l0aW9uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFNjcm9sbFBvc2l0aW9uUlRMKHRyYW5zbGF0ZVgpIHtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0cmFuc2xhdGVYIC0gY3VycmVudFNjcm9sbExlZnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYXG4gICAqIEByZXR1cm4geyFNRENUYWJTY3JvbGxlckFuaW1hdGlvbn1cbiAgICovXG4gIHNjcm9sbFRvUlRMKHNjcm9sbFgpIHtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICBjb25zdCBjbGFtcGVkU2Nyb2xsTGVmdCA9IHRoaXMuY2xhbXBTY3JvbGxWYWx1ZV8oLXNjcm9sbFgpO1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFNRENUYWJTY3JvbGxlckFuaW1hdGlvbn0gKi8gKHtcbiAgICAgIGZpbmFsU2Nyb2xsUG9zaXRpb246IGNsYW1wZWRTY3JvbGxMZWZ0LFxuICAgICAgc2Nyb2xsRGVsdGE6IGNsYW1wZWRTY3JvbGxMZWZ0IC0gY3VycmVudFNjcm9sbExlZnQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFhcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVyQW5pbWF0aW9ufVxuICAgKi9cbiAgaW5jcmVtZW50U2Nyb2xsUlRMKHNjcm9sbFgpIHtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICBjb25zdCBjbGFtcGVkU2Nyb2xsTGVmdCA9IHRoaXMuY2xhbXBTY3JvbGxWYWx1ZV8oY3VycmVudFNjcm9sbExlZnQgLSBzY3JvbGxYKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJBbmltYXRpb259ICovICh7XG4gICAgICBmaW5hbFNjcm9sbFBvc2l0aW9uOiBjbGFtcGVkU2Nyb2xsTGVmdCxcbiAgICAgIHNjcm9sbERlbHRhOiBjbGFtcGVkU2Nyb2xsTGVmdCAtIGN1cnJlbnRTY3JvbGxMZWZ0LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cmFuc2xhdGVYXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uKHNjcm9sbFgsIHRyYW5zbGF0ZVgpIHtcbiAgICByZXR1cm4gc2Nyb2xsWCAtIHRyYW5zbGF0ZVg7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVySG9yaXpvbnRhbEVkZ2VzfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsY3VsYXRlU2Nyb2xsRWRnZXNfKCkge1xuICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQ29udGVudE9mZnNldFdpZHRoKCk7XG4gICAgY29uc3Qgcm9vdFdpZHRoID0gdGhpcy5hZGFwdGVyXy5nZXRTY3JvbGxBcmVhT2Zmc2V0V2lkdGgoKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJIb3Jpem9udGFsRWRnZXN9ICovICh7XG4gICAgICBsZWZ0OiByb290V2lkdGggLSBjb250ZW50V2lkdGgsXG4gICAgICByaWdodDogMCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjbGFtcFNjcm9sbFZhbHVlXyhzY3JvbGxYKSB7XG4gICAgY29uc3QgZWRnZXMgPSB0aGlzLmNhbGN1bGF0ZVNjcm9sbEVkZ2VzXygpO1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihlZGdlcy5yaWdodCwgc2Nyb2xsWCksIGVkZ2VzLmxlZnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RhYlNjcm9sbGVyUlRMTmVnYXRpdmU7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IE1EQ1RhYlNjcm9sbGVyUlRMIGZyb20gJy4vcnRsLXNjcm9sbGVyJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB7TURDVGFiU2Nyb2xsZXJBbmltYXRpb24sIE1EQ1RhYlNjcm9sbGVySG9yaXpvbnRhbEVkZ2VzfSBmcm9tICcuL2FkYXB0ZXInO1xuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIEBleHRlbmRzIHtNRENUYWJTY3JvbGxlclJUTH1cbiAqIEBmaW5hbFxuICovXG5jbGFzcyBNRENUYWJTY3JvbGxlclJUTFJldmVyc2UgZXh0ZW5kcyBNRENUYWJTY3JvbGxlclJUTCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHJhbnNsYXRlWFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRTY3JvbGxQb3NpdGlvblJUTCh0cmFuc2xhdGVYKSB7XG4gICAgY29uc3QgY3VycmVudFNjcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXJfLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgLy8gU2Nyb2xsIHZhbHVlcyBvbiBtb3N0IGJyb3dzZXJzIGFyZSBpbnRzIGluc3RlYWQgb2YgZmxvYXRzIHNvIHdlIHJvdW5kXG4gICAgcmV0dXJuIE1hdGgucm91bmQoY3VycmVudFNjcm9sbExlZnQgLSB0cmFuc2xhdGVYKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWFxuICAgKiBAcmV0dXJuIHshTURDVGFiU2Nyb2xsZXJBbmltYXRpb259XG4gICAqL1xuICBzY3JvbGxUb1JUTChzY3JvbGxYKSB7XG4gICAgY29uc3QgY3VycmVudFNjcm9sbExlZnQgPSB0aGlzLmFkYXB0ZXJfLmdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KCk7XG4gICAgY29uc3QgY2xhbXBlZFNjcm9sbExlZnQgPSB0aGlzLmNsYW1wU2Nyb2xsVmFsdWVfKHNjcm9sbFgpO1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFNRENUYWJTY3JvbGxlckFuaW1hdGlvbn0gKi8gKHtcbiAgICAgIGZpbmFsU2Nyb2xsUG9zaXRpb246IGNsYW1wZWRTY3JvbGxMZWZ0LFxuICAgICAgc2Nyb2xsRGVsdGE6IGN1cnJlbnRTY3JvbGxMZWZ0IC0gY2xhbXBlZFNjcm9sbExlZnQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFhcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVyQW5pbWF0aW9ufVxuICAgKi9cbiAgaW5jcmVtZW50U2Nyb2xsUlRMKHNjcm9sbFgpIHtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICBjb25zdCBjbGFtcGVkU2Nyb2xsTGVmdCA9IHRoaXMuY2xhbXBTY3JvbGxWYWx1ZV8oY3VycmVudFNjcm9sbExlZnQgKyBzY3JvbGxYKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJBbmltYXRpb259ICovICh7XG4gICAgICBmaW5hbFNjcm9sbFBvc2l0aW9uOiBjbGFtcGVkU2Nyb2xsTGVmdCxcbiAgICAgIHNjcm9sbERlbHRhOiBjdXJyZW50U2Nyb2xsTGVmdCAtIGNsYW1wZWRTY3JvbGxMZWZ0LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uKHNjcm9sbFgsIHRyYW5zbGF0ZVgpIHtcbiAgICByZXR1cm4gc2Nyb2xsWCArIHRyYW5zbGF0ZVg7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVySG9yaXpvbnRhbEVkZ2VzfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsY3VsYXRlU2Nyb2xsRWRnZXNfKCkge1xuICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQ29udGVudE9mZnNldFdpZHRoKCk7XG4gICAgY29uc3Qgcm9vdFdpZHRoID0gdGhpcy5hZGFwdGVyXy5nZXRTY3JvbGxBcmVhT2Zmc2V0V2lkdGgoKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJIb3Jpem9udGFsRWRnZXN9ICovICh7XG4gICAgICBsZWZ0OiBjb250ZW50V2lkdGggLSByb290V2lkdGgsXG4gICAgICByaWdodDogMCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjbGFtcFNjcm9sbFZhbHVlXyhzY3JvbGxYKSB7XG4gICAgY29uc3QgZWRnZXMgPSB0aGlzLmNhbGN1bGF0ZVNjcm9sbEVkZ2VzXygpO1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChlZGdlcy5yaWdodCwgc2Nyb2xsWCksIGVkZ2VzLmxlZnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RhYlNjcm9sbGVyUlRMUmV2ZXJzZTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgTURDRm91bmRhdGlvbiBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7Y3NzQ2xhc3Nlcywgc3RyaW5nc30gZnJvbSAnLi9jb25zdGFudHMnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB7TURDVGFiU2Nyb2xsZXJBbmltYXRpb24sIE1EQ1RhYlNjcm9sbGVySG9yaXpvbnRhbEVkZ2VzLCBNRENUYWJTY3JvbGxlckFkYXB0ZXJ9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgTURDVGFiU2Nyb2xsZXJSVEwgZnJvbSAnLi9ydGwtc2Nyb2xsZXInO1xuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IE1EQ1RhYlNjcm9sbGVyUlRMRGVmYXVsdCBmcm9tICcuL3J0bC1kZWZhdWx0LXNjcm9sbGVyJztcbmltcG9ydCBNRENUYWJTY3JvbGxlclJUTE5lZ2F0aXZlIGZyb20gJy4vcnRsLW5lZ2F0aXZlLXNjcm9sbGVyJztcbmltcG9ydCBNRENUYWJTY3JvbGxlclJUTFJldmVyc2UgZnJvbSAnLi9ydGwtcmV2ZXJzZS1zY3JvbGxlcic7XG5cbi8qKlxuICogQGV4dGVuZHMge01EQ0ZvdW5kYXRpb248IU1EQ1RhYlNjcm9sbGVyQWRhcHRlcj59XG4gKiBAZmluYWxcbiAqL1xuY2xhc3MgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uIGV4dGVuZHMgTURDRm91bmRhdGlvbiB7XG4gIC8qKiBAcmV0dXJuIGVudW0ge3N0cmluZ30gKi9cbiAgc3RhdGljIGdldCBjc3NDbGFzc2VzKCkge1xuICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICB9XG5cbiAgLyoqIEByZXR1cm4gZW51bSB7c3RyaW5nfSAqL1xuICBzdGF0aWMgZ2V0IHN0cmluZ3MoKSB7XG4gICAgcmV0dXJuIHN0cmluZ3M7XG4gIH1cblxuICAvKipcbiAgICogQHNlZSBNRENUYWJTY3JvbGxlckFkYXB0ZXIgZm9yIHR5cGluZyBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHshTURDVGFiU2Nyb2xsZXJBZGFwdGVyfVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0QWRhcHRlcigpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJBZGFwdGVyfSAqLyAoe1xuICAgICAgZXZlbnRUYXJnZXRNYXRjaGVzU2VsZWN0b3I6ICgpID0+IHt9LFxuICAgICAgYWRkQ2xhc3M6ICgpID0+IHt9LFxuICAgICAgcmVtb3ZlQ2xhc3M6ICgpID0+IHt9LFxuICAgICAgYWRkU2Nyb2xsQXJlYUNsYXNzOiAoKSA9PiB7fSxcbiAgICAgIHNldFNjcm9sbEFyZWFTdHlsZVByb3BlcnR5OiAoKSA9PiB7fSxcbiAgICAgIHNldFNjcm9sbENvbnRlbnRTdHlsZVByb3BlcnR5OiAoKSA9PiB7fSxcbiAgICAgIGdldFNjcm9sbENvbnRlbnRTdHlsZVZhbHVlOiAoKSA9PiB7fSxcbiAgICAgIHNldFNjcm9sbEFyZWFTY3JvbGxMZWZ0OiAoKSA9PiB7fSxcbiAgICAgIGdldFNjcm9sbEFyZWFTY3JvbGxMZWZ0OiAoKSA9PiB7fSxcbiAgICAgIGdldFNjcm9sbENvbnRlbnRPZmZzZXRXaWR0aDogKCkgPT4ge30sXG4gICAgICBnZXRTY3JvbGxBcmVhT2Zmc2V0V2lkdGg6ICgpID0+IHt9LFxuICAgICAgY29tcHV0ZVNjcm9sbEFyZWFDbGllbnRSZWN0OiAoKSA9PiB7fSxcbiAgICAgIGNvbXB1dGVTY3JvbGxDb250ZW50Q2xpZW50UmVjdDogKCkgPT4ge30sXG4gICAgICBjb21wdXRlSG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodDogKCkgPT4ge30sXG4gICAgfSk7XG4gIH1cblxuICAvKiogQHBhcmFtIHshTURDVGFiU2Nyb2xsZXJBZGFwdGVyfSBhZGFwdGVyICovXG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIpIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciwgYWRhcHRlcikpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBib29sZWFuIGNvbnRyb2xzIHdoZXRoZXIgd2Ugc2hvdWxkIGhhbmRsZSB0aGUgdHJhbnNpdGlvbmVuZCBhbmQgaW50ZXJhY3Rpb24gZXZlbnRzIGR1cmluZyB0aGUgYW5pbWF0aW9uLlxuICAgICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNBbmltYXRpbmdfID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgTURDVGFiU2Nyb2xsZXJSVEwgaW5zdGFuY2UgdmFyaWVzIHBlciBicm93c2VyIGFuZCBhbGxvd3MgdXMgdG8gZW5jYXBzdWxhdGUgdGhlIHBlY3VsaWFyIGJyb3dzZXIgYmVoYXZpb3JcbiAgICAgKiBvZiBSVEwgc2Nyb2xsaW5nIGluIGl0J3Mgb3duIGNsYXNzLlxuICAgICAqIEBwcml2YXRlIHs/TURDVGFiU2Nyb2xsZXJSVEx9XG4gICAgICovXG4gICAgdGhpcy5ydGxTY3JvbGxlckluc3RhbmNlXztcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgLy8gQ29tcHV0ZSBob3Jpem9udGFsIHNjcm9sbGJhciBoZWlnaHQgb24gc2Nyb2xsZXIgd2l0aCBvdmVyZmxvdyBpbml0aWFsbHkgaGlkZGVuLCB0aGVuIHVwZGF0ZSBvdmVyZmxvdyB0byBzY3JvbGxcbiAgICAvLyBhbmQgaW1tZWRpYXRlbHkgYWRqdXN0IGJvdHRvbSBtYXJnaW4gdG8gYXZvaWQgdGhlIHNjcm9sbGJhciBpbml0aWFsbHkgYXBwZWFyaW5nIGJlZm9yZSBKUyBydW5zLlxuICAgIGNvbnN0IGhvcml6b250YWxTY3JvbGxiYXJIZWlnaHQgPSB0aGlzLmFkYXB0ZXJfLmNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0KCk7XG4gICAgdGhpcy5hZGFwdGVyXy5zZXRTY3JvbGxBcmVhU3R5bGVQcm9wZXJ0eSgnbWFyZ2luLWJvdHRvbScsIC1ob3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0ICsgJ3B4Jyk7XG4gICAgdGhpcy5hZGFwdGVyXy5hZGRTY3JvbGxBcmVhQ2xhc3MoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLmNzc0NsYXNzZXMuU0NST0xMX0FSRUFfU0NST0xMKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgY3VycmVudCB2aXN1YWwgc2Nyb2xsIHBvc2l0aW9uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldFNjcm9sbFBvc2l0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzUlRMXygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wdXRlQ3VycmVudFNjcm9sbFBvc2l0aW9uUlRMXygpO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRUcmFuc2xhdGVYID0gdGhpcy5jYWxjdWxhdGVDdXJyZW50VHJhbnNsYXRlWF8oKTtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gdGhpcy5hZGFwdGVyXy5nZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCgpO1xuICAgIHJldHVybiBzY3JvbGxMZWZ0IC0gY3VycmVudFRyYW5zbGF0ZVg7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBpbnRlcmFjdGlvbiBldmVudHMgdGhhdCBvY2N1ciBkdXJpbmcgdHJhbnNpdGlvblxuICAgKi9cbiAgaGFuZGxlSW50ZXJhY3Rpb24oKSB7XG4gICAgLy8gRWFybHkgZXhpdCBpZiB3ZSBhcmVuJ3QgYW5pbWF0aW5nXG4gICAgaWYgKCF0aGlzLmlzQW5pbWF0aW5nXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByZXZlbnQgb3RoZXIgZXZlbnQgbGlzdGVuZXJzIGZyb20gaGFuZGxpbmcgdGhpcyBldmVudFxuICAgIHRoaXMuc3RvcFNjcm9sbEFuaW1hdGlvbl8oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSB0cmFuc2l0aW9uZW5kIGV2ZW50XG4gICAqIEBwYXJhbSB7IUV2ZW50fSBldnRcbiAgICovXG4gIGhhbmRsZVRyYW5zaXRpb25FbmQoZXZ0KSB7XG4gICAgLy8gRWFybHkgZXhpdCBpZiB3ZSBhcmVuJ3QgYW5pbWF0aW5nIG9yIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgZGlmZmVyZW50IGVsZW1lbnQuXG4gICAgaWYgKCF0aGlzLmlzQW5pbWF0aW5nX1xuICAgICAgfHwgIXRoaXMuYWRhcHRlcl8uZXZlbnRUYXJnZXRNYXRjaGVzU2VsZWN0b3IoZXZ0LnRhcmdldCwgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLnN0cmluZ3MuQ09OVEVOVF9TRUxFQ1RPUikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmlzQW5pbWF0aW5nXyA9IGZhbHNlO1xuICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZW1lbnQgdGhlIHNjcm9sbCB2YWx1ZSBieSB0aGUgc2Nyb2xsWEluY3JlbWVudFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWEluY3JlbWVudCBUaGUgdmFsdWUgYnkgd2hpY2ggdG8gaW5jcmVtZW50IHRoZSBzY3JvbGwgcG9zaXRpb25cbiAgICovXG4gIGluY3JlbWVudFNjcm9sbChzY3JvbGxYSW5jcmVtZW50KSB7XG4gICAgLy8gRWFybHkgZXhpdCBmb3Igbm9uLW9wZXJhdGlvbmFsIGluY3JlbWVudCB2YWx1ZXNcbiAgICBpZiAoc2Nyb2xsWEluY3JlbWVudCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUlRMXygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbmNyZW1lbnRTY3JvbGxSVExfKHNjcm9sbFhJbmNyZW1lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuaW5jcmVtZW50U2Nyb2xsXyhzY3JvbGxYSW5jcmVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRvIHRoZSBnaXZlbiBzY3JvbGxYIHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYXG4gICAqL1xuICBzY3JvbGxUbyhzY3JvbGxYKSB7XG4gICAgaWYgKHRoaXMuaXNSVExfKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbFRvUlRMXyhzY3JvbGxYKTtcbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbFRvXyhzY3JvbGxYKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcHByb3ByaWF0ZSB2ZXJzaW9uIG9mIHRoZSBNRENUYWJTY3JvbGxlclJUTFxuICAgKiBAcmV0dXJuIHshTURDVGFiU2Nyb2xsZXJSVEx9XG4gICAqL1xuICBnZXRSVExTY3JvbGxlcigpIHtcbiAgICBpZiAoIXRoaXMucnRsU2Nyb2xsZXJJbnN0YW5jZV8pIHtcbiAgICAgIHRoaXMucnRsU2Nyb2xsZXJJbnN0YW5jZV8gPSB0aGlzLnJ0bFNjcm9sbGVyRmFjdG9yeV8oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ydGxTY3JvbGxlckluc3RhbmNlXztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGVYIHZhbHVlIGZyb20gYSBDU1MgbWF0cml4IHRyYW5zZm9ybSBmdW5jdGlvbiBzdHJpbmdcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsY3VsYXRlQ3VycmVudFRyYW5zbGF0ZVhfKCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybVZhbHVlID0gdGhpcy5hZGFwdGVyXy5nZXRTY3JvbGxDb250ZW50U3R5bGVWYWx1ZSgndHJhbnNmb3JtJyk7XG4gICAgLy8gRWFybHkgZXhpdCBpZiBubyB0cmFuc2Zvcm0gaXMgcHJlc2VudFxuICAgIGlmICh0cmFuc2Zvcm1WYWx1ZSA9PT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgdHJhbnNmb3JtIHZhbHVlIGNvbWVzIGJhY2sgYXMgYSBtYXRyaXggdHJhbnNmb3JtYXRpb24gaW4gdGhlIGZvcm1cbiAgICAvLyBvZiBgbWF0cml4KGEsIGIsIGMsIGQsIHR4LCB0eSlgLiBXZSBvbmx5IGNhcmUgYWJvdXQgdHggKHRyYW5zbGF0ZVgpIHNvXG4gICAgLy8gd2UncmUgZ29pbmcgdG8gZ3JhYiBhbGwgdGhlIHBhcmVudGhlc2l6ZWQgdmFsdWVzLCBzdHJpcCBvdXQgdHgsIGFuZFxuICAgIC8vIHBhcnNlIGl0LlxuICAgIGNvbnN0IHJlc3VsdHMgPSAvXFwoKC4rKVxcKS8uZXhlYyh0cmFuc2Zvcm1WYWx1ZSlbMV07XG4gICAgY29uc3QgcGFydHMgPSByZXN1bHRzLnNwbGl0KCcsJyk7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQocGFydHNbNF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSBzYWZlIHNjcm9sbCB2YWx1ZSB0aGF0IGlzID4gMCBhbmQgPCB0aGUgbWF4IHNjcm9sbCB2YWx1ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsWCBUaGUgZGlzdGFuY2UgdG8gc2Nyb2xsXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNsYW1wU2Nyb2xsVmFsdWVfKHNjcm9sbFgpIHtcbiAgICBjb25zdCBlZGdlcyA9IHRoaXMuY2FsY3VsYXRlU2Nyb2xsRWRnZXNfKCk7XG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGVkZ2VzLmxlZnQsIHNjcm9sbFgpLCBlZGdlcy5yaWdodCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29tcHV0ZUN1cnJlbnRTY3JvbGxQb3NpdGlvblJUTF8oKSB7XG4gICAgY29uc3QgdHJhbnNsYXRlWCA9IHRoaXMuY2FsY3VsYXRlQ3VycmVudFRyYW5zbGF0ZVhfKCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UlRMU2Nyb2xsZXIoKS5nZXRTY3JvbGxQb3NpdGlvblJUTCh0cmFuc2xhdGVYKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshTURDVGFiU2Nyb2xsZXJIb3Jpem9udGFsRWRnZXN9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYWxjdWxhdGVTY3JvbGxFZGdlc18oKSB7XG4gICAgY29uc3QgY29udGVudFdpZHRoID0gdGhpcy5hZGFwdGVyXy5nZXRTY3JvbGxDb250ZW50T2Zmc2V0V2lkdGgoKTtcbiAgICBjb25zdCByb290V2lkdGggPSB0aGlzLmFkYXB0ZXJfLmdldFNjcm9sbEFyZWFPZmZzZXRXaWR0aCgpO1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFNRENUYWJTY3JvbGxlckhvcml6b250YWxFZGdlc30gKi8gKHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogY29udGVudFdpZHRoIC0gcm9vdFdpZHRoLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIHNjcm9sbCBtZXRob2RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFggVGhlIG5ldyBzY3JvbGwgcG9zaXRpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNjcm9sbFRvXyhzY3JvbGxYKSB7XG4gICAgY29uc3QgY3VycmVudFNjcm9sbFggPSB0aGlzLmdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgY29uc3Qgc2FmZVNjcm9sbFggPSB0aGlzLmNsYW1wU2Nyb2xsVmFsdWVfKHNjcm9sbFgpO1xuICAgIGNvbnN0IHNjcm9sbERlbHRhID0gc2FmZVNjcm9sbFggLSBjdXJyZW50U2Nyb2xsWDtcbiAgICB0aGlzLmFuaW1hdGVfKC8qKiBAdHlwZSB7IU1EQ1RhYlNjcm9sbGVyQW5pbWF0aW9ufSAqLyAoe1xuICAgICAgZmluYWxTY3JvbGxQb3NpdGlvbjogc2FmZVNjcm9sbFgsXG4gICAgICBzY3JvbGxEZWx0YTogc2Nyb2xsRGVsdGEsXG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIFJUTCBzY3JvbGwgbWV0aG9kXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYIFRoZSBuZXcgc2Nyb2xsIHBvc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzY3JvbGxUb1JUTF8oc2Nyb2xsWCkge1xuICAgIGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuZ2V0UlRMU2Nyb2xsZXIoKS5zY3JvbGxUb1JUTChzY3JvbGxYKTtcbiAgICB0aGlzLmFuaW1hdGVfKGFuaW1hdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJuYWwgaW5jcmVtZW50IHNjcm9sbCBtZXRob2RcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFggVGhlIG5ldyBzY3JvbGwgcG9zaXRpb24gaW5jcmVtZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpbmNyZW1lbnRTY3JvbGxfKHNjcm9sbFgpIHtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsWCA9IHRoaXMuZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICBjb25zdCB0YXJnZXRTY3JvbGxYID0gc2Nyb2xsWCArIGN1cnJlbnRTY3JvbGxYO1xuICAgIGNvbnN0IHNhZmVTY3JvbGxYID0gdGhpcy5jbGFtcFNjcm9sbFZhbHVlXyh0YXJnZXRTY3JvbGxYKTtcbiAgICBjb25zdCBzY3JvbGxEZWx0YSA9IHNhZmVTY3JvbGxYIC0gY3VycmVudFNjcm9sbFg7XG4gICAgdGhpcy5hbmltYXRlXygvKiogQHR5cGUgeyFNRENUYWJTY3JvbGxlckFuaW1hdGlvbn0gKi8gKHtcbiAgICAgIGZpbmFsU2Nyb2xsUG9zaXRpb246IHNhZmVTY3JvbGxYLFxuICAgICAgc2Nyb2xsRGVsdGE6IHNjcm9sbERlbHRhLFxuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBpbmNyZW1lbmV0IHNjcm9sbCBSVEwgbWV0aG9kXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYIFRoZSBuZXcgc2Nyb2xsIHBvc2l0aW9uIFJUTCBpbmNyZW1lbnRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGluY3JlbWVudFNjcm9sbFJUTF8oc2Nyb2xsWCkge1xuICAgIGNvbnN0IGFuaW1hdGlvbiA9IHRoaXMuZ2V0UlRMU2Nyb2xsZXIoKS5pbmNyZW1lbnRTY3JvbGxSVEwoc2Nyb2xsWCk7XG4gICAgdGhpcy5hbmltYXRlXyhhbmltYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuaW1hdGVzIHRoZSB0YWIgc2Nyb2xsaW5nXG4gICAqIEBwYXJhbSB7IU1EQ1RhYlNjcm9sbGVyQW5pbWF0aW9ufSBhbmltYXRpb24gVGhlIGFuaW1hdGlvbiB0byBhcHBseVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYW5pbWF0ZV8oYW5pbWF0aW9uKSB7XG4gICAgLy8gRWFybHkgZXhpdCBpZiB0cmFuc2xhdGVYIGlzIDAsIHdoaWNoIG1lYW5zIHRoZXJlJ3Mgbm8gYW5pbWF0aW9uIHRvIHBlcmZvcm1cbiAgICBpZiAoYW5pbWF0aW9uLnNjcm9sbERlbHRhID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdG9wU2Nyb2xsQW5pbWF0aW9uXygpO1xuICAgIC8vIFRoaXMgYW5pbWF0aW9uIHVzZXMgdGhlIEZMSVAgYXBwcm9hY2guXG4gICAgLy8gUmVhZCBtb3JlIGhlcmU6IGh0dHBzOi8vYWVyb3R3aXN0LmNvbS9ibG9nL2ZsaXAteW91ci1hbmltYXRpb25zL1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoYW5pbWF0aW9uLmZpbmFsU2Nyb2xsUG9zaXRpb24pO1xuICAgIHRoaXMuYWRhcHRlcl8uc2V0U2Nyb2xsQ29udGVudFN0eWxlUHJvcGVydHkoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGVYKCR7YW5pbWF0aW9uLnNjcm9sbERlbHRhfXB4KWApO1xuICAgIC8vIEZvcmNlIHJlcGFpbnRcbiAgICB0aGlzLmFkYXB0ZXJfLmNvbXB1dGVTY3JvbGxBcmVhQ2xpZW50UmVjdCgpO1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMuYWRhcHRlcl8uYWRkQ2xhc3MoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HKTtcbiAgICAgIHRoaXMuYWRhcHRlcl8uc2V0U2Nyb2xsQ29udGVudFN0eWxlUHJvcGVydHkoJ3RyYW5zZm9ybScsICdub25lJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmlzQW5pbWF0aW5nXyA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgc2Nyb2xsIGFuaW1hdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RvcFNjcm9sbEFuaW1hdGlvbl8oKSB7XG4gICAgdGhpcy5pc0FuaW1hdGluZ18gPSBmYWxzZTtcbiAgICBjb25zdCBjdXJyZW50U2Nyb2xsUG9zaXRpb24gPSB0aGlzLmdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uXygpO1xuICAgIHRoaXMuYWRhcHRlcl8ucmVtb3ZlQ2xhc3MoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HKTtcbiAgICB0aGlzLmFkYXB0ZXJfLnNldFNjcm9sbENvbnRlbnRTdHlsZVByb3BlcnR5KCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgwcHgpJyk7XG4gICAgdGhpcy5hZGFwdGVyXy5zZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdChjdXJyZW50U2Nyb2xsUG9zaXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGR1cmluZyBhbmltYXRpb25cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0QW5pbWF0aW5nU2Nyb2xsUG9zaXRpb25fKCkge1xuICAgIGNvbnN0IGN1cnJlbnRUcmFuc2xhdGVYID0gdGhpcy5jYWxjdWxhdGVDdXJyZW50VHJhbnNsYXRlWF8oKTtcbiAgICBjb25zdCBzY3JvbGxMZWZ0ID0gdGhpcy5hZGFwdGVyXy5nZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCgpO1xuICAgIGlmICh0aGlzLmlzUlRMXygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRSVExTY3JvbGxlcigpLmdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uKHNjcm9sbExlZnQsIGN1cnJlbnRUcmFuc2xhdGVYKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Nyb2xsTGVmdCAtIGN1cnJlbnRUcmFuc2xhdGVYO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIFJUTCBTY3JvbGxlciB0byB1c2VcbiAgICogQHJldHVybiB7IU1EQ1RhYlNjcm9sbGVyUlRMfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcnRsU2Nyb2xsZXJGYWN0b3J5XygpIHtcbiAgICAvLyBCcm93c2VycyBoYXZlIHRocmVlIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbnMgb2Ygc2Nyb2xsTGVmdCBpbiBSVEwgbW9kZSxcbiAgICAvLyBkZXBlbmRlbnQgb24gdGhlIGJyb3dzZXIuIFRoZSBiZWhhdmlvciBpcyBiYXNlZCBvZmYgdGhlIG1heCBMVFJcbiAgICAvLyBzY3JvbGxsZWZ0IHZhbHVlIGFuZCAwLlxuICAgIC8vXG4gICAgLy8gKiBEZWZhdWx0IHNjcm9sbGluZyBpbiBSVEwgKlxuICAgIC8vICAgIC0gTGVmdC1tb3N0IHZhbHVlOiAwXG4gICAgLy8gICAgLSBSaWdodC1tb3N0IHZhbHVlOiBNYXggTFRSIHNjcm9sbExlZnQgdmFsdWVcbiAgICAvL1xuICAgIC8vICogTmVnYXRpdmUgc2Nyb2xsaW5nIGluIFJUTCAqXG4gICAgLy8gICAgLSBMZWZ0LW1vc3QgdmFsdWU6IE5lZ2F0ZWQgbWF4IExUUiBzY3JvbGxMZWZ0IHZhbHVlXG4gICAgLy8gICAgLSBSaWdodC1tb3N0IHZhbHVlOiAwXG4gICAgLy9cbiAgICAvLyAqIFJldmVyc2Ugc2Nyb2xsaW5nIGluIFJUTCAqXG4gICAgLy8gICAgLSBMZWZ0LW1vc3QgdmFsdWU6IE1heCBMVFIgc2Nyb2xsTGVmdCB2YWx1ZVxuICAgIC8vICAgIC0gUmlnaHQtbW9zdCB2YWx1ZTogMFxuICAgIC8vXG4gICAgLy8gV2UgdXNlIHRob3NlIHByaW5jaXBsZXMgYmVsb3cgdG8gZGV0ZXJtaW5lIHdoaWNoIFJUTCBzY3JvbGxMZWZ0XG4gICAgLy8gYmVoYXZpb3IgaXMgaW1wbGVtZW50ZWQgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAgICBjb25zdCBpbml0aWFsU2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcbiAgICB0aGlzLmFkYXB0ZXJfLnNldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KGluaXRpYWxTY3JvbGxMZWZ0IC0gMSk7XG4gICAgY29uc3QgbmV3U2Nyb2xsTGVmdCA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQoKTtcblxuICAgIC8vIElmIHRoZSBuZXdTY3JvbGxMZWZ0IHZhbHVlIGlzIG5lZ2F0aXZlLHRoZW4gd2Uga25vdyB0aGF0IHRoZSBicm93c2VyIGhhc1xuICAgIC8vIGltcGxlbWVudGVkIG5lZ2F0aXZlIFJUTCBzY3JvbGxpbmcsIHNpbmNlIGFsbCBvdGhlciBpbXBsZW1lbnRhdGlvbnMgaGF2ZVxuICAgIC8vIG9ubHkgcG9zaXRpdmUgdmFsdWVzLlxuICAgIGlmIChuZXdTY3JvbGxMZWZ0IDwgMCkge1xuICAgICAgLy8gVW5kbyB0aGUgc2Nyb2xsTGVmdCB0ZXN0IGNoZWNrXG4gICAgICB0aGlzLmFkYXB0ZXJfLnNldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KGluaXRpYWxTY3JvbGxMZWZ0KTtcbiAgICAgIHJldHVybiBuZXcgTURDVGFiU2Nyb2xsZXJSVExOZWdhdGl2ZSh0aGlzLmFkYXB0ZXJfKTtcbiAgICB9XG5cbiAgICBjb25zdCByb290Q2xpZW50UmVjdCA9IHRoaXMuYWRhcHRlcl8uY29tcHV0ZVNjcm9sbEFyZWFDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgY29udGVudENsaWVudFJlY3QgPSB0aGlzLmFkYXB0ZXJfLmNvbXB1dGVTY3JvbGxDb250ZW50Q2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHJpZ2h0RWRnZURlbHRhID0gTWF0aC5yb3VuZChjb250ZW50Q2xpZW50UmVjdC5yaWdodCAtIHJvb3RDbGllbnRSZWN0LnJpZ2h0KTtcbiAgICAvLyBVbmRvIHRoZSBzY3JvbGxMZWZ0IHRlc3QgY2hlY2tcbiAgICB0aGlzLmFkYXB0ZXJfLnNldFNjcm9sbEFyZWFTY3JvbGxMZWZ0KGluaXRpYWxTY3JvbGxMZWZ0KTtcblxuICAgIC8vIEJ5IGNhbGN1bGF0aW5nIHRoZSBjbGllbnRSZWN0IG9mIHRoZSByb290IGVsZW1lbnQgYW5kIHRoZSBjbGllbnRSZWN0IG9mXG4gICAgLy8gdGhlIGNvbnRlbnQgZWxlbWVudCwgd2UgY2FuIGRldGVybWluZSBob3cgbXVjaCB0aGUgc2Nyb2xsIHZhbHVlIGNoYW5nZWRcbiAgICAvLyB3aGVuIHdlIHBlcmZvcm1lZCB0aGUgc2Nyb2xsTGVmdCBzdWJ0cmFjdGlvbiBhYm92ZS5cbiAgICBpZiAocmlnaHRFZGdlRGVsdGEgPT09IG5ld1Njcm9sbExlZnQpIHtcbiAgICAgIHJldHVybiBuZXcgTURDVGFiU2Nyb2xsZXJSVExSZXZlcnNlKHRoaXMuYWRhcHRlcl8pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0KHRoaXMuYWRhcHRlcl8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc1JUTF8oKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsQ29udGVudFN0eWxlVmFsdWUoJ2RpcmVjdGlvbicpID09PSAncnRsJztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNRENUYWJTY3JvbGxlckZvdW5kYXRpb247XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHtjc3NDbGFzc2VzfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8qKlxuICogU3RvcmVzIHJlc3VsdCBmcm9tIGNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0IHRvIGF2b2lkIHJlZHVuZGFudCBwcm9jZXNzaW5nLlxuICogQHByaXZhdGUge251bWJlcnx1bmRlZmluZWR9XG4gKi9cbmxldCBob3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0XztcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgaGVpZ2h0IG9mIGJyb3dzZXItcmVuZGVyZWQgaG9yaXpvbnRhbCBzY3JvbGxiYXJzIHVzaW5nIGEgc2VsZi1jcmVhdGVkIHRlc3QgZWxlbWVudC5cbiAqIE1heSByZXR1cm4gMCAoZS5nLiBvbiBPUyBYIGJyb3dzZXJzIHVuZGVyIGRlZmF1bHQgY29uZmlndXJhdGlvbikuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jdW1lbnRPYmpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHNob3VsZENhY2hlUmVzdWx0XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0KGRvY3VtZW50T2JqLCBzaG91bGRDYWNoZVJlc3VsdCA9IHRydWUpIHtcbiAgaWYgKHNob3VsZENhY2hlUmVzdWx0ICYmIHR5cGVvZiBob3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0XyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodF87XG4gIH1cblxuICBjb25zdCBlbCA9IGRvY3VtZW50T2JqLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBlbC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzZXMuU0NST0xMX1RFU1QpO1xuICBkb2N1bWVudE9iai5ib2R5LmFwcGVuZENoaWxkKGVsKTtcblxuICBjb25zdCBob3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0IC0gZWwuY2xpZW50SGVpZ2h0O1xuICBkb2N1bWVudE9iai5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcblxuICBpZiAoc2hvdWxkQ2FjaGVSZXN1bHQpIHtcbiAgICBob3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0XyA9IGhvcml6b250YWxTY3JvbGxiYXJIZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIGhvcml6b250YWxTY3JvbGxiYXJIZWlnaHQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHshT2JqZWN0fSBIVE1MRWxlbWVudFByb3RvdHlwZVxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoZXNQcm9wZXJ0eShIVE1MRWxlbWVudFByb3RvdHlwZSkge1xuICByZXR1cm4gW1xuICAgICdtc01hdGNoZXNTZWxlY3RvcicsICdtYXRjaGVzJyxcbiAgXS5maWx0ZXIoKHApID0+IHAgaW4gSFRNTEVsZW1lbnRQcm90b3R5cGUpLnBvcCgpO1xufVxuXG5leHBvcnQge2NvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0LCBnZXRNYXRjaGVzUHJvcGVydHl9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCBNRENDb21wb25lbnQgZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcblxuaW1wb3J0IHtNRENUYWJTY3JvbGxlckFkYXB0ZXJ9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uIGZyb20gJy4vZm91bmRhdGlvbic7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQGV4dGVuZHMge01EQ0NvbXBvbmVudDwhTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uPn1cbiAqIEBmaW5hbFxuICovXG5jbGFzcyBNRENUYWJTY3JvbGxlciBleHRlbmRzIE1EQ0NvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSByb290XG4gICAqIEByZXR1cm4geyFNRENUYWJTY3JvbGxlcn1cbiAgICovXG4gIHN0YXRpYyBhdHRhY2hUbyhyb290KSB7XG4gICAgcmV0dXJuIG5ldyBNRENUYWJTY3JvbGxlcihyb290KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0VsZW1lbnR9ICovXG4gICAgdGhpcy5jb250ZW50XztcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0VsZW1lbnR9ICovXG4gICAgdGhpcy5hcmVhXztcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKD9FdmVudCk6IHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmhhbmRsZUludGVyYWN0aW9uXztcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKCFFdmVudCk6IHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmhhbmRsZVRyYW5zaXRpb25FbmRfO1xuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmFyZWFfID0gdGhpcy5yb290Xy5xdWVyeVNlbGVjdG9yKE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbi5zdHJpbmdzLkFSRUFfU0VMRUNUT1IpO1xuICAgIHRoaXMuY29udGVudF8gPSB0aGlzLnJvb3RfLnF1ZXJ5U2VsZWN0b3IoTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uLnN0cmluZ3MuQ09OVEVOVF9TRUxFQ1RPUik7XG4gIH1cblxuICBpbml0aWFsU3luY1dpdGhET00oKSB7XG4gICAgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8gPSAoKSA9PiB0aGlzLmZvdW5kYXRpb25fLmhhbmRsZUludGVyYWN0aW9uKCk7XG4gICAgdGhpcy5oYW5kbGVUcmFuc2l0aW9uRW5kXyA9IChldnQpID0+IHRoaXMuZm91bmRhdGlvbl8uaGFuZGxlVHJhbnNpdGlvbkVuZChldnQpO1xuXG4gICAgdGhpcy5hcmVhXy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fKTtcbiAgICB0aGlzLmFyZWFfLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZUludGVyYWN0aW9uXyk7XG4gICAgdGhpcy5hcmVhXy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fKTtcbiAgICB0aGlzLmFyZWFfLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlSW50ZXJhY3Rpb25fKTtcbiAgICB0aGlzLmFyZWFfLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUludGVyYWN0aW9uXyk7XG4gICAgdGhpcy5jb250ZW50Xy5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5oYW5kbGVUcmFuc2l0aW9uRW5kXyk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcblxuICAgIHRoaXMuYXJlYV8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLmhhbmRsZUludGVyYWN0aW9uXyk7XG4gICAgdGhpcy5hcmVhXy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8pO1xuICAgIHRoaXMuYXJlYV8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLmhhbmRsZUludGVyYWN0aW9uXyk7XG4gICAgdGhpcy5hcmVhXy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmhhbmRsZUludGVyYWN0aW9uXyk7XG4gICAgdGhpcy5hcmVhXy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVJbnRlcmFjdGlvbl8pO1xuICAgIHRoaXMuY29udGVudF8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMuaGFuZGxlVHJhbnNpdGlvbkVuZF8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFNRENUYWJTY3JvbGxlckZvdW5kYXRpb259XG4gICAqL1xuICBnZXREZWZhdWx0Rm91bmRhdGlvbigpIHtcbiAgICBjb25zdCBhZGFwdGVyID0gLyoqIEB0eXBlIHshTURDVGFiU2Nyb2xsZXJBZGFwdGVyfSAqLyAoe1xuICAgICAgZXZlbnRUYXJnZXRNYXRjaGVzU2VsZWN0b3I6IChldnRUYXJnZXQsIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IE1BVENIRVMgPSB1dGlsLmdldE1hdGNoZXNQcm9wZXJ0eShIVE1MRWxlbWVudC5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gZXZ0VGFyZ2V0W01BVENIRVNdKHNlbGVjdG9yKTtcbiAgICAgIH0sXG4gICAgICBhZGRDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSksXG4gICAgICByZW1vdmVDbGFzczogKGNsYXNzTmFtZSkgPT4gdGhpcy5yb290Xy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSksXG4gICAgICBhZGRTY3JvbGxBcmVhQ2xhc3M6IChjbGFzc05hbWUpID0+IHRoaXMuYXJlYV8uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpLFxuICAgICAgc2V0U2Nyb2xsQXJlYVN0eWxlUHJvcGVydHk6IChwcm9wLCB2YWx1ZSkgPT4gdGhpcy5hcmVhXy5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCB2YWx1ZSksXG4gICAgICBzZXRTY3JvbGxDb250ZW50U3R5bGVQcm9wZXJ0eTogKHByb3AsIHZhbHVlKSA9PiB0aGlzLmNvbnRlbnRfLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIHZhbHVlKSxcbiAgICAgIGdldFNjcm9sbENvbnRlbnRTdHlsZVZhbHVlOiAocHJvcE5hbWUpID0+IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuY29udGVudF8pLmdldFByb3BlcnR5VmFsdWUocHJvcE5hbWUpLFxuICAgICAgc2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQ6IChzY3JvbGxYKSA9PiB0aGlzLmFyZWFfLnNjcm9sbExlZnQgPSBzY3JvbGxYLFxuICAgICAgZ2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQ6ICgpID0+IHRoaXMuYXJlYV8uc2Nyb2xsTGVmdCxcbiAgICAgIGdldFNjcm9sbENvbnRlbnRPZmZzZXRXaWR0aDogKCkgPT4gdGhpcy5jb250ZW50Xy5vZmZzZXRXaWR0aCxcbiAgICAgIGdldFNjcm9sbEFyZWFPZmZzZXRXaWR0aDogKCkgPT4gdGhpcy5hcmVhXy5vZmZzZXRXaWR0aCxcbiAgICAgIGNvbXB1dGVTY3JvbGxBcmVhQ2xpZW50UmVjdDogKCkgPT4gdGhpcy5hcmVhXy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGNvbXB1dGVTY3JvbGxDb250ZW50Q2xpZW50UmVjdDogKCkgPT4gdGhpcy5jb250ZW50Xy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIGNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0OiAoKSA9PiB1dGlsLmNvbXB1dGVIb3Jpem9udGFsU2Nyb2xsYmFySGVpZ2h0KGRvY3VtZW50KSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgTURDVGFiU2Nyb2xsZXJGb3VuZGF0aW9uKGFkYXB0ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmlzdWFsIHNjcm9sbCBwb3NpdGlvblxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRTY3JvbGxQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uXy5nZXRTY3JvbGxQb3NpdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGwgY29udGVudFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRTY3JvbGxDb250ZW50V2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudF8ub2Zmc2V0V2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogSW5jcmVtZW50cyB0aGUgc2Nyb2xsIHZhbHVlIGJ5IHRoZSBnaXZlbiBhbW91bnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFhJbmNyZW1lbnQgVGhlIHBpeGVsIHZhbHVlIGJ5IHdoaWNoIHRvIGluY3JlbWVudCB0aGUgc2Nyb2xsIHZhbHVlXG4gICAqL1xuICBpbmNyZW1lbnRTY3JvbGwoc2Nyb2xsWEluY3JlbWVudCkge1xuICAgIHRoaXMuZm91bmRhdGlvbl8uaW5jcmVtZW50U2Nyb2xsKHNjcm9sbFhJbmNyZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjcm9sbHMgdG8gdGhlIGdpdmVuIHBpeGVsIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxYIFRoZSBwaXhlbCB2YWx1ZSB0byBzY3JvbGwgdG9cbiAgICovXG4gIHNjcm9sbFRvKHNjcm9sbFgpIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLnNjcm9sbFRvKHNjcm9sbFgpO1xuICB9XG59XG5cbmV4cG9ydCB7TURDVGFiU2Nyb2xsZXIsIE1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbiwgdXRpbH07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoqIEBlbnVtIHtzdHJpbmd9ICovXG5jb25zdCBzdHJpbmdzID0ge1xuICBUQUJfQUNUSVZBVEVEX0VWRU5UOiAnTURDVGFiQmFyOmFjdGl2YXRlZCcsXG4gIFRBQl9TQ1JPTExFUl9TRUxFQ1RPUjogJy5tZGMtdGFiLXNjcm9sbGVyJyxcbiAgVEFCX1NFTEVDVE9SOiAnLm1kYy10YWInLFxuICBBUlJPV19MRUZUX0tFWTogJ0Fycm93TGVmdCcsXG4gIEFSUk9XX1JJR0hUX0tFWTogJ0Fycm93UmlnaHQnLFxuICBFTkRfS0VZOiAnRW5kJyxcbiAgSE9NRV9LRVk6ICdIb21lJyxcbiAgRU5URVJfS0VZOiAnRW50ZXInLFxuICBTUEFDRV9LRVk6ICdTcGFjZScsXG59O1xuXG4vKiogQGVudW0ge251bWJlcn0gKi9cbmNvbnN0IG51bWJlcnMgPSB7XG4gIEVYVFJBX1NDUk9MTF9BTU9VTlQ6IDIwLFxuICBBUlJPV19MRUZUX0tFWUNPREU6IDM3LFxuICBBUlJPV19SSUdIVF9LRVlDT0RFOiAzOSxcbiAgRU5EX0tFWUNPREU6IDM1LFxuICBIT01FX0tFWUNPREU6IDM2LFxuICBFTlRFUl9LRVlDT0RFOiAxMyxcbiAgU1BBQ0VfS0VZQ09ERTogMzIsXG59O1xuXG5leHBvcnQge1xuICBudW1iZXJzLFxuICBzdHJpbmdzLFxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgTURDRm91bmRhdGlvbiBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcblxuaW1wb3J0IHtzdHJpbmdzLCBudW1iZXJzfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgTURDVGFiQmFyQWRhcHRlciBmcm9tICcuL2FkYXB0ZXInO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHtNRENUYWJEaW1lbnNpb25zfSBmcm9tICdAbWF0ZXJpYWwvdGFiL2FkYXB0ZXInO1xuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIEB0eXBlIHtTZXQ8c3RyaW5nPn1cbiAqL1xuY29uc3QgQUNDRVBUQUJMRV9LRVlTID0gbmV3IFNldCgpO1xuLy8gSUUxMSBoYXMgbm8gc3VwcG9ydCBmb3IgbmV3IFNldCB3aXRoIGl0ZXJhYmxlIHNvIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGlzIGJ5IGhhbmRcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5BUlJPV19MRUZUX0tFWSk7XG5BQ0NFUFRBQkxFX0tFWVMuYWRkKHN0cmluZ3MuQVJST1dfUklHSFRfS0VZKTtcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5FTkRfS0VZKTtcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5IT01FX0tFWSk7XG5BQ0NFUFRBQkxFX0tFWVMuYWRkKHN0cmluZ3MuRU5URVJfS0VZKTtcbkFDQ0VQVEFCTEVfS0VZUy5hZGQoc3RyaW5ncy5TUEFDRV9LRVkpO1xuXG4vKipcbiAqIEB0eXBlIHtNYXA8bnVtYmVyLCBzdHJpbmc+fVxuICovXG5jb25zdCBLRVlDT0RFX01BUCA9IG5ldyBNYXAoKTtcbi8vIElFMTEgaGFzIG5vIHN1cHBvcnQgZm9yIG5ldyBNYXAgd2l0aCBpdGVyYWJsZSBzbyB3ZSBuZWVkIHRvIGluaXRpYWxpemUgdGhpcyBieSBoYW5kXG5LRVlDT0RFX01BUC5zZXQobnVtYmVycy5BUlJPV19MRUZUX0tFWUNPREUsIHN0cmluZ3MuQVJST1dfTEVGVF9LRVkpO1xuS0VZQ09ERV9NQVAuc2V0KG51bWJlcnMuQVJST1dfUklHSFRfS0VZQ09ERSwgc3RyaW5ncy5BUlJPV19SSUdIVF9LRVkpO1xuS0VZQ09ERV9NQVAuc2V0KG51bWJlcnMuRU5EX0tFWUNPREUsIHN0cmluZ3MuRU5EX0tFWSk7XG5LRVlDT0RFX01BUC5zZXQobnVtYmVycy5IT01FX0tFWUNPREUsIHN0cmluZ3MuSE9NRV9LRVkpO1xuS0VZQ09ERV9NQVAuc2V0KG51bWJlcnMuRU5URVJfS0VZQ09ERSwgc3RyaW5ncy5FTlRFUl9LRVkpO1xuS0VZQ09ERV9NQVAuc2V0KG51bWJlcnMuU1BBQ0VfS0VZQ09ERSwgc3RyaW5ncy5TUEFDRV9LRVkpO1xuXG4vKipcbiAqIEBleHRlbmRzIHtNRENGb3VuZGF0aW9uPCFNRENUYWJCYXJBZGFwdGVyPn1cbiAqIEBmaW5hbFxuICovXG5jbGFzcyBNRENUYWJCYXJGb3VuZGF0aW9uIGV4dGVuZHMgTURDRm91bmRhdGlvbiB7XG4gIC8qKiBAcmV0dXJuIGVudW0ge3N0cmluZ30gKi9cbiAgc3RhdGljIGdldCBzdHJpbmdzKCkge1xuICAgIHJldHVybiBzdHJpbmdzO1xuICB9XG5cbiAgLyoqIEByZXR1cm4gZW51bSB7bnVtYmVyfSAqL1xuICBzdGF0aWMgZ2V0IG51bWJlcnMoKSB7XG4gICAgcmV0dXJuIG51bWJlcnM7XG4gIH1cblxuICAvKipcbiAgICogQHNlZSBNRENUYWJCYXJBZGFwdGVyIGZvciB0eXBpbmcgaW5mb3JtYXRpb25cbiAgICogQHJldHVybiB7IU1EQ1RhYkJhckFkYXB0ZXJ9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRBZGFwdGVyKCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFNRENUYWJCYXJBZGFwdGVyfSAqLyAoe1xuICAgICAgc2Nyb2xsVG86ICgpID0+IHt9LFxuICAgICAgaW5jcmVtZW50U2Nyb2xsOiAoKSA9PiB7fSxcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uOiAoKSA9PiB7fSxcbiAgICAgIGdldFNjcm9sbENvbnRlbnRXaWR0aDogKCkgPT4ge30sXG4gICAgICBnZXRPZmZzZXRXaWR0aDogKCkgPT4ge30sXG4gICAgICBpc1JUTDogKCkgPT4ge30sXG4gICAgICBzZXRBY3RpdmVUYWI6ICgpID0+IHt9LFxuICAgICAgYWN0aXZhdGVUYWJBdEluZGV4OiAoKSA9PiB7fSxcbiAgICAgIGRlYWN0aXZhdGVUYWJBdEluZGV4OiAoKSA9PiB7fSxcbiAgICAgIGZvY3VzVGFiQXRJbmRleDogKCkgPT4ge30sXG4gICAgICBnZXRUYWJJbmRpY2F0b3JDbGllbnRSZWN0QXRJbmRleDogKCkgPT4ge30sXG4gICAgICBnZXRUYWJEaW1lbnNpb25zQXRJbmRleDogKCkgPT4ge30sXG4gICAgICBnZXRQcmV2aW91c0FjdGl2ZVRhYkluZGV4OiAoKSA9PiB7fSxcbiAgICAgIGdldEZvY3VzZWRUYWJJbmRleDogKCkgPT4ge30sXG4gICAgICBnZXRJbmRleE9mVGFiOiAoKSA9PiB7fSxcbiAgICAgIGdldFRhYkxpc3RMZW5ndGg6ICgpID0+IHt9LFxuICAgICAgbm90aWZ5VGFiQWN0aXZhdGVkOiAoKSA9PiB7fSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFNRENUYWJCYXJBZGFwdGVyfSBhZGFwdGVyXG4gICAqICovXG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIpIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKE1EQ1RhYkJhckZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIsIGFkYXB0ZXIpKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLnVzZUF1dG9tYXRpY0FjdGl2YXRpb25fID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoZXMgYmV0d2VlbiBhdXRvbWF0aWMgYW5kIG1hbnVhbCBhY3RpdmF0aW9uIG1vZGVzLlxuICAgKiBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByYWN0aWNlcy8jdGFicGFuZWwgZm9yIGV4YW1wbGVzLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUF1dG9tYXRpY0FjdGl2YXRpb25cbiAgICovXG4gIHNldFVzZUF1dG9tYXRpY0FjdGl2YXRpb24odXNlQXV0b21hdGljQWN0aXZhdGlvbikge1xuICAgIHRoaXMudXNlQXV0b21hdGljQWN0aXZhdGlvbl8gPSB1c2VBdXRvbWF0aWNBY3RpdmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgdGFiIGF0IHRoZSBnaXZlbiBpbmRleFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICovXG4gIGFjdGl2YXRlVGFiKGluZGV4KSB7XG4gICAgY29uc3QgcHJldmlvdXNBY3RpdmVJbmRleCA9IHRoaXMuYWRhcHRlcl8uZ2V0UHJldmlvdXNBY3RpdmVUYWJJbmRleCgpO1xuICAgIGlmICghdGhpcy5pbmRleElzSW5SYW5nZV8oaW5kZXgpIHx8IGluZGV4ID09PSBwcmV2aW91c0FjdGl2ZUluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hZGFwdGVyXy5kZWFjdGl2YXRlVGFiQXRJbmRleChwcmV2aW91c0FjdGl2ZUluZGV4KTtcbiAgICB0aGlzLmFkYXB0ZXJfLmFjdGl2YXRlVGFiQXRJbmRleChpbmRleCwgdGhpcy5hZGFwdGVyXy5nZXRUYWJJbmRpY2F0b3JDbGllbnRSZWN0QXRJbmRleChwcmV2aW91c0FjdGl2ZUluZGV4KSk7XG4gICAgdGhpcy5zY3JvbGxJbnRvVmlldyhpbmRleCk7XG5cbiAgICB0aGlzLmFkYXB0ZXJfLm5vdGlmeVRhYkFjdGl2YXRlZChpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUga2V5ZG93biBldmVudFxuICAgKiBAcGFyYW0geyFFdmVudH0gZXZ0XG4gICAqL1xuICBoYW5kbGVLZXlEb3duKGV2dCkge1xuICAgIC8vIEdldCB0aGUga2V5IGZyb20gdGhlIGV2ZW50XG4gICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXlGcm9tRXZlbnRfKGV2dCk7XG5cbiAgICAvLyBFYXJseSBleGl0IGlmIHRoZSBldmVudCBrZXkgaXNuJ3Qgb25lIG9mIHRoZSBrZXlib2FyZCBuYXZpZ2F0aW9uIGtleXNcbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGRlZmF1bHQgYmVoYXZpb3IgZm9yIG1vdmVtZW50IGtleXMsIGJ1dCBub3QgZm9yIGFjdGl2YXRpb24ga2V5cywgc2luY2UgOmFjdGl2ZSBpcyB1c2VkIHRvIGFwcGx5IHJpcHBsZVxuICAgIGlmICghdGhpcy5pc0FjdGl2YXRpb25LZXlfKGtleSkpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnVzZUF1dG9tYXRpY0FjdGl2YXRpb25fKSB7XG4gICAgICBpZiAodGhpcy5pc0FjdGl2YXRpb25LZXlfKGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZGV0ZXJtaW5lVGFyZ2V0RnJvbUtleV8odGhpcy5hZGFwdGVyXy5nZXRQcmV2aW91c0FjdGl2ZVRhYkluZGV4KCksIGtleSk7XG4gICAgICB0aGlzLmFkYXB0ZXJfLnNldEFjdGl2ZVRhYihpbmRleCk7XG4gICAgICB0aGlzLnNjcm9sbEludG9WaWV3KGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZm9jdXNlZFRhYkluZGV4ID0gdGhpcy5hZGFwdGVyXy5nZXRGb2N1c2VkVGFiSW5kZXgoKTtcbiAgICAgIGlmICh0aGlzLmlzQWN0aXZhdGlvbktleV8oa2V5KSkge1xuICAgICAgICB0aGlzLmFkYXB0ZXJfLnNldEFjdGl2ZVRhYihmb2N1c2VkVGFiSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmRldGVybWluZVRhcmdldEZyb21LZXlfKGZvY3VzZWRUYWJJbmRleCwga2V5KTtcbiAgICAgICAgdGhpcy5hZGFwdGVyXy5mb2N1c1RhYkF0SW5kZXgoaW5kZXgpO1xuICAgICAgICB0aGlzLnNjcm9sbEludG9WaWV3KGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgTURDVGFiOmludGVyYWN0ZWQgZXZlbnRcbiAgICogQHBhcmFtIHshRXZlbnR9IGV2dFxuICAgKi9cbiAgaGFuZGxlVGFiSW50ZXJhY3Rpb24oZXZ0KSB7XG4gICAgdGhpcy5hZGFwdGVyXy5zZXRBY3RpdmVUYWIodGhpcy5hZGFwdGVyXy5nZXRJbmRleE9mVGFiKGV2dC5kZXRhaWwudGFiKSk7XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xscyB0aGUgdGFiIGF0IHRoZSBnaXZlbiBpbmRleCBpbnRvIHZpZXdcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSB0YWIgaW5kZXggdG8gbWFrZSB2aXNpYmxlXG4gICAqL1xuICBzY3JvbGxJbnRvVmlldyhpbmRleCkge1xuICAgIC8vIEVhcmx5IGV4aXQgaWYgdGhlIGluZGV4IGlzIG91dCBvZiByYW5nZVxuICAgIGlmICghdGhpcy5pbmRleElzSW5SYW5nZV8oaW5kZXgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIHNjcm9sbCB0byAwIGlmIHNjcm9sbGluZyB0byB0aGUgMHRoIGluZGV4XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGFwdGVyXy5zY3JvbGxUbygwKTtcbiAgICB9XG5cbiAgICAvLyBBbHdheXMgc2Nyb2xsIHRvIHRoZSBtYXggdmFsdWUgaWYgc2Nyb2xsaW5nIHRvIHRoZSBOdGggaW5kZXhcbiAgICAvLyBNRENUYWJTY3JvbGxlci5zY3JvbGxUbygpIHdpbGwgbmV2ZXIgc2Nyb2xsIHBhc3QgdGhlIG1heCBwb3NzaWJsZSB2YWx1ZVxuICAgIGlmIChpbmRleCA9PT0gdGhpcy5hZGFwdGVyXy5nZXRUYWJMaXN0TGVuZ3RoKCkgLSAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGFwdGVyXy5zY3JvbGxUbyh0aGlzLmFkYXB0ZXJfLmdldFNjcm9sbENvbnRlbnRXaWR0aCgpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1JUTF8oKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsSW50b1ZpZXdSVExfKGluZGV4KTtcbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbEludG9WaWV3XyhpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZSBtZXRob2QgZm9yIGRldGVybWluaW5nIHRoZSBpbmRleCBvZiB0aGUgZGVzdGluYXRpb24gdGFiIGJhc2VkIG9uIHdoYXQga2V5IHdhcyBwcmVzc2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvcmlnaW4gVGhlIG9yaWdpbmFsIGluZGV4IGZyb20gd2hpY2ggdG8gZGV0ZXJtaW5lIHRoZSBkZXN0aW5hdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBuYW1lIG9mIHRoZSBrZXlcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGV0ZXJtaW5lVGFyZ2V0RnJvbUtleV8ob3JpZ2luLCBrZXkpIHtcbiAgICBjb25zdCBpc1JUTCA9IHRoaXMuaXNSVExfKCk7XG4gICAgY29uc3QgbWF4SW5kZXggPSB0aGlzLmFkYXB0ZXJfLmdldFRhYkxpc3RMZW5ndGgoKSAtIDE7XG4gICAgY29uc3Qgc2hvdWxkR29Ub0VuZCA9IGtleSA9PT0gc3RyaW5ncy5FTkRfS0VZO1xuICAgIGNvbnN0IHNob3VsZERlY3JlbWVudCA9IGtleSA9PT0gc3RyaW5ncy5BUlJPV19MRUZUX0tFWSAmJiAhaXNSVEwgfHwga2V5ID09PSBzdHJpbmdzLkFSUk9XX1JJR0hUX0tFWSAmJiBpc1JUTDtcbiAgICBjb25zdCBzaG91bGRJbmNyZW1lbnQgPSBrZXkgPT09IHN0cmluZ3MuQVJST1dfUklHSFRfS0VZICYmICFpc1JUTCB8fCBrZXkgPT09IHN0cmluZ3MuQVJST1dfTEVGVF9LRVkgJiYgaXNSVEw7XG4gICAgbGV0IGluZGV4ID0gb3JpZ2luO1xuXG4gICAgaWYgKHNob3VsZEdvVG9FbmQpIHtcbiAgICAgIGluZGV4ID0gbWF4SW5kZXg7XG4gICAgfSBlbHNlIGlmIChzaG91bGREZWNyZW1lbnQpIHtcbiAgICAgIGluZGV4IC09IDE7XG4gICAgfSBlbHNlIGlmIChzaG91bGRJbmNyZW1lbnQpIHtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBpbmRleCA9IG1heEluZGV4O1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPiBtYXhJbmRleCkge1xuICAgICAgaW5kZXggPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzY3JvbGwgaW5jcmVtZW50IHRoYXQgd2lsbCBtYWtlIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4IHZpc2libGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgdGFiXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXh0SW5kZXggVGhlIGluZGV4IG9mIHRoZSBuZXh0IHRhYlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsUG9zaXRpb24gVGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiYXJXaWR0aCBUaGUgd2lkdGggb2YgdGhlIFRhYiBCYXJcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsY3VsYXRlU2Nyb2xsSW5jcmVtZW50XyhpbmRleCwgbmV4dEluZGV4LCBzY3JvbGxQb3NpdGlvbiwgYmFyV2lkdGgpIHtcbiAgICBjb25zdCBuZXh0VGFiRGltZW5zaW9ucyA9IHRoaXMuYWRhcHRlcl8uZ2V0VGFiRGltZW5zaW9uc0F0SW5kZXgobmV4dEluZGV4KTtcbiAgICBjb25zdCByZWxhdGl2ZUNvbnRlbnRMZWZ0ID0gbmV4dFRhYkRpbWVuc2lvbnMuY29udGVudExlZnQgLSBzY3JvbGxQb3NpdGlvbiAtIGJhcldpZHRoO1xuICAgIGNvbnN0IHJlbGF0aXZlQ29udGVudFJpZ2h0ID0gbmV4dFRhYkRpbWVuc2lvbnMuY29udGVudFJpZ2h0IC0gc2Nyb2xsUG9zaXRpb247XG4gICAgY29uc3QgbGVmdEluY3JlbWVudCA9IHJlbGF0aXZlQ29udGVudFJpZ2h0IC0gbnVtYmVycy5FWFRSQV9TQ1JPTExfQU1PVU5UO1xuICAgIGNvbnN0IHJpZ2h0SW5jcmVtZW50ID0gcmVsYXRpdmVDb250ZW50TGVmdCArIG51bWJlcnMuRVhUUkFfU0NST0xMX0FNT1VOVDtcblxuICAgIGlmIChuZXh0SW5kZXggPCBpbmRleCkge1xuICAgICAgcmV0dXJuIE1hdGgubWluKGxlZnRJbmNyZW1lbnQsIDApO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLm1heChyaWdodEluY3JlbWVudCwgMCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgc2Nyb2xsIGluY3JlbWVudCB0aGF0IHdpbGwgbWFrZSB0aGUgdGFiIGF0IHRoZSBnaXZlbiBpbmRleCB2aXNpYmxlIGluIFJUTFxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSB0YWJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG5leHRJbmRleCBUaGUgaW5kZXggb2YgdGhlIG5leHQgdGFiXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxQb3NpdGlvbiBUaGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJhcldpZHRoIFRoZSB3aWR0aCBvZiB0aGUgVGFiIEJhclxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsQ29udGVudFdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsIGNvbnRlbnRcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FsY3VsYXRlU2Nyb2xsSW5jcmVtZW50UlRMXyhpbmRleCwgbmV4dEluZGV4LCBzY3JvbGxQb3NpdGlvbiwgYmFyV2lkdGgsIHNjcm9sbENvbnRlbnRXaWR0aCkge1xuICAgIGNvbnN0IG5leHRUYWJEaW1lbnNpb25zID0gdGhpcy5hZGFwdGVyXy5nZXRUYWJEaW1lbnNpb25zQXRJbmRleChuZXh0SW5kZXgpO1xuICAgIGNvbnN0IHJlbGF0aXZlQ29udGVudExlZnQgPSBzY3JvbGxDb250ZW50V2lkdGggLSBuZXh0VGFiRGltZW5zaW9ucy5jb250ZW50TGVmdCAtIHNjcm9sbFBvc2l0aW9uO1xuICAgIGNvbnN0IHJlbGF0aXZlQ29udGVudFJpZ2h0ID0gc2Nyb2xsQ29udGVudFdpZHRoIC0gbmV4dFRhYkRpbWVuc2lvbnMuY29udGVudFJpZ2h0IC0gc2Nyb2xsUG9zaXRpb24gLSBiYXJXaWR0aDtcbiAgICBjb25zdCBsZWZ0SW5jcmVtZW50ID0gcmVsYXRpdmVDb250ZW50UmlnaHQgKyBudW1iZXJzLkVYVFJBX1NDUk9MTF9BTU9VTlQ7XG4gICAgY29uc3QgcmlnaHRJbmNyZW1lbnQgPSByZWxhdGl2ZUNvbnRlbnRMZWZ0IC0gbnVtYmVycy5FWFRSQV9TQ1JPTExfQU1PVU5UO1xuXG4gICAgaWYgKG5leHRJbmRleCA+IGluZGV4KSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgobGVmdEluY3JlbWVudCwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGgubWluKHJpZ2h0SW5jcmVtZW50LCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBpbmRleCBvZiB0aGUgYWRqYWNlbnQgdGFiIGNsb3Nlc3QgdG8gZWl0aGVyIGVkZ2Ugb2YgdGhlIFRhYiBCYXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgdGFiXG4gICAqIEBwYXJhbSB7IU1EQ1RhYkRpbWVuc2lvbnN9IHRhYkRpbWVuc2lvbnMgVGhlIGRpbWVuc2lvbnMgb2YgdGhlIHRhYlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Nyb2xsUG9zaXRpb24gVGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiYXJXaWR0aCBUaGUgd2lkdGggb2YgdGhlIHRhYiBiYXJcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZmluZEFkamFjZW50VGFiSW5kZXhDbG9zZXN0VG9FZGdlXyhpbmRleCwgdGFiRGltZW5zaW9ucywgc2Nyb2xsUG9zaXRpb24sIGJhcldpZHRoKSB7XG4gICAgLyoqXG4gICAgICogVGFicyBhcmUgbGFpZCBvdXQgaW4gdGhlIFRhYiBTY3JvbGxlciBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiAgICBTY3JvbGwgUG9zaXRpb25cbiAgICAgKiAgICArLS0tK1xuICAgICAqICAgIHwgICB8ICAgQmFyIFdpZHRoXG4gICAgICogICAgfCAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICAgKiAgICB8ICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAqICAgIHwgICBWICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWXG4gICAgICogICAgfCAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICAgKiAgICBWICAgfCAgICAgICAgICAgICBUYWIgU2Nyb2xsZXIgICAgICAgICAgfFxuICAgICAqICAgICstLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICAgKiAgICB8ICAgIFRhYiAgICAgfCAgICAgIFRhYiAgICAgfCAgICAgICAgVGFiICAgICAgICB8XG4gICAgICogICAgKy0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgICAqICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICogICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICAgKlxuICAgICAqIFRvIGRldGVybWluZSB0aGUgbmV4dCBhZGphY2VudCBpbmRleCwgd2UgbG9vayBhdCB0aGUgVGFiIHJvb3QgbGVmdCBhbmRcbiAgICAgKiBUYWIgcm9vdCByaWdodCwgYm90aCByZWxhdGl2ZSB0byB0aGUgc2Nyb2xsIHBvc2l0aW9uLiBJZiB0aGUgVGFiIHJvb3RcbiAgICAgKiBsZWZ0IGlzIGxlc3MgdGhhbiAwLCB0aGVuIHdlIGtub3cgaXQncyBvdXQgb2YgdmlldyB0byB0aGUgbGVmdC4gSWYgdGhlXG4gICAgICogVGFiIHJvb3QgcmlnaHQgbWludXMgdGhlIGJhciB3aWR0aCBpcyBncmVhdGVyIHRoYW4gMCwgd2Uga25vdyB0aGUgVGFiIGlzXG4gICAgICogb3V0IG9mIHZpZXcgdG8gdGhlIHJpZ2h0LiBGcm9tIHRoZXJlLCB3ZSBlaXRoZXIgaW5jcmVtZW50IG9yIGRlY3JlbWVudFxuICAgICAqIHRoZSBpbmRleC5cbiAgICAgKi9cbiAgICBjb25zdCByZWxhdGl2ZVJvb3RMZWZ0ID0gdGFiRGltZW5zaW9ucy5yb290TGVmdCAtIHNjcm9sbFBvc2l0aW9uO1xuICAgIGNvbnN0IHJlbGF0aXZlUm9vdFJpZ2h0ID0gdGFiRGltZW5zaW9ucy5yb290UmlnaHQgLSBzY3JvbGxQb3NpdGlvbiAtIGJhcldpZHRoO1xuICAgIGNvbnN0IHJlbGF0aXZlUm9vdERlbHRhID0gcmVsYXRpdmVSb290TGVmdCArIHJlbGF0aXZlUm9vdFJpZ2h0O1xuICAgIGNvbnN0IGxlZnRFZGdlSXNDbG9zZXIgPSByZWxhdGl2ZVJvb3RMZWZ0IDwgMCB8fCByZWxhdGl2ZVJvb3REZWx0YSA8IDA7XG4gICAgY29uc3QgcmlnaHRFZGdlSXNDbG9zZXIgPSByZWxhdGl2ZVJvb3RSaWdodCA+IDAgfHwgcmVsYXRpdmVSb290RGVsdGEgPiAwO1xuXG4gICAgaWYgKGxlZnRFZGdlSXNDbG9zZXIpIHtcbiAgICAgIHJldHVybiBpbmRleCAtIDE7XG4gICAgfVxuXG4gICAgaWYgKHJpZ2h0RWRnZUlzQ2xvc2VyKSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBpbmRleCBvZiB0aGUgYWRqYWNlbnQgdGFiIGNsb3Nlc3QgdG8gZWl0aGVyIGVkZ2Ugb2YgdGhlIFRhYiBCYXIgaW4gUlRMXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHRhYlxuICAgKiBAcGFyYW0geyFNRENUYWJEaW1lbnNpb25zfSB0YWJEaW1lbnNpb25zIFRoZSBkaW1lbnNpb25zIG9mIHRoZSB0YWJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjcm9sbFBvc2l0aW9uIFRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gYmFyV2lkdGggVGhlIHdpZHRoIG9mIHRoZSB0YWIgYmFyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxDb250ZW50V2lkdGggVGhlIHdpZHRoIG9mIHRoZSBzY3JvbGxlciBjb250ZW50XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZpbmRBZGphY2VudFRhYkluZGV4Q2xvc2VzdFRvRWRnZVJUTF8oaW5kZXgsIHRhYkRpbWVuc2lvbnMsIHNjcm9sbFBvc2l0aW9uLCBiYXJXaWR0aCwgc2Nyb2xsQ29udGVudFdpZHRoKSB7XG4gICAgY29uc3Qgcm9vdExlZnQgPSBzY3JvbGxDb250ZW50V2lkdGggLSB0YWJEaW1lbnNpb25zLnJvb3RMZWZ0IC0gYmFyV2lkdGggLSBzY3JvbGxQb3NpdGlvbjtcbiAgICBjb25zdCByb290UmlnaHQgPSBzY3JvbGxDb250ZW50V2lkdGggLSB0YWJEaW1lbnNpb25zLnJvb3RSaWdodCAtIHNjcm9sbFBvc2l0aW9uO1xuICAgIGNvbnN0IHJvb3REZWx0YSA9IHJvb3RMZWZ0ICsgcm9vdFJpZ2h0O1xuICAgIGNvbnN0IGxlZnRFZGdlSXNDbG9zZXIgPSByb290TGVmdCA+IDAgfHwgcm9vdERlbHRhID4gMDtcbiAgICBjb25zdCByaWdodEVkZ2VJc0Nsb3NlciA9IHJvb3RSaWdodCA8IDAgfHwgcm9vdERlbHRhIDwgMDtcblxuICAgIGlmIChsZWZ0RWRnZUlzQ2xvc2VyKSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cblxuICAgIGlmIChyaWdodEVkZ2VJc0Nsb3Nlcikge1xuICAgICAgcmV0dXJuIGluZGV4IC0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUga2V5IGFzc29jaWF0ZWQgd2l0aCBhIGtleWRvd24gZXZlbnRcbiAgICogQHBhcmFtIHshRXZlbnR9IGV2dCBUaGUga2V5ZG93biBldmVudFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRLZXlGcm9tRXZlbnRfKGV2dCkge1xuICAgIGlmIChBQ0NFUFRBQkxFX0tFWVMuaGFzKGV2dC5rZXkpKSB7XG4gICAgICByZXR1cm4gZXZ0LmtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gS0VZQ09ERV9NQVAuZ2V0KGV2dC5rZXlDb2RlKTtcbiAgfVxuXG4gIGlzQWN0aXZhdGlvbktleV8oa2V5KSB7XG4gICAgcmV0dXJuIGtleSA9PT0gc3RyaW5ncy5TUEFDRV9LRVkgfHwga2V5ID09PSBzdHJpbmdzLkVOVEVSX0tFWTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBnaXZlbiBpbmRleCBpcyBpbmNsdXNpdmVseSBiZXR3ZWVuIHRoZSBlbmRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggdG8gdGVzdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaW5kZXhJc0luUmFuZ2VfKGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLmFkYXB0ZXJfLmdldFRhYkxpc3RMZW5ndGgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2aWV3J3MgUlRMIHByb3BlcnR5XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc1JUTF8oKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcl8uaXNSVEwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4IGludG8gdmlldyBmb3IgbGVmdC10by1yaWdodCB1c2VyYWdlbnRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHRhYiB0byBzY3JvbGwgaW50byB2aWV3XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzY3JvbGxJbnRvVmlld18oaW5kZXgpIHtcbiAgICBjb25zdCBzY3JvbGxQb3NpdGlvbiA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICBjb25zdCBiYXJXaWR0aCA9IHRoaXMuYWRhcHRlcl8uZ2V0T2Zmc2V0V2lkdGgoKTtcbiAgICBjb25zdCB0YWJEaW1lbnNpb25zID0gdGhpcy5hZGFwdGVyXy5nZXRUYWJEaW1lbnNpb25zQXRJbmRleChpbmRleCk7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gdGhpcy5maW5kQWRqYWNlbnRUYWJJbmRleENsb3Nlc3RUb0VkZ2VfKGluZGV4LCB0YWJEaW1lbnNpb25zLCBzY3JvbGxQb3NpdGlvbiwgYmFyV2lkdGgpO1xuXG4gICAgaWYgKCF0aGlzLmluZGV4SXNJblJhbmdlXyhuZXh0SW5kZXgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2Nyb2xsSW5jcmVtZW50ID0gdGhpcy5jYWxjdWxhdGVTY3JvbGxJbmNyZW1lbnRfKGluZGV4LCBuZXh0SW5kZXgsIHNjcm9sbFBvc2l0aW9uLCBiYXJXaWR0aCk7XG4gICAgdGhpcy5hZGFwdGVyXy5pbmNyZW1lbnRTY3JvbGwoc2Nyb2xsSW5jcmVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4IGludG8gdmlldyBpbiBSVExcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSB0YWIgaW5kZXggdG8gbWFrZSB2aXNpYmxlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzY3JvbGxJbnRvVmlld1JUTF8oaW5kZXgpIHtcbiAgICBjb25zdCBzY3JvbGxQb3NpdGlvbiA9IHRoaXMuYWRhcHRlcl8uZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICBjb25zdCBiYXJXaWR0aCA9IHRoaXMuYWRhcHRlcl8uZ2V0T2Zmc2V0V2lkdGgoKTtcbiAgICBjb25zdCB0YWJEaW1lbnNpb25zID0gdGhpcy5hZGFwdGVyXy5nZXRUYWJEaW1lbnNpb25zQXRJbmRleChpbmRleCk7XG4gICAgY29uc3Qgc2Nyb2xsV2lkdGggPSB0aGlzLmFkYXB0ZXJfLmdldFNjcm9sbENvbnRlbnRXaWR0aCgpO1xuICAgIGNvbnN0IG5leHRJbmRleCA9IHRoaXMuZmluZEFkamFjZW50VGFiSW5kZXhDbG9zZXN0VG9FZGdlUlRMXyhcbiAgICAgIGluZGV4LCB0YWJEaW1lbnNpb25zLCBzY3JvbGxQb3NpdGlvbiwgYmFyV2lkdGgsIHNjcm9sbFdpZHRoKTtcblxuICAgIGlmICghdGhpcy5pbmRleElzSW5SYW5nZV8obmV4dEluZGV4KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNjcm9sbEluY3JlbWVudCA9IHRoaXMuY2FsY3VsYXRlU2Nyb2xsSW5jcmVtZW50UlRMXyhpbmRleCwgbmV4dEluZGV4LCBzY3JvbGxQb3NpdGlvbiwgYmFyV2lkdGgsIHNjcm9sbFdpZHRoKTtcbiAgICB0aGlzLmFkYXB0ZXJfLmluY3JlbWVudFNjcm9sbChzY3JvbGxJbmNyZW1lbnQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RhYkJhckZvdW5kYXRpb247XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IE1EQ0NvbXBvbmVudCBmcm9tICdAbWF0ZXJpYWwvYmFzZS9jb21wb25lbnQnO1xuXG5pbXBvcnQge01EQ1RhYiwgTURDVGFiRm91bmRhdGlvbn0gZnJvbSAnQG1hdGVyaWFsL3RhYi9pbmRleCc7XG5pbXBvcnQge01EQ1RhYlNjcm9sbGVyfSBmcm9tICdAbWF0ZXJpYWwvdGFiLXNjcm9sbGVyL2luZGV4JztcblxuaW1wb3J0IE1EQ1RhYkJhckFkYXB0ZXIgZnJvbSAnLi9hZGFwdGVyJztcbmltcG9ydCBNRENUYWJCYXJGb3VuZGF0aW9uIGZyb20gJy4vZm91bmRhdGlvbic7XG5cbi8qKlxuICogQGV4dGVuZHMge01EQ0NvbXBvbmVudDwhTURDVGFiQmFyRm91bmRhdGlvbj59XG4gKiBAZmluYWxcbiAqL1xuY2xhc3MgTURDVGFiQmFyIGV4dGVuZHMgTURDQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Li4uP30gYXJnc1xuICAgKi9cbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgLyoqIEBwcml2YXRlIHshQXJyYXk8IU1EQ1RhYj59ICovXG4gICAgdGhpcy50YWJMaXN0XztcblxuICAgIC8qKiBAdHlwZSB7KGZ1bmN0aW9uKCFFbGVtZW50KTogIU1EQ1RhYil9ICovXG4gICAgdGhpcy50YWJGYWN0b3J5XztcblxuICAgIC8qKiBAcHJpdmF0ZSB7P01EQ1RhYlNjcm9sbGVyfSAqL1xuICAgIHRoaXMudGFiU2Nyb2xsZXJfO1xuXG4gICAgLyoqIEB0eXBlIHsoZnVuY3Rpb24oIUVsZW1lbnQpOiAhTURDVGFiU2Nyb2xsZXIpfSAqL1xuICAgIHRoaXMudGFiU2Nyb2xsZXJGYWN0b3J5XztcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKD9FdmVudCk6IHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmhhbmRsZVRhYkludGVyYWN0aW9uXztcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKD9FdmVudCk6IHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmhhbmRsZUtleURvd25fO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RcbiAgICogQHJldHVybiB7IU1EQ1RhYkJhcn1cbiAgICovXG4gIHN0YXRpYyBhdHRhY2hUbyhyb290KSB7XG4gICAgcmV0dXJuIG5ldyBNRENUYWJCYXIocm9vdCk7XG4gIH1cblxuICBzZXQgdXNlQXV0b21hdGljQWN0aXZhdGlvbih1c2VBdXRvbWF0aWNBY3RpdmF0aW9uKSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zZXRVc2VBdXRvbWF0aWNBY3RpdmF0aW9uKHVzZUF1dG9tYXRpY0FjdGl2YXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCFFbGVtZW50KTogIU1EQ1RhYik9fSB0YWJGYWN0b3J5IEEgZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBNRENUYWJcbiAgICogQHBhcmFtIHsoZnVuY3Rpb24oIUVsZW1lbnQpOiAhTURDVGFiU2Nyb2xsZXIpPX0gdGFiU2Nyb2xsZXJGYWN0b3J5IEEgZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBNRENUYWJTY3JvbGxlclxuICAgKi9cbiAgaW5pdGlhbGl6ZShcbiAgICB0YWJGYWN0b3J5ID0gKGVsKSA9PiBuZXcgTURDVGFiKGVsKSxcbiAgICB0YWJTY3JvbGxlckZhY3RvcnkgPSAoZWwpID0+IG5ldyBNRENUYWJTY3JvbGxlcihlbCksXG4gICkge1xuICAgIHRoaXMudGFiRmFjdG9yeV8gPSB0YWJGYWN0b3J5O1xuICAgIHRoaXMudGFiU2Nyb2xsZXJGYWN0b3J5XyA9IHRhYlNjcm9sbGVyRmFjdG9yeTtcblxuICAgIHRoaXMudGFiTGlzdF8gPSB0aGlzLmdldFRhYkVsZW1lbnRzXygpLm1hcCgoZWwpID0+IHRoaXMudGFiRmFjdG9yeV8oZWwpKTtcblxuICAgIGNvbnN0IHRhYlNjcm9sbGVyRWxlbWVudCA9IHRoaXMucm9vdF8ucXVlcnlTZWxlY3RvcihNRENUYWJCYXJGb3VuZGF0aW9uLnN0cmluZ3MuVEFCX1NDUk9MTEVSX1NFTEVDVE9SKTtcbiAgICBpZiAodGFiU2Nyb2xsZXJFbGVtZW50KSB7XG4gICAgICB0aGlzLnRhYlNjcm9sbGVyXyA9IHRoaXMudGFiU2Nyb2xsZXJGYWN0b3J5Xyh0YWJTY3JvbGxlckVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGluaXRpYWxTeW5jV2l0aERPTSgpIHtcbiAgICB0aGlzLmhhbmRsZVRhYkludGVyYWN0aW9uXyA9IChldnQpID0+IHRoaXMuZm91bmRhdGlvbl8uaGFuZGxlVGFiSW50ZXJhY3Rpb24oZXZ0KTtcbiAgICB0aGlzLmhhbmRsZUtleURvd25fID0gKGV2dCkgPT4gdGhpcy5mb3VuZGF0aW9uXy5oYW5kbGVLZXlEb3duKGV2dCk7XG5cbiAgICB0aGlzLnJvb3RfLmFkZEV2ZW50TGlzdGVuZXIoTURDVGFiRm91bmRhdGlvbi5zdHJpbmdzLklOVEVSQUNURURfRVZFTlQsIHRoaXMuaGFuZGxlVGFiSW50ZXJhY3Rpb25fKTtcbiAgICB0aGlzLnJvb3RfLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd25fKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50YWJMaXN0Xy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMudGFiTGlzdF9baV0uYWN0aXZlKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcoaSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIHRoaXMucm9vdF8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihNRENUYWJGb3VuZGF0aW9uLnN0cmluZ3MuSU5URVJBQ1RFRF9FVkVOVCwgdGhpcy5oYW5kbGVUYWJJbnRlcmFjdGlvbl8pO1xuICAgIHRoaXMucm9vdF8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bl8pO1xuICAgIHRoaXMudGFiTGlzdF8uZm9yRWFjaCgodGFiKSA9PiB0YWIuZGVzdHJveSgpKTtcbiAgICB0aGlzLnRhYlNjcm9sbGVyXy5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IU1EQ1RhYkJhckZvdW5kYXRpb259XG4gICAqL1xuICBnZXREZWZhdWx0Rm91bmRhdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE1EQ1RhYkJhckZvdW5kYXRpb24oXG4gICAgICAvKiogQHR5cGUgeyFNRENUYWJCYXJBZGFwdGVyfSAqLyAoe1xuICAgICAgICBzY3JvbGxUbzogKHNjcm9sbFgpID0+IHRoaXMudGFiU2Nyb2xsZXJfLnNjcm9sbFRvKHNjcm9sbFgpLFxuICAgICAgICBpbmNyZW1lbnRTY3JvbGw6IChzY3JvbGxYSW5jcmVtZW50KSA9PiB0aGlzLnRhYlNjcm9sbGVyXy5pbmNyZW1lbnRTY3JvbGwoc2Nyb2xsWEluY3JlbWVudCksXG4gICAgICAgIGdldFNjcm9sbFBvc2l0aW9uOiAoKSA9PiB0aGlzLnRhYlNjcm9sbGVyXy5nZXRTY3JvbGxQb3NpdGlvbigpLFxuICAgICAgICBnZXRTY3JvbGxDb250ZW50V2lkdGg6ICgpID0+IHRoaXMudGFiU2Nyb2xsZXJfLmdldFNjcm9sbENvbnRlbnRXaWR0aCgpLFxuICAgICAgICBnZXRPZmZzZXRXaWR0aDogKCkgPT4gdGhpcy5yb290Xy5vZmZzZXRXaWR0aCxcbiAgICAgICAgaXNSVEw6ICgpID0+IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMucm9vdF8pLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgICAgc2V0QWN0aXZlVGFiOiAoaW5kZXgpID0+IHRoaXMuZm91bmRhdGlvbl8uYWN0aXZhdGVUYWIoaW5kZXgpLFxuICAgICAgICBhY3RpdmF0ZVRhYkF0SW5kZXg6IChpbmRleCwgY2xpZW50UmVjdCkgPT4gdGhpcy50YWJMaXN0X1tpbmRleF0uYWN0aXZhdGUoY2xpZW50UmVjdCksXG4gICAgICAgIGRlYWN0aXZhdGVUYWJBdEluZGV4OiAoaW5kZXgpID0+IHRoaXMudGFiTGlzdF9baW5kZXhdLmRlYWN0aXZhdGUoKSxcbiAgICAgICAgZm9jdXNUYWJBdEluZGV4OiAoaW5kZXgpID0+IHRoaXMudGFiTGlzdF9baW5kZXhdLmZvY3VzKCksXG4gICAgICAgIGdldFRhYkluZGljYXRvckNsaWVudFJlY3RBdEluZGV4OiAoaW5kZXgpID0+IHRoaXMudGFiTGlzdF9baW5kZXhdLmNvbXB1dGVJbmRpY2F0b3JDbGllbnRSZWN0KCksXG4gICAgICAgIGdldFRhYkRpbWVuc2lvbnNBdEluZGV4OiAoaW5kZXgpID0+IHRoaXMudGFiTGlzdF9baW5kZXhdLmNvbXB1dGVEaW1lbnNpb25zKCksXG4gICAgICAgIGdldFByZXZpb3VzQWN0aXZlVGFiSW5kZXg6ICgpID0+IHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudGFiTGlzdF8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhYkxpc3RfW2ldLmFjdGl2ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9LFxuICAgICAgICBnZXRGb2N1c2VkVGFiSW5kZXg6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCB0YWJFbGVtZW50cyA9IHRoaXMuZ2V0VGFiRWxlbWVudHNfKCk7XG4gICAgICAgICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRhYkVsZW1lbnRzLmluZGV4T2YoYWN0aXZlRWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEluZGV4T2ZUYWI6ICh0YWJUb0ZpbmQpID0+IHRoaXMudGFiTGlzdF8uaW5kZXhPZih0YWJUb0ZpbmQpLFxuICAgICAgICBnZXRUYWJMaXN0TGVuZ3RoOiAoKSA9PiB0aGlzLnRhYkxpc3RfLmxlbmd0aCxcbiAgICAgICAgbm90aWZ5VGFiQWN0aXZhdGVkOiAoaW5kZXgpID0+IHRoaXMuZW1pdChNRENUYWJCYXJGb3VuZGF0aW9uLnN0cmluZ3MuVEFCX0FDVElWQVRFRF9FVkVOVCwge2luZGV4fSwgdHJ1ZSksXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHRhYlxuICAgKi9cbiAgYWN0aXZhdGVUYWIoaW5kZXgpIHtcbiAgICB0aGlzLmZvdW5kYXRpb25fLmFjdGl2YXRlVGFiKGluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY3JvbGxzIHRoZSB0YWIgYXQgdGhlIGdpdmVuIGluZGV4IGludG8gdmlld1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVEhlIGluZGV4IG9mIHRoZSB0YWJcbiAgICovXG4gIHNjcm9sbEludG9WaWV3KGluZGV4KSB7XG4gICAgdGhpcy5mb3VuZGF0aW9uXy5zY3JvbGxJbnRvVmlldyhpbmRleCk7XG4gIH1cblxuICBnZXRUYWJFbGVtZW50c18oKSB7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodGhpcy5yb290Xy5xdWVyeVNlbGVjdG9yQWxsKE1EQ1RhYkJhckZvdW5kYXRpb24uc3RyaW5ncy5UQUJfU0VMRUNUT1IpKTtcbiAgfVxufVxuXG5leHBvcnQge01EQ1RhYkJhciwgTURDVGFiQmFyRm91bmRhdGlvbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLlRhYkJhciA9IGV4cG9ydHMuVGFiID0gZXhwb3J0cy5UYWJJY29uID0gZXhwb3J0cy5UYWJMYWJlbCA9IHZvaWQgMDtcblxudmFyIF9nZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF90YWJCYXIgPSByZXF1aXJlKFwiQG1hdGVyaWFsL3RhYi1iYXJcIik7XG5cbnZhciBfcHJlYWN0ID0gcmVxdWlyZShcInByZWFjdFwiKTtcblxudmFyIF9NYXRlcmlhbENvbXBvbmVudDUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CYXNlL01hdGVyaWFsQ29tcG9uZW50XCIpKTtcblxudmFyIFRhYkxhYmVsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTWF0ZXJpYWxDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoVGFiTGFiZWwsIF9NYXRlcmlhbENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiTGFiZWwoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVGFiTGFiZWwpO1xuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShUYWJMYWJlbCkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgX3RoaXMuY29tcG9uZW50TmFtZSA9ICd0YWJfX3RleHQtbGFiZWwnO1xuICAgIF90aGlzLm1kY1Byb3BzID0gW107XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoVGFiTGFiZWwsIFt7XG4gICAga2V5OiBcIm1hdGVyaWFsRG9tXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGVyaWFsRG9tKHByb3BzKSB7XG4gICAgICByZXR1cm4gKDAsIF9wcmVhY3QuaCkoXCJzcGFuXCIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFiTGFiZWw7XG59KF9NYXRlcmlhbENvbXBvbmVudDUuZGVmYXVsdCk7XG5cbmV4cG9ydHMuVGFiTGFiZWwgPSBUYWJMYWJlbDtcblxudmFyIFRhYkljb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9NYXRlcmlhbENvbXBvbmVudDIpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoVGFiSWNvbiwgX01hdGVyaWFsQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gVGFiSWNvbigpIHtcbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVGFiSWNvbik7XG4gICAgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShUYWJJY29uKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBfdGhpczIuY29tcG9uZW50TmFtZSA9ICd0YWJfX2ljb24nO1xuICAgIF90aGlzMi5tZGNQcm9wcyA9IFtdO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShUYWJJY29uLCBbe1xuICAgIGtleTogXCJtYXRlcmlhbERvbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXRlcmlhbERvbShwcm9wcykge1xuICAgICAgcmV0dXJuICgwLCBfcHJlYWN0LmgpKFwic3BhblwiLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm1hdGVyaWFsLWljb25zXCJcbiAgICAgIH0sIHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFiSWNvbjtcbn0oX01hdGVyaWFsQ29tcG9uZW50NS5kZWZhdWx0KTtcblxuZXhwb3J0cy5UYWJJY29uID0gVGFiSWNvbjtcblxudmFyIFRhYiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01hdGVyaWFsQ29tcG9uZW50Mykge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUYWIsIF9NYXRlcmlhbENvbXBvbmVudDMpO1xuXG4gIGZ1bmN0aW9uIFRhYigpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVGFiKTtcbiAgICBfdGhpczMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRhYikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgX3RoaXMzLmNvbXBvbmVudE5hbWUgPSAndGFiJztcbiAgICBfdGhpczMubWRjUHJvcHMgPSBbJ2FjdGl2ZSddO1xuICAgIF90aGlzMy5tZGNOb3RpZnlQcm9wcyA9IFsnYWN0aXZlJ107XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFRhYiwgW3tcbiAgICBrZXk6IFwibWF0ZXJpYWxEb21cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF0ZXJpYWxEb20ocHJvcHMpIHtcbiAgICAgIHJldHVybiAoMCwgX3ByZWFjdC5oKShcImJ1dHRvblwiLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgY2xhc3M6IFwibWRjLXRhYlwiLFxuICAgICAgICByb2xlOiBcInRhYlwiLFxuICAgICAgICBcImFyaWEtc2VsZWN0ZWRcIjogXCJ0cnVlXCJcbiAgICAgIH0sIHByb3BzKSwgKDAsIF9wcmVhY3QuaCkoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3M6IFwibWRjLXRhYl9fY29udGVudFwiXG4gICAgICB9LCBwcm9wcy5jaGlsZHJlbiksICgwLCBfcHJlYWN0LmgpKFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzOiBcIm1kYy10YWItaW5kaWNhdG9yIFwiLmNvbmNhdChwcm9wcy5hY3RpdmUgPyAnbWRjLXRhYi1pbmRpY2F0b3ItLWFjdGl2ZScgOiAnJylcbiAgICAgIH0sICgwLCBfcHJlYWN0LmgpKFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzOiBcIm1kYy10YWItaW5kaWNhdG9yX19jb250ZW50IG1kYy10YWItaW5kaWNhdG9yX19jb250ZW50LS11bmRlcmxpbmVcIlxuICAgICAgfSkpLCAoMCwgX3ByZWFjdC5oKShcInNwYW5cIiwge1xuICAgICAgICBjbGFzczogXCJtZGMtdGFiX19yaXBwbGVcIlxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFiO1xufShfTWF0ZXJpYWxDb21wb25lbnQ1LmRlZmF1bHQpO1xuXG5leHBvcnRzLlRhYiA9IFRhYjtcblxudmFyIFRhYkJhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01hdGVyaWFsQ29tcG9uZW50NCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUYWJCYXIsIF9NYXRlcmlhbENvbXBvbmVudDQpO1xuXG4gIGZ1bmN0aW9uIFRhYkJhcigpIHtcbiAgICB2YXIgX3RoaXM0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVGFiQmFyKTtcbiAgICBfdGhpczQgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRhYkJhcikuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgX3RoaXM0LmNvbXBvbmVudE5hbWUgPSAndGFiLWJhcic7XG4gICAgX3RoaXM0Lm1kY1Byb3BzID0gW107XG4gICAgX3RoaXM0Lm1kY05vdGlmeVByb3BzID0gWydhY3RpdmVUYWJJbmRleCddO1xuICAgIHJldHVybiBfdGhpczQ7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShUYWJCYXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgKDAsIF9nZXQyLmRlZmF1bHQpKCgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRhYkJhci5wcm90b3R5cGUpLCBcImNvbXBvbmVudERpZE1vdW50XCIsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgICAgdGhpcy5NRENvbXBvbmVudCA9IG5ldyBfdGFiQmFyLk1EQ1RhYkJhcih0aGlzLmNvbnRyb2wpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFmdGVyQ29tcG9uZW50RGlkTW91bnQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAoMCwgX2dldDIuZGVmYXVsdCkoKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVGFiQmFyLnByb3RvdHlwZSksIFwiY29tcG9uZW50V2lsbFVubW91bnRcIiwgdGhpcykuY2FsbCh0aGlzKTtcblxuICAgICAgaWYgKHRoaXMuTURDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5NRENvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1hdGVyaWFsRG9tXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGVyaWFsRG9tKHByb3BzKSB7XG4gICAgICByZXR1cm4gKDAsIF9wcmVhY3QuaCkoXCJkaXZcIiwge1xuICAgICAgICBjbGFzczogXCJtZGMtdGFiLWJhclwiLFxuICAgICAgICByb2xlOiBcInRhYmxpc3RcIixcbiAgICAgICAgcmVmOiB0aGlzLnNldENvbnRyb2xSZWZcbiAgICAgIH0sICgwLCBfcHJlYWN0LmgpKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3M6IFwibWRjLXRhYi1zY3JvbGxlclwiXG4gICAgICB9LCAoMCwgX3ByZWFjdC5oKShcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzOiBcIm1kYy10YWItc2Nyb2xsZXJfX3Njcm9sbC1hcmVhXCJcbiAgICAgIH0sICgwLCBfcHJlYWN0LmgpKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3M6IFwibWRjLXRhYi1zY3JvbGxlcl9fc2Nyb2xsLWNvbnRlbnRcIlxuICAgICAgfSwgcHJvcHMuY2hpbGRyZW4pKSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFiQmFyO1xufShfTWF0ZXJpYWxDb21wb25lbnQ1LmRlZmF1bHQpO1xuXG5leHBvcnRzLlRhYkJhciA9IFRhYkJhcjtcblxudmFyIGRlZmF1bHRfMSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1RhYkJhcikge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShkZWZhdWx0XzEsIF9UYWJCYXIpO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRfMSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBkZWZhdWx0XzEpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKGRlZmF1bHRfMSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdF8xO1xufShUYWJCYXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG5kZWZhdWx0XzEuVGFiID0gVGFiO1xuZGVmYXVsdF8xLlRhYkxhYmVsID0gVGFiTGFiZWw7XG5kZWZhdWx0XzEuVGFiSWNvbiA9IFRhYkljb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkxheW91dEdyaWQgPSBleHBvcnRzLkxheW91dEdyaWRDZWxsID0gZXhwb3J0cy5MYXlvdXRHcmlkSW5uZXIgPSB2b2lkIDA7XG5cbnZhciBfZ2V0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0XCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcHJlYWN0ID0gcmVxdWlyZShcInByZWFjdFwiKTtcblxudmFyIF9NYXRlcmlhbENvbXBvbmVudDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CYXNlL01hdGVyaWFsQ29tcG9uZW50XCIpKTtcblxudmFyIExheW91dEdyaWRJbm5lciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01hdGVyaWFsQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKExheW91dEdyaWRJbm5lciwgX01hdGVyaWFsQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMYXlvdXRHcmlkSW5uZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTGF5b3V0R3JpZElubmVyKTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTGF5b3V0R3JpZElubmVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBfdGhpcy5jb21wb25lbnROYW1lID0gJ2xheW91dC1ncmlkX19pbm5lcic7XG4gICAgX3RoaXMubWRjUHJvcHMgPSBbXTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShMYXlvdXRHcmlkSW5uZXIsIFt7XG4gICAga2V5OiBcIm1hdGVyaWFsRG9tXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGVyaWFsRG9tKHByb3BzKSB7XG4gICAgICByZXR1cm4gKDAsIF9wcmVhY3QuaCkoXCJkaXZcIiwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIHJlZjogdGhpcy5zZXRDb250cm9sUmVmXG4gICAgICB9LCBwcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIExheW91dEdyaWRJbm5lcjtcbn0oX01hdGVyaWFsQ29tcG9uZW50NC5kZWZhdWx0KTtcblxuZXhwb3J0cy5MYXlvdXRHcmlkSW5uZXIgPSBMYXlvdXRHcmlkSW5uZXI7XG5cbnZhciBMYXlvdXRHcmlkQ2VsbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01hdGVyaWFsQ29tcG9uZW50Mikge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShMYXlvdXRHcmlkQ2VsbCwgX01hdGVyaWFsQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gTGF5b3V0R3JpZENlbGwoKSB7XG4gICAgdmFyIF90aGlzMjtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIExheW91dEdyaWRDZWxsKTtcbiAgICBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKExheW91dEdyaWRDZWxsKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBfdGhpczIuY29tcG9uZW50TmFtZSA9ICdsYXlvdXQtZ3JpZF9fY2VsbCc7XG4gICAgX3RoaXMyLm1kY1Byb3BzID0gW107XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKExheW91dEdyaWRDZWxsLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKHByb3BzKSB7XG4gICAgICB2YXIgZWxlbWVudCA9ICgwLCBfZ2V0Mi5kZWZhdWx0KSgoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShMYXlvdXRHcmlkQ2VsbC5wcm90b3R5cGUpLCBcInJlbmRlclwiLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzKTsgLy8gcmVtb3ZlIHRoZSBleHRyYSBhdHRyaWJ1dGVzIHVzZWQgZm9yIGN1c3RvbWlzaW5nIHRoaXMgZWxlbWVudCAtIGtlZXAgdGhlIERPTSBjbGVhblxuXG4gICAgICBPYmplY3Qua2V5cyhMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gKC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBkZWxldGUgKGVsZW1lbnQucHJvcHMgfHwgZWxlbWVudC5hdHRyaWJ1dGVzKVtMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3Rba2V5XV1cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1hdGVyaWFsRG9tXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGVyaWFsRG9tKHByb3BzKSB7XG4gICAgICByZXR1cm4gKDAsIF9wcmVhY3QuaCkoXCJkaXZcIiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBMYXlvdXRHcmlkQ2VsbC5jcmVhdGVDbGFzc05hbWUocHJvcHMpLFxuICAgICAgICByZWY6IHRoaXMuc2V0Q29udHJvbFJlZlxuICAgICAgfSksIHByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJjcmVhdGVDbGFzc05hbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ2xhc3NOYW1lKHByb3BzKSB7XG4gICAgICB2YXIgYmFzZUNsYXNzID0gJ21kYy1sYXlvdXQtZ3JpZF9fY2VsbC0tJztcbiAgICAgIHZhciBjbGFzc2VzID0gW107XG5cbiAgICAgIGlmIChwcm9wc1tMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3QuY29sc10pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwiXCIuY29uY2F0KGJhc2VDbGFzcywgXCJzcGFuLVwiKS5jb25jYXQocHJvcHNbTGF5b3V0R3JpZENlbGwucHJvcHNEaWN0LmNvbHNdKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wc1tMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3QuZGVza3RvcF0pIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFwiXCIuY29uY2F0KGJhc2VDbGFzcywgXCJzcGFuLVwiKS5jb25jYXQocHJvcHNbTGF5b3V0R3JpZENlbGwucHJvcHNEaWN0LmRlc2t0b3BdLCBcIi1kZXNrdG9wXCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BzW0xheW91dEdyaWRDZWxsLnByb3BzRGljdC50YWJsZXRdKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcIlwiLmNvbmNhdChiYXNlQ2xhc3MsIFwic3Bhbi1cIikuY29uY2F0KHByb3BzW0xheW91dEdyaWRDZWxsLnByb3BzRGljdC50YWJsZXRdLCBcIi10YWJsZXRcIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcHNbTGF5b3V0R3JpZENlbGwucHJvcHNEaWN0LnBob25lXSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goXCJcIi5jb25jYXQoYmFzZUNsYXNzLCBcInNwYW4tXCIpLmNvbmNhdChwcm9wc1tMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3QucGhvbmVdLCBcIi1waG9uZVwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wc1tMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3Qub3JkZXJdKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcIlwiLmNvbmNhdChiYXNlQ2xhc3MsIFwib3JkZXItXCIpLmNvbmNhdChwcm9wc1tMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3Qub3JkZXJdKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wc1tMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3QuYWxpZ25dKSB7XG4gICAgICAgIGNsYXNzZXMucHVzaChcIlwiLmNvbmNhdChiYXNlQ2xhc3MsIFwiYWxpZ24tXCIpLmNvbmNhdChwcm9wc1tMYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3QuYWxpZ25dKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIExheW91dEdyaWRDZWxsO1xufShfTWF0ZXJpYWxDb21wb25lbnQ0LmRlZmF1bHQpO1xuXG5leHBvcnRzLkxheW91dEdyaWRDZWxsID0gTGF5b3V0R3JpZENlbGw7XG5MYXlvdXRHcmlkQ2VsbC5wcm9wc0RpY3QgPSB7XG4gIGFsaWduOiAnYWxpZ24nLFxuICBjb2xzOiAnY29scycsXG4gIGRlc2t0b3A6ICdkZXNrdG9wQ29scycsXG4gIG9yZGVyOiAnb3JkZXInLFxuICBwaG9uZTogJ3Bob25lQ29scycsXG4gIHRhYmxldDogJ3RhYmxldENvbHMnXG59O1xuXG52YXIgTGF5b3V0R3JpZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX01hdGVyaWFsQ29tcG9uZW50Mykge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShMYXlvdXRHcmlkLCBfTWF0ZXJpYWxDb21wb25lbnQzKTtcblxuICBmdW5jdGlvbiBMYXlvdXRHcmlkKCkge1xuICAgIHZhciBfdGhpczM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBMYXlvdXRHcmlkKTtcbiAgICBfdGhpczMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKExheW91dEdyaWQpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIF90aGlzMy5jb21wb25lbnROYW1lID0gJ2xheW91dC1ncmlkJztcbiAgICBfdGhpczMubWRjUHJvcHMgPSBbXTtcbiAgICByZXR1cm4gX3RoaXMzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTGF5b3V0R3JpZCwgW3tcbiAgICBrZXk6IFwibWF0ZXJpYWxEb21cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF0ZXJpYWxEb20ocHJvcHMpIHtcbiAgICAgIHJldHVybiAoMCwgX3ByZWFjdC5oKShcImRpdlwiLCBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgcmVmOiB0aGlzLnNldENvbnRyb2xSZWZcbiAgICAgIH0sIHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGF5b3V0R3JpZDtcbn0oX01hdGVyaWFsQ29tcG9uZW50NC5kZWZhdWx0KTtcblxuZXhwb3J0cy5MYXlvdXRHcmlkID0gTGF5b3V0R3JpZDtcblxudmFyIGRlZmF1bHRfMSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0xheW91dEdyaWQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoZGVmYXVsdF8xLCBfTGF5b3V0R3JpZCk7XG5cbiAgZnVuY3Rpb24gZGVmYXVsdF8xKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIGRlZmF1bHRfMSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoZGVmYXVsdF8xKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0XzE7XG59KExheW91dEdyaWQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG5kZWZhdWx0XzEuQ2VsbCA9IExheW91dEdyaWRDZWxsO1xuZGVmYXVsdF8xLklubmVyID0gTGF5b3V0R3JpZElubmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsIi8qKlxyXG4gKiBQYXJzZXMgYW4gVVJJXHJcbiAqXHJcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XHJcblxyXG52YXIgcGFydHMgPSBbXHJcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XHJcbiAgICB2YXIgc3JjID0gc3RyLFxyXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxyXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxyXG4gICAgICAgIHVyaSA9IHt9LFxyXG4gICAgICAgIGkgPSAxNDtcclxuXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XHJcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmk7XHJcbn07XHJcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cblxuZnVuY3Rpb24gc2V0dXAoZW52KSB7XG5cdGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmRlZmF1bHQgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuY29lcmNlID0gY29lcmNlO1xuXHRjcmVhdGVEZWJ1Zy5kaXNhYmxlID0gZGlzYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlID0gZW5hYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGVkID0gZW5hYmxlZDtcblx0Y3JlYXRlRGVidWcuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0Ly8gRGVidWcuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5cdFx0Ly8gZGVidWcucmF3TG9nID0gcmF3TG9nO1xuXG5cdFx0Ly8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc3QgaW5kZXggPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBpbnN0YW5jZSA9IGNyZWF0ZURlYnVnLmluc3RhbmNlc1tpXTtcblx0XHRcdGluc3RhbmNlLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcy5tYXAodG9OYW1lc3BhY2UpLFxuXHRcdFx0Li4uY3JlYXRlRGVidWcuc2tpcHMubWFwKHRvTmFtZXNwYWNlKS5tYXAobmFtZXNwYWNlID0+ICctJyArIG5hbWVzcGFjZSlcblx0XHRdLmpvaW4oJywnKTtcblx0XHRjcmVhdGVEZWJ1Zy5lbmFibGUoJycpO1xuXHRcdHJldHVybiBuYW1lc3BhY2VzO1xuXHR9XG5cblx0LyoqXG5cdCogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVcblx0KiBAcmV0dXJuIHtCb29sZWFufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuXHRcdGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0bGV0IGk7XG5cdFx0bGV0IGxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQqIENvbnZlcnQgcmVnZXhwIHRvIG5hbWVzcGFjZVxuXHQqXG5cdCogQHBhcmFtIHtSZWdFeHB9IHJlZ3hlcFxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHRvTmFtZXNwYWNlKHJlZ2V4cCkge1xuXHRcdHJldHVybiByZWdleHAudG9TdHJpbmcoKVxuXHRcdFx0LnN1YnN0cmluZygyLCByZWdleHAudG9TdHJpbmcoKS5sZW5ndGggLSAyKVxuXHRcdFx0LnJlcGxhY2UoL1xcLlxcKlxcPyQvLCAnKicpO1xuXHR9XG5cblx0LyoqXG5cdCogQ29lcmNlIGB2YWxgLlxuXHQqXG5cdCogQHBhcmFtIHtNaXhlZH0gdmFsXG5cdCogQHJldHVybiB7TWl4ZWR9XG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcblx0XHRpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHQvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuXHRyZXR1cm4gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG5cdFx0Y29uc29sZS5sb2cgJiZcblx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2V1cmkgPSByZXF1aXJlKCdwYXJzZXVyaScpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDp1cmwnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVybDtcblxuLyoqXG4gKiBVUkwgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7T2JqZWN0fSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLlxuICogICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdXJsICh1cmksIGxvYykge1xuICB2YXIgb2JqID0gdXJpO1xuXG4gIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uXG4gIGxvYyA9IGxvYyB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhdGlvbik7XG4gIGlmIChudWxsID09IHVyaSkgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIGxvYy5ob3N0O1xuXG4gIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB1cmkpIHtcbiAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDApKSB7XG4gICAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XG4gICAgICBkZWJ1ZygncHJvdG9jb2wtbGVzcyB1cmwgJXMnLCB1cmkpO1xuICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSAnaHR0cHM6Ly8nICsgdXJpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHBhcnNlXG4gICAgZGVidWcoJ3BhcnNlICVzJywgdXJpKTtcbiAgICBvYmogPSBwYXJzZXVyaSh1cmkpO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XG4gIGlmICghb2JqLnBvcnQpIHtcbiAgICBpZiAoL14oaHR0cHx3cykkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzgwJztcbiAgICB9IGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnNDQzJztcbiAgICB9XG4gIH1cblxuICBvYmoucGF0aCA9IG9iai5wYXRoIHx8ICcvJztcblxuICB2YXIgaXB2NiA9IG9iai5ob3N0LmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHZhciBob3N0ID0gaXB2NiA/ICdbJyArIG9iai5ob3N0ICsgJ10nIDogb2JqLmhvc3Q7XG5cbiAgLy8gZGVmaW5lIHVuaXF1ZSBpZFxuICBvYmouaWQgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAnOicgKyBvYmoucG9ydDtcbiAgLy8gZGVmaW5lIGhyZWZcbiAgb2JqLmhyZWYgPSBvYmoucHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/ICcnIDogKCc6JyArIG9iai5wb3J0KSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJyMwMDAwQ0MnLCAnIzAwMDBGRicsICcjMDAzM0NDJywgJyMwMDMzRkYnLCAnIzAwNjZDQycsICcjMDA2NkZGJywgJyMwMDk5Q0MnLFxuICAnIzAwOTlGRicsICcjMDBDQzAwJywgJyMwMENDMzMnLCAnIzAwQ0M2NicsICcjMDBDQzk5JywgJyMwMENDQ0MnLCAnIzAwQ0NGRicsXG4gICcjMzMwMENDJywgJyMzMzAwRkYnLCAnIzMzMzNDQycsICcjMzMzM0ZGJywgJyMzMzY2Q0MnLCAnIzMzNjZGRicsICcjMzM5OUNDJyxcbiAgJyMzMzk5RkYnLCAnIzMzQ0MwMCcsICcjMzNDQzMzJywgJyMzM0NDNjYnLCAnIzMzQ0M5OScsICcjMzNDQ0NDJywgJyMzM0NDRkYnLFxuICAnIzY2MDBDQycsICcjNjYwMEZGJywgJyM2NjMzQ0MnLCAnIzY2MzNGRicsICcjNjZDQzAwJywgJyM2NkNDMzMnLCAnIzk5MDBDQycsXG4gICcjOTkwMEZGJywgJyM5OTMzQ0MnLCAnIzk5MzNGRicsICcjOTlDQzAwJywgJyM5OUNDMzMnLCAnI0NDMDAwMCcsICcjQ0MwMDMzJyxcbiAgJyNDQzAwNjYnLCAnI0NDMDA5OScsICcjQ0MwMENDJywgJyNDQzAwRkYnLCAnI0NDMzMwMCcsICcjQ0MzMzMzJywgJyNDQzMzNjYnLFxuICAnI0NDMzM5OScsICcjQ0MzM0NDJywgJyNDQzMzRkYnLCAnI0NDNjYwMCcsICcjQ0M2NjMzJywgJyNDQzk5MDAnLCAnI0NDOTkzMycsXG4gICcjQ0NDQzAwJywgJyNDQ0NDMzMnLCAnI0ZGMDAwMCcsICcjRkYwMDMzJywgJyNGRjAwNjYnLCAnI0ZGMDA5OScsICcjRkYwMENDJyxcbiAgJyNGRjAwRkYnLCAnI0ZGMzMwMCcsICcjRkYzMzMzJywgJyNGRjMzNjYnLCAnI0ZGMzM5OScsICcjRkYzM0NDJywgJyNGRjMzRkYnLFxuICAnI0ZGNjYwMCcsICcjRkY2NjMzJywgJyNGRjk5MDAnLCAnI0ZGOTkzMycsICcjRkZDQzAwJywgJyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG4iLCJcclxuLyoqXHJcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXHJcbiAqL1xyXG5cclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyO1xyXG59XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRW1pdHRlcihvYmopIHtcclxuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XHJcbiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7XHJcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pXHJcbiAgICAucHVzaChmbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlXHJcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIGZ1bmN0aW9uIG9uKCkge1xyXG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcclxuICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBvbi5mbiA9IGZuO1xyXG4gIHRoaXMub24oZXZlbnQsIG9uKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbFxyXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub2ZmID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIC8vIGFsbFxyXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyBzcGVjaWZpYyBldmVudFxyXG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcclxuXHJcbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xyXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxyXG4gIHZhciBjYjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY2IgPSBjYWxsYmFja3NbaV07XHJcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdCBgZXZlbnRgIHdpdGggdGhlIGdpdmVuIGFyZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge01peGVkfSAuLi5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIlxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcbnZhciBpbml0ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGluaXQgKCkge1xuICBpbml0ZWQgPSB0cnVlO1xuICB2YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbiAgfVxuXG4gIHJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxuICByZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgaWYgKCFpbml0ZWQpIHtcbiAgICBpbml0KCk7XG4gIH1cbiAgdmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcGxhY2VIb2xkZXJzID0gYjY0W2xlbiAtIDJdID09PSAnPScgPyAyIDogYjY0W2xlbiAtIDFdID09PSAnPScgPyAxIDogMFxuXG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICBhcnIgPSBuZXcgQXJyKGxlbiAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIGlmICghaW5pdGVkKSB7XG4gICAgaW5pdCgpO1xuICB9XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIHJlYWQgKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGUgKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxuZXhwb3J0IGRlZmF1bHQgQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG5cbmltcG9ydCAqIGFzIGJhc2U2NCBmcm9tICcuL2Jhc2U2NCdcbmltcG9ydCAqIGFzIGllZWU3NTQgZnJvbSAnLi9pZWVlNzU0J1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5J1xuXG5leHBvcnQgdmFyIElOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0cnVlXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbnZhciBfa01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuZXhwb3J0IHtfa01heExlbmd0aCBhcyBrTWF4TGVuZ3RofTtcbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgcmV0dXJuIHRydWU7XG4gIC8vIHJvbGx1cCBpc3N1ZXNcbiAgLy8gdHJ5IHtcbiAgLy8gICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgLy8gICBhcnIuX19wcm90b19fID0ge1xuICAvLyAgICAgX19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSxcbiAgLy8gICAgIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAvLyAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAvLyAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICAvLyB9IGNhdGNoIChlKSB7XG4gIC8vICAgcmV0dXJuIGZhbHNlXG4gIC8vIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAvLyAgIHZhbHVlOiBudWxsLFxuICAgIC8vICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgLy8gfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cbkJ1ZmZlci5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuZnVuY3Rpb24gaW50ZXJuYWxJc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGEpIHx8ICFpbnRlcm5hbElzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIWludGVybmFsSXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKGludGVybmFsSXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKGludGVybmFsSXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gaW50ZXJuYWxJc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuXG4vLyB0aGUgZm9sbG93aW5nIGlzIGZyb20gaXMtYnVmZmVyLCBhbHNvIGJ5IEZlcm9zcyBBYm91a2hhZGlqZWggYW5kIHdpdGggc2FtZSBsaXNlbmNlXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoISFvYmouX2lzQnVmZmVyIHx8IGlzRmFzdEJ1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopKVxufVxuXG5mdW5jdGlvbiBpc0Zhc3RCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0Zhc3RCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbnZhciB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iaikgOiAob2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAgICAgICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhvYmopKSk7XG59XG4iLCIvKmdsb2JhbCBCbG9iLEZpbGUqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHNcbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJyk7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nKTtcblxuLyoqXG4gKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICogQW55dGhpbmcgd2l0aCBibG9icyBvciBmaWxlcyBzaG91bGQgYmUgZmVkIHRocm91Z2ggcmVtb3ZlQmxvYnMgYmVmb3JlIGNvbWluZ1xuICogaGVyZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCkge1xuICB2YXIgYnVmZmVycyA9IFtdO1xuICB2YXIgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgcGFjayA9IHBhY2tldDtcbiAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICByZXR1cm4ge3BhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVyc307XG59O1xuXG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChpc0J1ZihkYXRhKSkge1xuICAgIHZhciBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgdmFyIG5ld0RhdGEgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgYnVmZmVycykge1xuICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gIHBhY2tldC5hdHRhY2htZW50cyA9IHVuZGVmaW5lZDsgLy8gbm8gbG9uZ2VyIHVzZWZ1bFxuICByZXR1cm4gcGFja2V0O1xufTtcblxuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHJlbW92ZXMgQmxvYnMgb3IgRmlsZXMgZnJvbSBkYXRhIHZpYVxuICogRmlsZVJlYWRlcidzIHJlYWRBc0FycmF5QnVmZmVyIG1ldGhvZC4gVXNlZCBiZWZvcmUgZW5jb2RpbmdcbiAqIGRhdGEgYXMgbXNncGFjay4gQ2FsbHMgY2FsbGJhY2sgd2l0aCB0aGUgYmxvYmxlc3MgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucmVtb3ZlQmxvYnMgPSBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBfcmVtb3ZlQmxvYnMob2JqLCBjdXJLZXksIGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcblxuICAgIC8vIGNvbnZlcnQgYW55IGJsb2JcbiAgICBpZiAoKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKSkge1xuICAgICAgcGVuZGluZ0Jsb2JzKys7XG5cbiAgICAgIC8vIGFzeW5jIGZpbGVyZWFkZXJcbiAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7IC8vIHRoaXMucmVzdWx0ID09IGFycmF5YnVmZmVyXG4gICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0KSB7XG4gICAgICAgICAgY29udGFpbmluZ09iamVjdFtjdXJLZXldID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYmxvYmxlc3NEYXRhID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBub3RoaW5nIHBlbmRpbmcgaXRzIGNhbGxiYWNrIHRpbWVcbiAgICAgICAgaWYoISAtLXBlbmRpbmdCbG9icykge1xuICAgICAgICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIob2JqKTsgLy8gYmxvYiAtPiBhcnJheWJ1ZmZlclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopKSB7IC8vIGhhbmRsZSBhcnJheVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFpc0J1ZihvYmopKSB7IC8vIGFuZCBvYmplY3RcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgX3JlbW92ZUJsb2JzKG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHBlbmRpbmdCbG9icyA9IDA7XG4gIHZhciBibG9ibGVzc0RhdGEgPSBkYXRhO1xuICBfcmVtb3ZlQmxvYnMoYmxvYmxlc3NEYXRhKTtcbiAgaWYgKCFwZW5kaW5nQmxvYnMpIHtcbiAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICB9XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGJpbmFyeSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudHlwZXMgPSBbXG4gICdDT05ORUNUJyxcbiAgJ0RJU0NPTk5FQ1QnLFxuICAnRVZFTlQnLFxuICAnQUNLJyxcbiAgJ0VSUk9SJyxcbiAgJ0JJTkFSWV9FVkVOVCcsXG4gICdCSU5BUllfQUNLJ1xuXTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkNPTk5FQ1QgPSAwO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBkaXNjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRElTQ09OTkVDVCA9IDE7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGV2ZW50YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVZFTlQgPSAyO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBhY2tgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5BQ0sgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBlcnJvcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVSUk9SID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSAnYmluYXJ5IGV2ZW50J1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfRVZFTlQgPSA1O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBiaW5hcnkgYWNrYC4gRm9yIGFja3Mgd2l0aCBiaW5hcnkgYXJndW1lbnRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfQUNLID0gNjtcblxuLyoqXG4gKiBFbmNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2RlcjtcblxuLyoqXG4gKiBEZWNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcblxuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbmNvZGVyKCkge31cblxudmFyIEVSUk9SX1BBQ0tFVCA9IGV4cG9ydHMuRVJST1IgKyAnXCJlbmNvZGUgZXJyb3JcIic7XG5cbi8qKlxuICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBoYW5kbGUgZW5jb2RpbmdzIChsaWtlbHkgZW5naW5lLndyaXRlKVxuICogQHJldHVybiBDYWxscyBjYWxsYmFjayB3aXRoIEFycmF5IG9mIGVuY29kaW5nc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXtcbiAgZGVidWcoJ2VuY29kaW5nIHBhY2tldCAlaicsIG9iaik7XG5cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVuY29kaW5nID0gZW5jb2RlQXNTdHJpbmcob2JqKTtcbiAgICBjYWxsYmFjayhbZW5jb2RpbmddKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzU3RyaW5nKG9iaikge1xuXG4gIC8vIGZpcnN0IGlzIHR5cGVcbiAgdmFyIHN0ciA9ICcnICsgb2JqLnR5cGU7XG5cbiAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyAnLSc7XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICBpZiAob2JqLm5zcCAmJiAnLycgIT09IG9iai5uc3ApIHtcbiAgICBzdHIgKz0gb2JqLm5zcCArICcsJztcbiAgfVxuXG4gIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICBzdHIgKz0gb2JqLmlkO1xuICB9XG5cbiAgLy8ganNvbiBkYXRhXG4gIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlTdHJpbmdpZnkob2JqLmRhdGEpO1xuICAgIGlmIChwYXlsb2FkICE9PSBmYWxzZSkge1xuICAgICAgc3RyICs9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2VuY29kZWQgJWogYXMgJXMnLCBvYmosIHN0cik7XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIHRyeVN0cmluZ2lmeShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjaykge1xuXG4gIGZ1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKSB7XG4gICAgdmFyIGRlY29uc3RydWN0aW9uID0gYmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7XG4gICAgdmFyIHBhY2sgPSBlbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgIHZhciBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcblxuICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICBjYWxsYmFjayhidWZmZXJzKTsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gIH1cblxuICBiaW5hcnkucmVtb3ZlQmxvYnMob2JqLCB3cml0ZUVuY29kaW5nKTtcbn1cblxuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIERlY29kZXIoKSB7XG4gIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYCB3aXRoIERlY29kZXIuXG4gKi9cblxuRW1pdHRlcihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGVjb2RlcyBhbiBlbmNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcGFja2V0O1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICBwYWNrZXQgPSBkZWNvZGVTdHJpbmcob2JqKTtcbiAgICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHBhY2tldC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcGFja2V0LnR5cGUpIHsgLy8gYmluYXJ5IHBhY2tldCdzIGpzb25cbiAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG5cbiAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93XG4gICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnVmKG9iaikgfHwgb2JqLmJhc2U2NCkgeyAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICBpZiAocGFja2V0KSB7IC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG9iaik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gIHZhciBpID0gMDtcbiAgLy8gbG9vayB1cCB0eXBlXG4gIHZhciBwID0ge1xuICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKVxuICB9O1xuXG4gIGlmIChudWxsID09IGV4cG9ydHMudHlwZXNbcC50eXBlXSkge1xuICAgIHJldHVybiBlcnJvcigndW5rbm93biBwYWNrZXQgdHlwZSAnICsgcC50eXBlKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnlcbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwLnR5cGUpIHtcbiAgICB2YXIgYnVmID0gJyc7XG4gICAgd2hpbGUgKHN0ci5jaGFyQXQoKytpKSAhPT0gJy0nKSB7XG4gICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09ICctJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGF0dGFjaG1lbnRzJyk7XG4gICAgfVxuICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gIGlmICgnLycgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgcC5uc3AgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoJywnID09PSBjKSBicmVhaztcbiAgICAgIHAubnNwICs9IGM7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHAubnNwID0gJy8nO1xuICB9XG5cbiAgLy8gbG9vayB1cCBpZFxuICB2YXIgbmV4dCA9IHN0ci5jaGFyQXQoaSArIDEpO1xuICBpZiAoJycgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICBwLmlkID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAtLWk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcC5pZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBwLmlkID0gTnVtYmVyKHAuaWQpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5UGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgdmFyIGlzUGF5bG9hZFZhbGlkID0gcGF5bG9hZCAhPT0gZmFsc2UgJiYgKHAudHlwZSA9PT0gZXhwb3J0cy5FUlJPUiB8fCBpc0FycmF5KHBheWxvYWQpKTtcbiAgICBpZiAoaXNQYXlsb2FkVmFsaWQpIHtcbiAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvcignaW52YWxpZCBwYXlsb2FkJyk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2RlY29kZWQgJXMgYXMgJWonLCBzdHIsIHApO1xuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkXG4gKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpc1xuICogZGVjb2RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCkge1xuICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59XG5cbi8qKlxuICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvclxuICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlQmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGJpbkRhdGEpIHtcbiAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7XG4gIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykgeyAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICB2YXIgcGFja2V0ID0gYmluYXJ5LnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgIHJldHVybiBwYWNrZXQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5pc2hlZFJlY29uc3RydWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVjb25QYWNrID0gbnVsbDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59O1xuXG5mdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBleHBvcnRzLkVSUk9SLFxuICAgIGRhdGE6ICdwYXJzZXIgZXJyb3I6ICcgKyBtc2dcbiAgfTtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqXG4gKiBMb2dpYyBib3Jyb3dlZCBmcm9tIE1vZGVybml6cjpcbiAqXG4gKiAgIC0gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2NvcnMuanNcbiAqL1xuXG50cnkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnd2l0aENyZWRlbnRpYWxzJyBpbiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbn0gY2F0Y2ggKGVycikge1xuICAvLyBpZiBYTUxIdHRwIHN1cHBvcnQgaXMgZGlzYWJsZWQgaW4gSUUgdGhlbiBpdCB3aWxsIHRocm93XG4gIC8vIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xufVxuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBzZWxmW1snQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyldKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9XG59O1xuIiwiXG4vKipcbiAqIEdldHMgdGhlIGtleXMgZm9yIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0ga2V5c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzIChvYmope1xuICB2YXIgYXJyID0gW107XG4gIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwgaSkpIHtcbiAgICAgIGFyci5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyogZ2xvYmFsIEJsb2IgRmlsZSAqL1xuXG4vKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gaGFzQmluYXJ5O1xuXG4vKipcbiAqIENoZWNrcyBmb3IgYmluYXJ5IGRhdGEuXG4gKlxuICogU3VwcG9ydHMgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQmxvYiBhbmQgRmlsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW55dGhpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzQmluYXJ5IChvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoaGFzQmluYXJ5KG9ialtpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBCdWZmZXIuaXNCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHxcbiAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSlcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2hhcy1iaW5hcnkvcHVsbC80XG4gIGlmIChvYmoudG9KU09OICYmIHR5cGVvZiBvYmoudG9KU09OID09PSAnZnVuY3Rpb24nICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgaGFzQmluYXJ5KG9ialtrZXldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG5cbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0dmFyIG91dHB1dCA9IFtdO1xuXHR2YXIgY291bnRlciA9IDA7XG5cdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBleHRyYTtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBvdXRwdXQgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHR9XG5cdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0fVxuXHR2YXIgc3ltYm9sID0gJyc7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHR9XG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7XG5cdHJldHVybiBzeW1ib2w7XG59XG5cbmZ1bmN0aW9uIHV0ZjhlbmNvZGUoc3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgY29kZVBvaW50O1xuXHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0fVxuXHRyZXR1cm4gYnl0ZVN0cmluZztcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuXHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHRpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7XG5cdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHR9XG5cblx0Ly8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZVxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVTeW1ib2woc3RyaWN0KSB7XG5cdHZhciBieXRlMTtcblx0dmFyIGJ5dGUyO1xuXHR2YXIgYnl0ZTM7XG5cdHZhciBieXRlNDtcblx0dmFyIGNvZGVQb2ludDtcblxuXHRpZiAoYnl0ZUluZGV4ID4gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0aWYgKGJ5dGVJbmRleCA9PSBieXRlQ291bnQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBSZWFkIGZpcnN0IGJ5dGVcblx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKVxuXHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdHJldHVybiBieXRlMTtcblx0fVxuXG5cdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRpZiAoKGJ5dGUxICYgMHhGMCkgPT0gMHhFMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MEYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MEMpIHxcblx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH1cblx0fVxuXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIFVURi04IGRldGVjdGVkJyk7XG59XG5cbnZhciBieXRlQXJyYXk7XG52YXIgYnl0ZUNvdW50O1xudmFyIGJ5dGVJbmRleDtcbmZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRieXRlSW5kZXggPSAwO1xuXHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHR2YXIgdG1wO1xuXHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0fVxuXHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHZlcnNpb246ICcyLjEuMicsXG5cdGVuY29kZTogdXRmOGVuY29kZSxcblx0ZGVjb2RlOiB1dGY4ZGVjb2RlXG59O1xuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBjaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG4gIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgdmFyIGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMSldO1xuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XG4gICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzMpXTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KSgpO1xuIiwiLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XHJcbiAqL1xyXG5cclxudmFyIEJsb2JCdWlsZGVyID0gdHlwZW9mIEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgV2ViS2l0QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gV2ViS2l0QmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNU0Jsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1TQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNb3pCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNb3pCbG9iQnVpbGRlciA6IFxyXG4gIGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3IgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcclxuICAgIHJldHVybiBhLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xyXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XHJcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iQnVpbGRlciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlclxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXHJcbiAqIFVzZWQgYnkgQmxvYkJ1aWxkZXIgY29uc3RydWN0b3IgYW5kIG9sZCBicm93c2VycyB0aGF0IGRpZG4ndFxyXG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XHJcbiAgcmV0dXJuIGFyeS5tYXAoZnVuY3Rpb24oY2h1bmspIHtcclxuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xyXG5cclxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XHJcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxyXG4gICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJ1ZiA9IGNvcHkuYnVmZmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYnVmO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaHVuaztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XHJcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xyXG4gICAgYmIuYXBwZW5kKHBhcnQpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBCbG9iKG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSwgb3B0aW9ucyB8fCB7fSk7XHJcbn07XHJcblxyXG5pZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgQmxvYkJ1aWxkZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxuICBCbG9iQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xyXG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xudmFyIGhhc0JpbmFyeSA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgc2xpY2VCdWZmZXIgPSByZXF1aXJlKCdhcnJheWJ1ZmZlci5zbGljZScpO1xudmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTtcbnZhciB1dGY4ID0gcmVxdWlyZSgnLi91dGY4Jyk7XG5cbnZhciBiYXNlNjRlbmNvZGVyO1xuaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgYmFzZTY0ZW5jb2RlciA9IHJlcXVpcmUoJ2Jhc2U2NC1hcnJheWJ1ZmZlcicpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGFuIGFuZHJvaWQgYnJvd3Nlci4gVGhhdCByZXF1aXJlcyB1cyB0byB1c2VcbiAqIEFycmF5QnVmZmVyIHdpdGggcG9sbGluZyB0cmFuc3BvcnRzLi4uXG4gKlxuICogaHR0cDovL2doaW5kYS5uZXQvanBlZy1ibG9iLWFqYXgtYW5kcm9pZC9cbiAqL1xuXG52YXIgaXNBbmRyb2lkID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGluIFBoYW50b21KUy5cbiAqIFVwbG9hZGluZyBhIEJsb2Igd2l0aCBQaGFudG9tSlMgZG9lcyBub3Qgd29yayBjb3JyZWN0bHksIGFzIHJlcG9ydGVkIGhlcmU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xMTM5NVxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgaXNQaGFudG9tSlMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvUGhhbnRvbUpTL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBXaGVuIHRydWUsIGF2b2lkcyB1c2luZyBCbG9icyB0byBlbmNvZGUgcGF5bG9hZHMuXG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBkb250U2VuZEJsb2JzID0gaXNBbmRyb2lkIHx8IGlzUGhhbnRvbUpTO1xuXG4vKipcbiAqIEN1cnJlbnQgcHJvdG9jb2wgdmVyc2lvbi5cbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKi9cblxudmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7XG4gICAgb3BlbjogICAgIDAgICAgLy8gbm9uLXdzXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXG4gICwgcGluZzogICAgIDJcbiAgLCBwb25nOiAgICAgM1xuICAsIG1lc3NhZ2U6ICA0XG4gICwgdXBncmFkZTogIDVcbiAgLCBub29wOiAgICAgNlxufTtcblxudmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTtcblxuLyoqXG4gKiBQcmVtYWRlIGVycm9yIHBhY2tldC5cbiAqL1xuXG52YXIgZXJyID0geyB0eXBlOiAnZXJyb3InLCBkYXRhOiAncGFyc2VyIGVycm9yJyB9O1xuXG4vKipcbiAqIENyZWF0ZSBhIGJsb2IgYXBpIGV2ZW4gZm9yIGJsb2IgYnVpbGRlciB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxuICovXG5cbnZhciBCbG9iID0gcmVxdWlyZSgnYmxvYicpO1xuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQuXG4gKlxuICogICAgIDxwYWNrZXQgdHlwZSBpZD4gWyA8ZGF0YT4gXVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDVoZWxsbyB3b3JsZFxuICogICAgIDNcbiAqICAgICA0XG4gKlxuICogQmluYXJ5IGlzIGVuY29kZWQgaW4gYW4gaWRlbnRpY2FsIHByaW5jaXBsZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHV0ZjhlbmNvZGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHV0ZjhlbmNvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XG4gICAgdXRmOGVuY29kZSA9IG51bGw7XG4gIH1cblxuICB2YXIgZGF0YSA9IChwYWNrZXQuZGF0YSA9PT0gdW5kZWZpbmVkKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nXG4gIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07XG5cbiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxuICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcblxufTtcblxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spIHtcbiAgLy8gcGFja2V0IGRhdGEgaXMgYW4gb2JqZWN0IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBoZWxwZXJzIGZvciBiaW5hcnkgdHlwZXNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgcmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0QnVmZmVyW2krMV0gPSBjb250ZW50QXJyYXlbaV07XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2socmVzdWx0QnVmZmVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldCh7IHR5cGU6IHBhY2tldC50eXBlLCBkYXRhOiBmci5yZXN1bHQgfSwgc3VwcG9ydHNCaW5hcnksIHRydWUsIGNhbGxiYWNrKTtcbiAgfTtcbiAgcmV0dXJuIGZyLnJlYWRBc0FycmF5QnVmZmVyKHBhY2tldC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKGRvbnRTZW5kQmxvYnMpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IG5ldyBVaW50OEFycmF5KDEpO1xuICBsZW5ndGhbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgdmFyIGJsb2IgPSBuZXcgQmxvYihbbGVuZ3RoLmJ1ZmZlciwgcGFja2V0LmRhdGFdKTtcblxuICByZXR1cm4gY2FsbGJhY2soYmxvYik7XG59XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldCB3aXRoIGJpbmFyeSBkYXRhIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQsIGhhcyBgdHlwZWAgYW5kIGBkYXRhYFxuICogQHJldHVybiB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBwYWNrZXQuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGI2NCA9IGZyLnJlc3VsdC5zcGxpdCgnLCcpWzFdO1xuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XG4gICAgfTtcbiAgICByZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSk7XG4gIH1cblxuICB2YXIgYjY0ZGF0YTtcbiAgdHJ5IHtcbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcbiAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7XG4gICAgdmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzaWNbaV0gPSB0eXBlZFtpXTtcbiAgICB9XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xuICB9XG4gIG1lc3NhZ2UgKz0gYnRvYShiNjRkYXRhKTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0LiBDaGFuZ2VzIGZvcm1hdCB0byBCbG9iIGlmIHJlcXVlc3RlZC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZGVjb2RlUGFja2V0ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIHV0ZjhkZWNvZGUpIHtcbiAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnI7XG4gIH1cbiAgLy8gU3RyaW5nIGRhdGFcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGlmIChkYXRhLmNoYXJBdCgwKSA9PT0gJ2InKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQoZGF0YS5zdWJzdHIoMSksIGJpbmFyeVR5cGUpO1xuICAgIH1cblxuICAgIGlmICh1dGY4ZGVjb2RlKSB7XG4gICAgICBkYXRhID0gdHJ5RGVjb2RlKGRhdGEpO1xuICAgICAgaWYgKGRhdGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciB0eXBlID0gZGF0YS5jaGFyQXQoMCk7XG5cbiAgICBpZiAoTnVtYmVyKHR5cGUpICE9IHR5cGUgfHwgIXBhY2tldHNsaXN0W3R5cGVdKSB7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiBkYXRhLnN1YnN0cmluZygxKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBhc0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciB0eXBlID0gYXNBcnJheVswXTtcbiAgdmFyIHJlc3QgPSBzbGljZUJ1ZmZlcihkYXRhLCAxKTtcbiAgaWYgKEJsb2IgJiYgYmluYXJ5VHlwZSA9PT0gJ2Jsb2InKSB7XG4gICAgcmVzdCA9IG5ldyBCbG9iKFtyZXN0XSk7XG4gIH1cbiAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IHJlc3QgfTtcbn07XG5cbmZ1bmN0aW9uIHRyeURlY29kZShkYXRhKSB7XG4gIHRyeSB7XG4gICAgZGF0YSA9IHV0ZjguZGVjb2RlKGRhdGEsIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0IGVuY29kZWQgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICovXG5cbmV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24obXNnLCBiaW5hcnlUeXBlKSB7XG4gIHZhciB0eXBlID0gcGFja2V0c2xpc3RbbXNnLmNoYXJBdCgwKV07XG4gIGlmICghYmFzZTY0ZW5jb2Rlcikge1xuICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBtc2cuc3Vic3RyKDEpIH0gfTtcbiAgfVxuXG4gIHZhciBkYXRhID0gYmFzZTY0ZW5jb2Rlci5kZWNvZGUobXNnLnN1YnN0cigxKSk7XG5cbiAgaWYgKGJpbmFyeVR5cGUgPT09ICdibG9iJyAmJiBCbG9iKSB7XG4gICAgZGF0YSA9IG5ldyBCbG9iKFtkYXRhXSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiBkYXRhIH07XG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpLlxuICpcbiAqICAgICA8bGVuZ3RoPjpkYXRhXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgMTE6aGVsbG8gd29ybGQyOmhpXG4gKlxuICogSWYgYW55IGNvbnRlbnRzIGFyZSBiaW5hcnksIHRoZXkgd2lsbCBiZSBlbmNvZGVkIGFzIGJhc2U2NCBzdHJpbmdzLiBCYXNlNjRcbiAqIGVuY29kZWQgc3RyaW5ncyBhcmUgbWFya2VkIHdpdGggYSBiIGJlZm9yZSB0aGUgbGVuZ3RoIHNwZWNpZmllclxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChwYWNrZXRzLCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBudWxsO1xuICB9XG5cbiAgdmFyIGlzQmluYXJ5ID0gaGFzQmluYXJ5KHBhY2tldHMpO1xuXG4gIGlmIChzdXBwb3J0c0JpbmFyeSAmJiBpc0JpbmFyeSkge1xuICAgIGlmIChCbG9iICYmICFkb250U2VuZEJsb2JzKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcihwYWNrZXRzLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCcwOicpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbWVzc2FnZS5sZW5ndGggKyAnOicgKyBtZXNzYWdlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCAhaXNCaW5hcnkgPyBmYWxzZSA6IHN1cHBvcnRzQmluYXJ5LCBmYWxzZSwgZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0cy5qb2luKCcnKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBc3luYyBhcnJheSBtYXAgdXNpbmcgYWZ0ZXJcbiAqL1xuXG5mdW5jdGlvbiBtYXAoYXJ5LCBlYWNoLCBkb25lKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoYXJ5Lmxlbmd0aCk7XG4gIHZhciBuZXh0ID0gYWZ0ZXIoYXJ5Lmxlbmd0aCwgZG9uZSk7XG5cbiAgdmFyIGVhY2hXaXRoSW5kZXggPSBmdW5jdGlvbihpLCBlbCwgY2IpIHtcbiAgICBlYWNoKGVsLCBmdW5jdGlvbihlcnJvciwgbXNnKSB7XG4gICAgICByZXN1bHRbaV0gPSBtc2c7XG4gICAgICBjYihlcnJvciwgcmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGVhY2hXaXRoSW5kZXgoaSwgYXJ5W2ldLCBuZXh0KTtcbiAgfVxufVxuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBQb3NzaWJsZSBiaW5hcnkgY29udGVudHMgYXJlXG4gKiBkZWNvZGVkIGZyb20gdGhlaXIgYmFzZTY0IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBleHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeShkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgcGFja2V0O1xuICBpZiAoZGF0YSA9PT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gJycsIG4sIG1zZztcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpO1xuXG4gICAgaWYgKGNociAhPT0gJzonKSB7XG4gICAgICBsZW5ndGggKz0gY2hyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gJycgfHwgKGxlbmd0aCAhPSAobiA9IE51bWJlcihsZW5ndGgpKSkpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIG1zZyA9IGRhdGEuc3Vic3RyKGkgKyAxLCBuKTtcblxuICAgIGlmIChsZW5ndGggIT0gbXNnLmxlbmd0aCkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgaWYgKG1zZy5sZW5ndGgpIHtcbiAgICAgIHBhY2tldCA9IGV4cG9ydHMuZGVjb2RlUGFja2V0KG1zZywgYmluYXJ5VHlwZSwgZmFsc2UpO1xuXG4gICAgICBpZiAoZXJyLnR5cGUgPT09IHBhY2tldC50eXBlICYmIGVyci5kYXRhID09PSBwYWNrZXQuZGF0YSkge1xuICAgICAgICAvLyBwYXJzZXIgZXJyb3IgaW4gaW5kaXZpZHVhbCBwYWNrZXQgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmV0ID0gY2FsbGJhY2socGFja2V0LCBpICsgbiwgbCk7XG4gICAgICBpZiAoZmFsc2UgPT09IHJldCkgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFkdmFuY2UgY3Vyc29yXG4gICAgaSArPSBuO1xuICAgIGxlbmd0aCA9ICcnO1xuICB9XG5cbiAgaWYgKGxlbmd0aCAhPT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKSBhcyBiaW5hcnkuXG4gKlxuICogPDEgPSBiaW5hcnksIDAgPSBzdHJpbmc+PG51bWJlciBmcm9tIDAtOT48bnVtYmVyIGZyb20gMC05PlsuLi5dPG51bWJlclxuICogMjU1PjxkYXRhPlxuICpcbiAqIEV4YW1wbGU6XG4gKiAxIDMgMjU1IDEgMiAzLCBpZiB0aGUgYmluYXJ5IGNvbnRlbnRzIGFyZSBpbnRlcnByZXRlZCBhcyA4IGJpdCBpbnRlZ2Vyc1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBlbmNvZGVkIHBheWxvYWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBBcnJheUJ1ZmZlcigwKSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBkb25lQ2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIGVuY29kZWRQYWNrZXRzKSB7XG4gICAgdmFyIHRvdGFsTGVuZ3RoID0gZW5jb2RlZFBhY2tldHMucmVkdWNlKGZ1bmN0aW9uKGFjYywgcCkge1xuICAgICAgdmFyIGxlbjtcbiAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpe1xuICAgICAgICBsZW4gPSBwLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbiA9IHAuYnl0ZUxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2MgKyBsZW4udG9TdHJpbmcoKS5sZW5ndGggKyBsZW4gKyAyOyAvLyBzdHJpbmcvYmluYXJ5IGlkZW50aWZpZXIgKyBzZXBhcmF0b3IgPSAyXG4gICAgfSwgMCk7XG5cbiAgICB2YXIgcmVzdWx0QXJyYXkgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCk7XG5cbiAgICB2YXIgYnVmZmVySW5kZXggPSAwO1xuICAgIGVuY29kZWRQYWNrZXRzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIHAgPT09ICdzdHJpbmcnO1xuICAgICAgdmFyIGFiID0gcDtcbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KHAubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IHAuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBhYiA9IHZpZXcuYnVmZmVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJpbmcpIHsgLy8gbm90IHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMDtcbiAgICAgIH0gZWxzZSB7IC8vIHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlblN0ciA9IGFiLmJ5dGVMZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMjU1O1xuXG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGFiKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHZpZXdbaV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0QXJyYXkuYnVmZmVyKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEVuY29kZSBhcyBCbG9iXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihlbmNvZGVkKSB7XG4gICAgICB2YXIgYmluYXJ5SWRlbnRpZmllciA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDE7XG4gICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gZW5jb2RlZC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGVuY29kZWQgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW4gPSAoZW5jb2RlZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICA/IGVuY29kZWQuYnl0ZUxlbmd0aFxuICAgICAgICA6IGVuY29kZWQuc2l6ZTtcblxuICAgICAgdmFyIGxlblN0ciA9IGxlbi50b1N0cmluZygpO1xuICAgICAgdmFyIGxlbmd0aEFyeSA9IG5ldyBVaW50OEFycmF5KGxlblN0ci5sZW5ndGggKyAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxlbmd0aEFyeVtpXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICBsZW5ndGhBcnlbbGVuU3RyLmxlbmd0aF0gPSAyNTU7XG5cbiAgICAgIGlmIChCbG9iKSB7XG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2JpbmFyeUlkZW50aWZpZXIuYnVmZmVyLCBsZW5ndGhBcnkuYnVmZmVyLCBlbmNvZGVkXSk7XG4gICAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBibG9iKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQmxvYihyZXN1bHRzKSk7XG4gIH0pO1xufTtcblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gU3RyaW5ncyBhcmUgZGVjb2RlZCBieVxuICogaW50ZXJwcmV0aW5nIGVhY2ggYnl0ZSBhcyBhIGtleSBjb2RlIGZvciBlbnRyaWVzIG1hcmtlZCB0byBzdGFydCB3aXRoIDAuIFNlZVxuICogZGVzY3JpcHRpb24gb2YgZW5jb2RlUGF5bG9hZEFzQmluYXJ5XG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBidWZmZXJUYWlsID0gZGF0YTtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcblxuICB3aGlsZSAoYnVmZmVyVGFpbC5ieXRlTGVuZ3RoID4gMCkge1xuICAgIHZhciB0YWlsQXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXJUYWlsKTtcbiAgICB2YXIgaXNTdHJpbmcgPSB0YWlsQXJyYXlbMF0gPT09IDA7XG4gICAgdmFyIG1zZ0xlbmd0aCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IDsgaSsrKSB7XG4gICAgICBpZiAodGFpbEFycmF5W2ldID09PSAyNTUpIGJyZWFrO1xuXG4gICAgICAvLyAzMTAgPSBjaGFyIGxlbmd0aCBvZiBOdW1iZXIuTUFYX1ZBTFVFXG4gICAgICBpZiAobXNnTGVuZ3RoLmxlbmd0aCA+IDMxMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgbXNnTGVuZ3RoICs9IHRhaWxBcnJheVtpXTtcbiAgICB9XG5cbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMiArIG1zZ0xlbmd0aC5sZW5ndGgpO1xuICAgIG1zZ0xlbmd0aCA9IHBhcnNlSW50KG1zZ0xlbmd0aCk7XG5cbiAgICB2YXIgbXNnID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMCwgbXNnTGVuZ3RoKTtcbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG1zZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkobXNnKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHRvIHR5cGVkIGFycmF5c1xuICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShtc2cpO1xuICAgICAgICBtc2cgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1zZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHR5cGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGJ1ZmZlcnMucHVzaChtc2cpO1xuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCBtc2dMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRvdGFsID0gYnVmZmVycy5sZW5ndGg7XG4gIGJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbihidWZmZXIsIGkpIHtcbiAgICBjYWxsYmFjayhleHBvcnRzLmRlY29kZVBhY2tldChidWZmZXIsIGJpbmFyeVR5cGUsIHRydWUpLCBpLCB0b3RhbCk7XG4gIH0pO1xufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuXG4vKipcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xuICB0aGlzLnBhdGggPSBvcHRzLnBhdGg7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XG4gIHRoaXMuc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IG9wdHMud2l0aENyZWRlbnRpYWxzO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcblxuICAvLyByZXN1bHRzIG9mIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGRldGVjdGlvblxuICB0aGlzLmlzUmVhY3ROYXRpdmUgPSBvcHRzLmlzUmVhY3ROYXRpdmU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRW1pdHMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJztcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICAgIHRoaXMuZG9PcGVuKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgdGhpcy5vbkNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gb3BlblxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcbiIsIi8qKlxyXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXHJcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gIHZhciBzdHIgPSAnJztcclxuXHJcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XHJcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzdHI7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcclxuICB2YXIgcXJ5ID0ge307XHJcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcclxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xyXG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XHJcbiAgfVxyXG4gIHJldHVybiBxcnk7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSB7XG4gICAgICBzZWxmLm9uT3BlbigpO1xuICAgIH1cblxuICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICBpZiAoJ2Nsb3NlJyA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBieXBhc3Mgb25EYXRhIGFuZCBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHBheWxvYWRcbiAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSwgY2FsbGJhY2spO1xuXG4gIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gaWYgd2UgZ290IGRhdGEgd2UncmUgbm90IHBvbGxpbmdcbiAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BvbGxDb21wbGV0ZScpO1xuXG4gICAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnBvbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGNsb3NlICgpIHtcbiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTtcbiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pO1xuICB9XG5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpO1xuICAgIGNsb3NlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTtcbiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7XG4gIH1cbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgfTtcblxuICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgKCdodHRwJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgcG9ydCA9ICc6JyArIHRoaXMucG9ydDtcbiAgfVxuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG4iLCIvKiBnbG9iYWwgYXR0YWNoRXZlbnQgKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcbm1vZHVsZS5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuXG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkge31cblxuLyoqXG4gKiBYSFIgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBYSFIgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICB9XG5cbiAgICB0aGlzLnhkID0gKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUpIHx8XG4gICAgICBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KFhIUiwgUG9sbGluZyk7XG5cbi8qKlxuICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICovXG5cblhIUi5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLnVyaSA9IHRoaXMudXJpKCk7XG4gIG9wdHMueGQgPSB0aGlzLnhkO1xuICBvcHRzLnhzID0gdGhpcy54cztcbiAgb3B0cy5hZ2VudCA9IHRoaXMuYWdlbnQgfHwgZmFsc2U7XG4gIG9wdHMuc3VwcG9ydHNCaW5hcnkgPSB0aGlzLnN1cHBvcnRzQmluYXJ5O1xuICBvcHRzLmVuYWJsZXNYRFIgPSB0aGlzLmVuYWJsZXNYRFI7XG4gIG9wdHMud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBvcHRzLnJlcXVlc3RUaW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLmV4dHJhSGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuXG4gIHJldHVybiBuZXcgUmVxdWVzdChvcHRzKTtcbn07XG5cbi8qKlxuICogU2VuZHMgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIGlzQmluYXJ5ID0gdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnICYmIGRhdGEgIT09IHVuZGVmaW5lZDtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCh7IG1ldGhvZDogJ1BPU1QnLCBkYXRhOiBkYXRhLCBpc0JpbmFyeTogaXNCaW5hcnkgfSk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdzdWNjZXNzJywgZm4pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvc3QgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5zZW5kWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygneGhyIHBvbGwnKTtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5vbkRhdGEoZGF0YSk7XG4gIH0pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvbGwgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5wb2xsWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdCAob3B0cykge1xuICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8ICdHRVQnO1xuICB0aGlzLnVyaSA9IG9wdHMudXJpO1xuICB0aGlzLnhkID0gISFvcHRzLnhkO1xuICB0aGlzLnhzID0gISFvcHRzLnhzO1xuICB0aGlzLmFzeW5jID0gZmFsc2UgIT09IG9wdHMuYXN5bmM7XG4gIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQ7XG4gIHRoaXMuaXNCaW5hcnkgPSBvcHRzLmlzQmluYXJ5O1xuICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gb3B0cy5zdXBwb3J0c0JpbmFyeTtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IG9wdHMud2l0aENyZWRlbnRpYWxzO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICB0aGlzLmNyZWF0ZSgpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3B0cyA9IHsgYWdlbnQ6IHRoaXMuYWdlbnQsIHhkb21haW46IHRoaXMueGQsIHhzY2hlbWU6IHRoaXMueHMsIGVuYWJsZXNYRFI6IHRoaXMuZW5hYmxlc1hEUiB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICB2YXIgeGhyID0gdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0cnkge1xuICAgIGRlYnVnKCd4aHIgb3BlbiAlczogJXMnLCB0aGlzLm1ldGhvZCwgdGhpcy51cmkpO1xuICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIHRoaXMuZXh0cmFIZWFkZXJzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKCdQT1NUJyA9PT0gdGhpcy5tZXRob2QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLmlzQmluYXJ5KSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJyovKicpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAvLyBpZTYgY2hlY2tcbiAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVxdWVzdFRpbWVvdXQpIHtcbiAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgIH07XG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSAyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjb250ZW50VHlwZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zdXBwb3J0c0JpbmFyeSAmJiBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07IGNoYXJzZXQ9VVRGLTgnKSB7XG4gICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHR5cGVvZiB4aHIuc3RhdHVzID09PSAnbnVtYmVyJyA/IHhoci5zdGF0dXMgOiAwKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkZWJ1ZygneGhyIGRhdGEgJXMnLCB0aGlzLmRhdGEpO1xuICAgIHhoci5zZW5kKHRoaXMuZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOZWVkIHRvIGRlZmVyIHNpbmNlIC5jcmVhdGUoKSBpcyBjYWxsZWQgZGlyZWN0bHkgZmhyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgLy8gb2NjdXJzLiAgVGhlcmVmb3JlLCBhbHNvLCB3ZSBjYW5ub3QgdGhyb3cgaGVyZSBhdCBhbGwuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLm9uRXJyb3IoZSk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmluZGV4ID0gUmVxdWVzdC5yZXF1ZXN0c0NvdW50Kys7XG4gICAgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XSA9IHRoaXM7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZXNwb25zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vblN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnc3VjY2VzcycpO1xuICB0aGlzLmNsZWFudXAoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIGlmIHdlIGhhdmUgZGF0YS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbiAgdGhpcy5vblN1Y2Nlc3MoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMuY2xlYW51cCh0cnVlKTtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGhvdXNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoZnJvbUVycm9yKSB7XG4gIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHhtbGh0dHByZXF1ZXN0XG4gIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgdGhpcy54aHIub25sb2FkID0gdGhpcy54aHIub25lcnJvciA9IGVtcHR5O1xuICB9IGVsc2Uge1xuICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5O1xuICB9XG5cbiAgaWYgKGZyb21FcnJvcikge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICB9XG5cbiAgdGhpcy54aHIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBsb2FkLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGE7XG4gIHRyeSB7XG4gICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgIHRyeSB7XG4gICAgICBjb250ZW50VHlwZSA9IHRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07IGNoYXJzZXQ9VVRGLTgnKSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2UgfHwgdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMub25FcnJvcihlKTtcbiAgfVxuICBpZiAobnVsbCAhPSBkYXRhKSB7XG4gICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgaXQgaGFzIFhEb21haW5SZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmhhc1hEUiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cblxuUmVxdWVzdC5yZXF1ZXN0c0NvdW50ID0gMDtcblJlcXVlc3QucmVxdWVzdHMgPSB7fTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgaWYgKHR5cGVvZiBhdHRhY2hFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHRlcm1pbmF0aW9uRXZlbnQgPSAnb25wYWdlaGlkZScgaW4gc2VsZiA/ICdwYWdlaGlkZScgOiAndW5sb2FkJztcbiAgICBhZGRFdmVudExpc3RlbmVyKHRlcm1pbmF0aW9uRXZlbnQsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyICgpIHtcbiAgZm9yICh2YXIgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO1xuXG4vKipcbiAqIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zLlxuICovXG5cbnZhciByTmV3bGluZSA9IC9cXG4vZztcbnZhciByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbnZhciBjYWxsYmFja3M7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7IH1cblxuLyoqXG4gKiBVbnRpbCBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWwgaXMgc2hpcHBlZC5cbiAqL1xuZnVuY3Rpb24gZ2xvYiAoKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmXG4gICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93XG4gICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG59XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgdmFyIGdsb2JhbCA9IGdsb2IoKTtcbiAgICBjYWxsYmFja3MgPSBnbG9iYWwuX19fZWlvID0gKGdsb2JhbC5fX19laW8gfHwgW10pO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHt9O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldCcpO1xuXG52YXIgQnJvd3NlcldlYlNvY2tldCwgTm9kZVdlYlNvY2tldDtcblxuaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gIEJyb3dzZXJXZWJTb2NrZXQgPSBXZWJTb2NrZXQ7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICBCcm93c2VyV2ViU29ja2V0ID0gc2VsZi5XZWJTb2NrZXQgfHwgc2VsZi5Nb3pXZWJTb2NrZXQ7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICB0cnkge1xuICAgIE5vZGVXZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpO1xuICB9IGNhdGNoIChlKSB7IH1cbn1cblxuLyoqXG4gKiBHZXQgZWl0aGVyIHRoZSBgV2ViU29ja2V0YCBvciBgTW96V2ViU29ja2V0YCBnbG9iYWxzXG4gKiBpbiB0aGUgYnJvd3NlciBvciB0cnkgdG8gcmVzb2x2ZSBXZWJTb2NrZXQtY29tcGF0aWJsZVxuICogaW50ZXJmYWNlIGV4cG9zZWQgYnkgYHdzYCBmb3IgTm9kZS1saWtlIGVudmlyb25tZW50LlxuICovXG5cbnZhciBXZWJTb2NrZXRJbXBsID0gQnJvd3NlcldlYlNvY2tldCB8fCBOb2RlV2ViU29ja2V0O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG5cbi8qKlxuICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBXUyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1xuICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQgJiYgIW9wdHMuZm9yY2VOb2RlO1xuICB0aGlzLnByb3RvY29scyA9IG9wdHMucHJvdG9jb2xzO1xuICBpZiAoIXRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgV2ViU29ja2V0SW1wbCA9IE5vZGVXZWJTb2NrZXQ7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChXUywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbldTLnByb3RvdHlwZS5uYW1lID0gJ3dlYnNvY2tldCc7XG5cbi8qXG4gKiBXZWJTb2NrZXRzIHN1cHBvcnQgYmluYXJ5XG4gKi9cblxuV1MucHJvdG90eXBlLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcblxuLyoqXG4gKiBPcGVucyBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmNoZWNrKCkpIHtcbiAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB1cmkgPSB0aGlzLnVyaSgpO1xuICB2YXIgcHJvdG9jb2xzID0gdGhpcy5wcm90b2NvbHM7XG4gIHZhciBvcHRzID0ge1xuICAgIGFnZW50OiB0aGlzLmFnZW50LFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlXG4gIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBpZiAodGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVycztcbiAgfVxuICBpZiAodGhpcy5sb2NhbEFkZHJlc3MpIHtcbiAgICBvcHRzLmxvY2FsQWRkcmVzcyA9IHRoaXMubG9jYWxBZGRyZXNzO1xuICB9XG5cbiAgdHJ5IHtcbiAgICB0aGlzLndzID1cbiAgICAgIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ICYmICF0aGlzLmlzUmVhY3ROYXRpdmVcbiAgICAgICAgPyBwcm90b2NvbHNcbiAgICAgICAgICA/IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSwgcHJvdG9jb2xzKVxuICAgICAgICAgIDogbmV3IFdlYlNvY2tldEltcGwodXJpKVxuICAgICAgICA6IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnbm9kZWJ1ZmZlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMud3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25PcGVuKCk7XG4gIH07XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgfTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3dlYnNvY2tldCBlcnJvcicsIGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHtcbiAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgIHZhciBvcHRzID0ge307XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlbiA8IHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbFxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChzZWxmLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlzIHRocm93biB3aGVuIHBhc3NpbmcgdGhlIHNlY29uZCBhcmd1bWVudCBvbiBTYWZhcmlcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKCd3ZWJzb2NrZXQgY2xvc2VkIGJlZm9yZSBvbmNsb3NlIGV2ZW50Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAtLXRvdGFsIHx8IGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pKHBhY2tldHNbaV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSAoKSB7XG4gICAgc2VsZi5lbWl0KCdmbHVzaCcpO1xuXG4gICAgLy8gZmFrZSBkcmFpblxuICAgIC8vIGRlZmVyIHRvIG5leHQgdGljayB0byBhbGxvdyBTb2NrZXQgdG8gY2xlYXIgd3JpdGVCdWZmZXJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYud3JpdGFibGUgPSB0cnVlO1xuICAgICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGNsb3NlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIFRyYW5zcG9ydC5wcm90b3R5cGUub25DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIHRoaXMud3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy53cy5jbG9zZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuV1MucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ3dzcycgOiAnd3MnO1xuICB2YXIgcG9ydCA9ICcnO1xuXG4gIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gIGlmICh0aGlzLnBvcnQgJiYgKCgnd3NzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgKCd3cycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICBpZiAodGhpcy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgfVxuXG4gIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcblxuLyoqXG4gKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICpcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhpcyB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIVdlYlNvY2tldEltcGwgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXRJbXBsICYmIHRoaXMubmFtZSA9PT0gV1MucHJvdG90eXBlLm5hbWUpO1xufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xudmFyIFhIUiA9IHJlcXVpcmUoJy4vcG9sbGluZy14aHInKTtcbnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpO1xudmFyIHdlYnNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0IHRyYW5zcG9ydHMuXG4gKi9cblxuZXhwb3J0cy5wb2xsaW5nID0gcG9sbGluZztcbmV4cG9ydHMud2Vic29ja2V0ID0gd2Vic29ja2V0O1xuXG4vKipcbiAqIFBvbGxpbmcgdHJhbnNwb3J0IHBvbHltb3JwaGljIGNvbnN0cnVjdG9yLlxuICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9sbGluZyAob3B0cykge1xuICB2YXIgeGhyO1xuICB2YXIgeGQgPSBmYWxzZTtcbiAgdmFyIHhzID0gZmFsc2U7XG4gIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wpO1xuXG4gIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyAnNDQzJyA6ICc4MCc7XG4gIH1cblxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHxcbiAgICAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZSAhPT0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtIHx8ICd0JztcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107XG4gIHRoaXMudHJhbnNwb3J0T3B0aW9ucyA9IG9wdHMudHJhbnNwb3J0T3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgdGhpcy5wb2xpY3lQb3J0ID0gb3B0cy5wb2xpY3lQb3J0IHx8IDg0MztcbiAgdGhpcy5yZW1lbWJlclVwZ3JhZGUgPSBvcHRzLnJlbWVtYmVyVXBncmFkZSB8fCBmYWxzZTtcbiAgdGhpcy5iaW5hcnlUeXBlID0gbnVsbDtcbiAgdGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBvcHRzLm9ubHlCaW5hcnlVcGdyYWRlcztcbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IGZhbHNlICE9PSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlID8gKG9wdHMucGVyTWVzc2FnZURlZmxhdGUgfHwge30pIDogZmFsc2U7XG5cbiAgaWYgKHRydWUgPT09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUpIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgaWYgKHRoaXMucGVyTWVzc2FnZURlZmxhdGUgJiYgbnVsbCA9PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgIHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkID0gMTAyNDtcbiAgfVxuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4IHx8IG51bGw7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXkgfHwgbnVsbDtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlIHx8IG51bGw7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydCB8fCBudWxsO1xuICB0aGlzLmNhID0gb3B0cy5jYSB8fCBudWxsO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnMgfHwgbnVsbDtcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9ICEhb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9ICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09ICdyZWFjdG5hdGl2ZScpO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgb3IgUmVhY3ROYXRpdmUgY2xpZW50XG4gIGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5pc1JlYWN0TmF0aXZlKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHdpdGhDcmVkZW50aWFsczogb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgfHwgdGhpcy53aXRoQ3JlZGVudGlhbHMsXG4gICAgdGltZXN0YW1wUmVxdWVzdHM6IG9wdGlvbnMudGltZXN0YW1wUmVxdWVzdHMgfHwgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyxcbiAgICB0aW1lc3RhbXBQYXJhbTogb3B0aW9ucy50aW1lc3RhbXBQYXJhbSB8fCB0aGlzLnRpbWVzdGFtcFBhcmFtLFxuICAgIHBvbGljeVBvcnQ6IG9wdGlvbnMucG9saWN5UG9ydCB8fCB0aGlzLnBvbGljeVBvcnQsXG4gICAgcGZ4OiBvcHRpb25zLnBmeCB8fCB0aGlzLnBmeCxcbiAgICBrZXk6IG9wdGlvbnMua2V5IHx8IHRoaXMua2V5LFxuICAgIHBhc3NwaHJhc2U6IG9wdGlvbnMucGFzc3BocmFzZSB8fCB0aGlzLnBhc3NwaHJhc2UsXG4gICAgY2VydDogb3B0aW9ucy5jZXJ0IHx8IHRoaXMuY2VydCxcbiAgICBjYTogb3B0aW9ucy5jYSB8fCB0aGlzLmNhLFxuICAgIGNpcGhlcnM6IG9wdGlvbnMuY2lwaGVycyB8fCB0aGlzLmNpcGhlcnMsXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCB8fCB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLFxuICAgIGV4dHJhSGVhZGVyczogb3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgdGhpcy5leHRyYUhlYWRlcnMsXG4gICAgZm9yY2VOb2RlOiBvcHRpb25zLmZvcmNlTm9kZSB8fCB0aGlzLmZvcmNlTm9kZSxcbiAgICBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIHx8IHRoaXMubG9jYWxBZGRyZXNzLFxuICAgIHJlcXVlc3RUaW1lb3V0OiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0IHx8IHRoaXMucmVxdWVzdFRpbWVvdXQsXG4gICAgcHJvdG9jb2xzOiBvcHRpb25zLnByb3RvY29scyB8fCB2b2lkICgwKSxcbiAgICBpc1JlYWN0TmF0aXZlOiB0aGlzLmlzUmVhY3ROYXRpdmVcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaGFzQmluID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTb2NrZXQ7XG5cbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzIChibGFja2xpc3RlZCkuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZXZlbnRzID0ge1xuICBjb25uZWN0OiAxLFxuICBjb25uZWN0X2Vycm9yOiAxLFxuICBjb25uZWN0X3RpbWVvdXQ6IDEsXG4gIGNvbm5lY3Rpbmc6IDEsXG4gIGRpc2Nvbm5lY3Q6IDEsXG4gIGVycm9yOiAxLFxuICByZWNvbm5lY3Q6IDEsXG4gIHJlY29ubmVjdF9hdHRlbXB0OiAxLFxuICByZWNvbm5lY3RfZmFpbGVkOiAxLFxuICByZWNvbm5lY3RfZXJyb3I6IDEsXG4gIHJlY29ubmVjdGluZzogMSxcbiAgcGluZzogMSxcbiAgcG9uZzogMVxufTtcblxuLyoqXG4gKiBTaG9ydGN1dCB0byBgRW1pdHRlciNlbWl0YC5cbiAqL1xuXG52YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKGlvLCBuc3AsIG9wdHMpIHtcbiAgdGhpcy5pbyA9IGlvO1xuICB0aGlzLm5zcCA9IG5zcDtcbiAgdGhpcy5qc29uID0gdGhpczsgLy8gY29tcGF0XG4gIHRoaXMuaWRzID0gMDtcbiAgdGhpcy5hY2tzID0ge307XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICB0aGlzLmZsYWdzID0ge307XG4gIGlmIChvcHRzICYmIG9wdHMucXVlcnkpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgfVxuICBpZiAodGhpcy5pby5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc3ViRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5zdWJzKSByZXR1cm47XG5cbiAgdmFyIGlvID0gdGhpcy5pbztcbiAgdGhpcy5zdWJzID0gW1xuICAgIG9uKGlvLCAnb3BlbicsIGJpbmQodGhpcywgJ29ub3BlbicpKSxcbiAgICBvbihpbywgJ3BhY2tldCcsIGJpbmQodGhpcywgJ29ucGFja2V0JykpLFxuICAgIG9uKGlvLCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpXG4gIF07XG59O1xuXG4vKipcbiAqIFwiT3BlbnNcIiB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vcGVuID1cblNvY2tldC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSByZXR1cm4gdGhpcztcblxuICB0aGlzLnN1YkV2ZW50cygpO1xuICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5pby5yZWFkeVN0YXRlKSB0aGlzLm9ub3BlbigpO1xuICB0aGlzLmVtaXQoJ2Nvbm5lY3RpbmcnKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICBhcmdzLnVuc2hpZnQoJ21lc3NhZ2UnKTtcbiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogT3ZlcnJpZGUgYGVtaXRgLlxuICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldikpIHtcbiAgICBlbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgdmFyIHBhY2tldCA9IHtcbiAgICB0eXBlOiAodGhpcy5mbGFncy5iaW5hcnkgIT09IHVuZGVmaW5lZCA/IHRoaXMuZmxhZ3MuYmluYXJ5IDogaGFzQmluKGFyZ3MpKSA/IHBhcnNlci5CSU5BUllfRVZFTlQgOiBwYXJzZXIuRVZFTlQsXG4gICAgZGF0YTogYXJnc1xuICB9O1xuXG4gIHBhY2tldC5vcHRpb25zID0ge307XG4gIHBhY2tldC5vcHRpb25zLmNvbXByZXNzID0gIXRoaXMuZmxhZ3MgfHwgZmFsc2UgIT09IHRoaXMuZmxhZ3MuY29tcHJlc3M7XG5cbiAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdKSB7XG4gICAgZGVidWcoJ2VtaXR0aW5nIHBhY2tldCB3aXRoIGFjayBpZCAlZCcsIHRoaXMuaWRzKTtcbiAgICB0aGlzLmFja3NbdGhpcy5pZHNdID0gYXJncy5wb3AoKTtcbiAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG5cbiAgdGhpcy5mbGFncyA9IHt9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICB0aGlzLmlvLnBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygndHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nJyk7XG5cbiAgLy8gd3JpdGUgY29ubmVjdCBwYWNrZXQgaWYgbmVjZXNzYXJ5XG4gIGlmICgnLycgIT09IHRoaXMubnNwKSB7XG4gICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeSA9IHR5cGVvZiB0aGlzLnF1ZXJ5ID09PSAnb2JqZWN0JyA/IHBhcnNlcXMuZW5jb2RlKHRoaXMucXVlcnkpIDogdGhpcy5xdWVyeTtcbiAgICAgIGRlYnVnKCdzZW5kaW5nIGNvbm5lY3QgcGFja2V0IHdpdGggcXVlcnkgJXMnLCBxdWVyeSk7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1R9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlYXNvblxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UgKCVzKScsIHJlYXNvbik7XG4gIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgZGVsZXRlIHRoaXMuaWQ7XG4gIHRoaXMuZW1pdCgnZGlzY29ubmVjdCcsIHJlYXNvbik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgdmFyIHJvb3ROYW1lc3BhY2VFcnJvciA9IHBhY2tldC50eXBlID09PSBwYXJzZXIuRVJST1IgJiYgcGFja2V0Lm5zcCA9PT0gJy8nO1xuXG4gIGlmICghc2FtZU5hbWVzcGFjZSAmJiAhcm9vdE5hbWVzcGFjZUVycm9yKSByZXR1cm47XG5cbiAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgIGNhc2UgcGFyc2VyLkNPTk5FQ1Q6XG4gICAgICB0aGlzLm9uY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfRVZFTlQ6XG4gICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5CSU5BUllfQUNLOlxuICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5ESVNDT05ORUNUOlxuICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBwYXJzZXIuRVJST1I6XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcGFja2V0LmRhdGEpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmV2ZW50ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICBkZWJ1ZygnZW1pdHRpbmcgZXZlbnQgJWonLCBhcmdzKTtcblxuICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICBkZWJ1ZygnYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudCcpO1xuICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goYXJncyk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmFjayA9IGZ1bmN0aW9uIChpZCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzZW50ID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgaWYgKHNlbnQpIHJldHVybjtcbiAgICBzZW50ID0gdHJ1ZTtcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICBkZWJ1Zygnc2VuZGluZyBhY2sgJWonLCBhcmdzKTtcblxuICAgIHNlbGYucGFja2V0KHtcbiAgICAgIHR5cGU6IGhhc0JpbihhcmdzKSA/IHBhcnNlci5CSU5BUllfQUNLIDogcGFyc2VyLkFDSyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIGRhdGE6IGFyZ3NcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdmFyIGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFjaykge1xuICAgIGRlYnVnKCdjYWxsaW5nIGFjayAlcyB3aXRoICVqJywgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7XG4gICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ2JhZCBhY2sgJXMnLCBwYWNrZXQuaWQpO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnY29ubmVjdCcpO1xuICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xufTtcblxuLyoqXG4gKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGVtaXQuYXBwbHkodGhpcywgdGhpcy5yZWNlaXZlQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5wYWNrZXQodGhpcy5zZW5kQnVmZmVyW2ldKTtcbiAgfVxuICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICB0aGlzLmRlc3Ryb3koKTtcbiAgdGhpcy5vbmNsb3NlKCdpbyBzZXJ2ZXIgZGlzY29ubmVjdCcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmRcbiAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZS5cbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHtcbiAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vicy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdWJzW2ldLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5zdWJzID0gbnVsbDtcbiAgfVxuXG4gIHRoaXMuaW8uZGVzdHJveSh0aGlzKTtcbn07XG5cbi8qKlxuICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9XG5Tb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgIGRlYnVnKCdwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTtcbiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgdGhpcy5kZXN0cm95KCk7XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgLy8gZmlyZSBldmVudHNcbiAgICB0aGlzLm9uY2xvc2UoJ2lvIGNsaWVudCBkaXNjb25uZWN0Jyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoY29tcHJlc3MpIHtcbiAgdGhpcy5mbGFncy5jb21wcmVzcyA9IGNvbXByZXNzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgYmluYXJ5IGZsYWdcbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHdoZXRoZXIgdGhlIGVtaXR0ZWQgZGF0YSBjb250YWlucyBiaW5hcnlcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmJpbmFyeSA9IGZ1bmN0aW9uIChiaW5hcnkpIHtcbiAgdGhpcy5mbGFncy5iaW5hcnkgPSBiaW5hcnk7XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGVpbyA9IHJlcXVpcmUoJ2VuZ2luZS5pby1jbGllbnQnKTtcbnZhciBTb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6bWFuYWdlcicpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgQmFja29mZiA9IHJlcXVpcmUoJ2JhY2tvMicpO1xuXG4vKipcbiAqIElFNisgaGFzT3duUHJvcGVydHlcbiAqL1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0c1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTWFuYWdlcjtcblxuLyoqXG4gKiBgTWFuYWdlcmAgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGVuZ2luZSBpbnN0YW5jZSBvciBlbmdpbmUgdXJpL29wdHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIE1hbmFnZXIgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWFuYWdlcikpIHJldHVybiBuZXcgTWFuYWdlcih1cmksIG9wdHMpO1xuICBpZiAodXJpICYmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkpIHtcbiAgICBvcHRzID0gdXJpO1xuICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgfVxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBvcHRzLnBhdGggPSBvcHRzLnBhdGggfHwgJy9zb2NrZXQuaW8nO1xuICB0aGlzLm5zcHMgPSB7fTtcbiAgdGhpcy5zdWJzID0gW107XG4gIHRoaXMub3B0cyA9IG9wdHM7XG4gIHRoaXMucmVjb25uZWN0aW9uKG9wdHMucmVjb25uZWN0aW9uICE9PSBmYWxzZSk7XG4gIHRoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMob3B0cy5yZWNvbm5lY3Rpb25BdHRlbXB0cyB8fCBJbmZpbml0eSk7XG4gIHRoaXMucmVjb25uZWN0aW9uRGVsYXkob3B0cy5yZWNvbm5lY3Rpb25EZWxheSB8fCAxMDAwKTtcbiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heChvcHRzLnJlY29ubmVjdGlvbkRlbGF5TWF4IHx8IDUwMDApO1xuICB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3Iob3B0cy5yYW5kb21pemF0aW9uRmFjdG9yIHx8IDAuNSk7XG4gIHRoaXMuYmFja29mZiA9IG5ldyBCYWNrb2ZmKHtcbiAgICBtaW46IHRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSxcbiAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxcbiAgICBqaXR0ZXI6IHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigpXG4gIH0pO1xuICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLnVyaSA9IHVyaTtcbiAgdGhpcy5jb25uZWN0aW5nID0gW107XG4gIHRoaXMubGFzdFBpbmcgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gZmFsc2U7XG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHZhciBfcGFyc2VyID0gb3B0cy5wYXJzZXIgfHwgcGFyc2VyO1xuICB0aGlzLmVuY29kZXIgPSBuZXcgX3BhcnNlci5FbmNvZGVyKCk7XG4gIHRoaXMuZGVjb2RlciA9IG5ldyBfcGFyc2VyLkRlY29kZXIoKTtcbiAgdGhpcy5hdXRvQ29ubmVjdCA9IG9wdHMuYXV0b0Nvbm5lY3QgIT09IGZhbHNlO1xuICBpZiAodGhpcy5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7XG59XG5cbi8qKlxuICogUHJvcGFnYXRlIGdpdmVuIGV2ZW50IHRvIHNvY2tldHMgYW5kIGVtaXQgb24gYHRoaXNgXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZW1pdEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7XG4gICAgICB0aGlzLm5zcHNbbnNwXS5lbWl0LmFwcGx5KHRoaXMubnNwc1tuc3BdLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGUgYHNvY2tldC5pZGAgb2YgYWxsIHNvY2tldHNcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVTb2NrZXRJZHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7XG4gICAgICB0aGlzLm5zcHNbbnNwXS5pZCA9IHRoaXMuZ2VuZXJhdGVJZChuc3ApO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZW5lcmF0ZSBgc29ja2V0LmlkYCBmb3IgdGhlIGdpdmVuIGBuc3BgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5zcFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIChuc3ApIHtcbiAgcmV0dXJuIChuc3AgPT09ICcvJyA/ICcnIDogKG5zcCArICcjJykpICsgdGhpcy5lbmdpbmUuaWQ7XG59O1xuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihNYW5hZ2VyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHJlY29ubmVjdGlvbmAgY29uZmlnLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdHJ1ZS9mYWxzZSBpZiBpdCBzaG91bGQgYXV0b21hdGljYWxseSByZWNvbm5lY3RcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uO1xuICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgY29uZmlnLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXggcmVjb25uZWN0aW9uIGF0dGVtcHRzIGJlZm9yZSBnaXZpbmcgdXBcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uQXR0ZW1wdHMgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cztcbiAgdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMgPSB2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgZGVsYXkgYmV0d2VlbiByZWNvbm5lY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheVxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3Rpb25EZWxheSA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xuICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0TWluKHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbk1hbmFnZXIucHJvdG90eXBlLnJhbmRvbWl6YXRpb25GYWN0b3IgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yO1xuICB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRKaXR0ZXIodik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXhpbXVtIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXlNYXggPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heDtcbiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXggPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1heCh2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGNvbm5lY3Rpb24gdGltZW91dC4gYGZhbHNlYCB0byBkaXNhYmxlXG4gKlxuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZiBvciB2YWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fdGltZW91dDtcbiAgdGhpcy5fdGltZW91dCA9IHY7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTdGFydHMgdHJ5aW5nIHRvIHJlY29ubmVjdCBpZiByZWNvbm5lY3Rpb24gaXMgZW5hYmxlZCBhbmQgd2UgaGF2ZSBub3RcbiAqIHN0YXJ0ZWQgcmVjb25uZWN0aW5nIHlldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm1heWJlUmVjb25uZWN0T25PcGVuID0gZnVuY3Rpb24gKCkge1xuICAvLyBPbmx5IHRyeSB0byByZWNvbm5lY3QgaWYgaXQncyB0aGUgZmlyc3QgdGltZSB3ZSdyZSBjb25uZWN0aW5nXG4gIGlmICghdGhpcy5yZWNvbm5lY3RpbmcgJiYgdGhpcy5fcmVjb25uZWN0aW9uICYmIHRoaXMuYmFja29mZi5hdHRlbXB0cyA9PT0gMCkge1xuICAgIC8vIGtlZXBzIHJlY29ubmVjdGlvbiBmcm9tIGZpcmluZyB0d2ljZSBmb3IgdGhlIHNhbWUgcmVjb25uZWN0aW9uIGxvb3BcbiAgICB0aGlzLnJlY29ubmVjdCgpO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0IGBzb2NrZXRgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbmFsLCBjYWxsYmFja1xuICogQHJldHVybiB7TWFuYWdlcn0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vcGVuID1cbk1hbmFnZXIucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoZm4sIG9wdHMpIHtcbiAgZGVidWcoJ3JlYWR5U3RhdGUgJXMnLCB0aGlzLnJlYWR5U3RhdGUpO1xuICBpZiAofnRoaXMucmVhZHlTdGF0ZS5pbmRleE9mKCdvcGVuJykpIHJldHVybiB0aGlzO1xuXG4gIGRlYnVnKCdvcGVuaW5nICVzJywgdGhpcy51cmkpO1xuICB0aGlzLmVuZ2luZSA9IGVpbyh0aGlzLnVyaSwgdGhpcy5vcHRzKTtcbiAgdmFyIHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcbiAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG5cbiAgLy8gZW1pdCBgb3BlbmBcbiAgdmFyIG9wZW5TdWIgPSBvbihzb2NrZXQsICdvcGVuJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25vcGVuKCk7XG4gICAgZm4gJiYgZm4oKTtcbiAgfSk7XG5cbiAgLy8gZW1pdCBgY29ubmVjdF9lcnJvcmBcbiAgdmFyIGVycm9yU3ViID0gb24oc29ja2V0LCAnZXJyb3InLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRlYnVnKCdjb25uZWN0X2Vycm9yJyk7XG4gICAgc2VsZi5jbGVhbnVwKCk7XG4gICAgc2VsZi5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gICAgc2VsZi5lbWl0QWxsKCdjb25uZWN0X2Vycm9yJywgZGF0YSk7XG4gICAgaWYgKGZuKSB7XG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdDb25uZWN0aW9uIGVycm9yJyk7XG4gICAgICBlcnIuZGF0YSA9IGRhdGE7XG4gICAgICBmbihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPbmx5IGRvIHRoaXMgaWYgdGhlcmUgaXMgbm8gZm4gdG8gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgc2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gZW1pdCBgY29ubmVjdF90aW1lb3V0YFxuICBpZiAoZmFsc2UgIT09IHRoaXMuX3RpbWVvdXQpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgZGVidWcoJ2Nvbm5lY3QgYXR0ZW1wdCB3aWxsIHRpbWVvdXQgYWZ0ZXIgJWQnLCB0aW1lb3V0KTtcblxuICAgIC8vIHNldCB0aW1lclxuICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZGVidWcoJ2Nvbm5lY3QgYXR0ZW1wdCB0aW1lZCBvdXQgYWZ0ZXIgJWQnLCB0aW1lb3V0KTtcbiAgICAgIG9wZW5TdWIuZGVzdHJveSgpO1xuICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgICBzb2NrZXQuZW1pdCgnZXJyb3InLCAndGltZW91dCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdjb25uZWN0X3RpbWVvdXQnLCB0aW1lb3V0KTtcbiAgICB9LCB0aW1lb3V0KTtcblxuICAgIHRoaXMuc3Vicy5wdXNoKHtcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuc3Vicy5wdXNoKG9wZW5TdWIpO1xuICB0aGlzLnN1YnMucHVzaChlcnJvclN1Yik7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBvcGVuLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ29wZW4nKTtcblxuICAvLyBjbGVhciBvbGQgc3Vic1xuICB0aGlzLmNsZWFudXAoKTtcblxuICAvLyBtYXJrIGFzIG9wZW5cbiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcblxuICAvLyBhZGQgbmV3IHN1YnNcbiAgdmFyIHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdkYXRhJywgYmluZCh0aGlzLCAnb25kYXRhJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncGluZycsIGJpbmQodGhpcywgJ29ucGluZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ3BvbmcnLCBiaW5kKHRoaXMsICdvbnBvbmcnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdlcnJvcicsIGJpbmQodGhpcywgJ29uZXJyb3InKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbih0aGlzLmRlY29kZXIsICdkZWNvZGVkJywgYmluZCh0aGlzLCAnb25kZWNvZGVkJykpKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBwaW5nLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5sYXN0UGluZyA9IG5ldyBEYXRlKCk7XG4gIHRoaXMuZW1pdEFsbCgncGluZycpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnBvbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdEFsbCgncG9uZycsIG5ldyBEYXRlKCkgLSB0aGlzLmxhc3RQaW5nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmRlY29kZWQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc29ja2V0IGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdlcnJvcicsIGVycik7XG4gIHRoaXMuZW1pdEFsbCgnZXJyb3InLCBlcnIpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNvY2tldCBmb3IgdGhlIGdpdmVuIGBuc3BgLlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuc29ja2V0ID0gZnVuY3Rpb24gKG5zcCwgb3B0cykge1xuICB2YXIgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07XG4gIGlmICghc29ja2V0KSB7XG4gICAgc29ja2V0ID0gbmV3IFNvY2tldCh0aGlzLCBuc3AsIG9wdHMpO1xuICAgIHRoaXMubnNwc1tuc3BdID0gc29ja2V0O1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3RpbmcnLCBvbkNvbm5lY3RpbmcpO1xuICAgIHNvY2tldC5vbignY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNvY2tldC5pZCA9IHNlbGYuZ2VuZXJhdGVJZChuc3ApO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHtcbiAgICAgIC8vIG1hbnVhbGx5IGNhbGwgaGVyZSBzaW5jZSBjb25uZWN0aW5nIGV2ZW50IGlzIGZpcmVkIGJlZm9yZSBsaXN0ZW5pbmdcbiAgICAgIG9uQ29ubmVjdGluZygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ29ubmVjdGluZyAoKSB7XG4gICAgaWYgKCF+aW5kZXhPZihzZWxmLmNvbm5lY3RpbmcsIHNvY2tldCkpIHtcbiAgICAgIHNlbGYuY29ubmVjdGluZy5wdXNoKHNvY2tldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNvY2tldDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBzb2NrZXQgY2xvc2UuXG4gKlxuICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldFxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoc29ja2V0KSB7XG4gIHZhciBpbmRleCA9IGluZGV4T2YodGhpcy5jb25uZWN0aW5nLCBzb2NrZXQpO1xuICBpZiAofmluZGV4KSB0aGlzLmNvbm5lY3Rpbmcuc3BsaWNlKGluZGV4LCAxKTtcbiAgaWYgKHRoaXMuY29ubmVjdGluZy5sZW5ndGgpIHJldHVybjtcblxuICB0aGlzLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIGRlYnVnKCd3cml0aW5nIHBhY2tldCAlaicsIHBhY2tldCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKHBhY2tldC5xdWVyeSAmJiBwYWNrZXQudHlwZSA9PT0gMCkgcGFja2V0Lm5zcCArPSAnPycgKyBwYWNrZXQucXVlcnk7XG5cbiAgaWYgKCFzZWxmLmVuY29kaW5nKSB7XG4gICAgLy8gZW5jb2RlLCB0aGVuIHdyaXRlIHRvIGVuZ2luZSB3aXRoIHJlc3VsdFxuICAgIHNlbGYuZW5jb2RpbmcgPSB0cnVlO1xuICAgIHRoaXMuZW5jb2Rlci5lbmNvZGUocGFja2V0LCBmdW5jdGlvbiAoZW5jb2RlZFBhY2tldHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VsZi5lbmdpbmUud3JpdGUoZW5jb2RlZFBhY2tldHNbaV0sIHBhY2tldC5vcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHNlbGYuZW5jb2RpbmcgPSBmYWxzZTtcbiAgICAgIHNlbGYucHJvY2Vzc1BhY2tldFF1ZXVlKCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7IC8vIGFkZCBwYWNrZXQgdG8gdGhlIHF1ZXVlXG4gICAgc2VsZi5wYWNrZXRCdWZmZXIucHVzaChwYWNrZXQpO1xuICB9XG59O1xuXG4vKipcbiAqIElmIHBhY2tldCBidWZmZXIgaXMgbm9uLWVtcHR5LCBiZWdpbnMgZW5jb2RpbmcgdGhlXG4gKiBuZXh0IHBhY2tldCBpbiBsaW5lLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnByb2Nlc3NQYWNrZXRRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucGFja2V0QnVmZmVyLmxlbmd0aCA+IDAgJiYgIXRoaXMuZW5jb2RpbmcpIHtcbiAgICB2YXIgcGFjayA9IHRoaXMucGFja2V0QnVmZmVyLnNoaWZ0KCk7XG4gICAgdGhpcy5wYWNrZXQocGFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgdHJhbnNwb3J0IHN1YnNjcmlwdGlvbnMgYW5kIHBhY2tldCBidWZmZXIuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NsZWFudXAnKTtcblxuICB2YXIgc3Vic0xlbmd0aCA9IHRoaXMuc3Vicy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic0xlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHN1YiA9IHRoaXMuc3Vicy5zaGlmdCgpO1xuICAgIHN1Yi5kZXN0cm95KCk7XG4gIH1cblxuICB0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO1xuICB0aGlzLmVuY29kaW5nID0gZmFsc2U7XG4gIHRoaXMubGFzdFBpbmcgPSBudWxsO1xuXG4gIHRoaXMuZGVjb2Rlci5kZXN0cm95KCk7XG59O1xuXG4vKipcbiAqIENsb3NlIHRoZSBjdXJyZW50IHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbG9zZSA9XG5NYW5hZ2VyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnZGlzY29ubmVjdCcpO1xuICB0aGlzLnNraXBSZWNvbm5lY3QgPSB0cnVlO1xuICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAvLyBgb25jbG9zZWAgd2lsbCBub3QgZmlyZSBiZWNhdXNlXG4gICAgLy8gYW4gb3BlbiBldmVudCBuZXZlciBoYXBwZW5lZFxuICAgIHRoaXMuY2xlYW51cCgpO1xuICB9XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgaWYgKHRoaXMuZW5naW5lKSB0aGlzLmVuZ2luZS5jbG9zZSgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgZGVidWcoJ29uY2xvc2UnKTtcblxuICB0aGlzLmNsZWFudXAoKTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJywgcmVhc29uKTtcblxuICBpZiAodGhpcy5fcmVjb25uZWN0aW9uICYmICF0aGlzLnNraXBSZWNvbm5lY3QpIHtcbiAgICB0aGlzLnJlY29ubmVjdCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEF0dGVtcHQgYSByZWNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5yZWNvbm5lY3RpbmcgfHwgdGhpcy5za2lwUmVjb25uZWN0KSByZXR1cm4gdGhpcztcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYmFja29mZi5hdHRlbXB0cyA+PSB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cykge1xuICAgIGRlYnVnKCdyZWNvbm5lY3QgZmFpbGVkJyk7XG4gICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgdGhpcy5lbWl0QWxsKCdyZWNvbm5lY3RfZmFpbGVkJyk7XG4gICAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGVsYXkgPSB0aGlzLmJhY2tvZmYuZHVyYXRpb24oKTtcbiAgICBkZWJ1Zygnd2lsbCB3YWl0ICVkbXMgYmVmb3JlIHJlY29ubmVjdCBhdHRlbXB0JywgZGVsYXkpO1xuXG4gICAgdGhpcy5yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBkZWJ1ZygnYXR0ZW1wdGluZyByZWNvbm5lY3QnKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2F0dGVtcHQnLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RpbmcnLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuXG4gICAgICAvLyBjaGVjayBhZ2FpbiBmb3IgdGhlIGNhc2Ugc29ja2V0IGNsb3NlZCBpbiBhYm92ZSBldmVudHNcbiAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpIHJldHVybjtcblxuICAgICAgc2VsZi5vcGVuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3QgYXR0ZW1wdCBlcnJvcicpO1xuICAgICAgICAgIHNlbGYucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3QoKTtcbiAgICAgICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdF9lcnJvcicsIGVyci5kYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWJ1ZygncmVjb25uZWN0IHN1Y2Nlc3MnKTtcbiAgICAgICAgICBzZWxmLm9ucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGRlbGF5KTtcblxuICAgIHRoaXMuc3Vicy5wdXNoKHtcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGF0dGVtcHQgPSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHM7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnVwZGF0ZVNvY2tldElkcygpO1xuICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdCcsIGF0dGVtcHQpO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwO1xuXG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5cbnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTtcblxuLyoqXG4gKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy5cbiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6XG4gKlxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2BcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgXG4gKlxuICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCxcbiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7XG4gIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICB2YXIgaWQgPSBwYXJzZWQuaWQ7XG4gIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7XG4gIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7XG4gIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7XG5cbiAgdmFyIGlvO1xuXG4gIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGlvID0gY2FjaGVbaWRdO1xuICB9XG4gIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcbiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5O1xuICB9XG4gIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sO1xuXG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcblxuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5NYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7XG5leHBvcnRzLlNvY2tldCA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG4iLCJpbXBvcnQge2gsQ29tcG9uZW50fSBmcm9tICdwcmVhY3QnXG5pbXBvcnQgaW8gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIlxuXG5cbmNsYXNzIFNvY2tldENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGU9eyB0b2tlbjogbnVsbCwgc29ja2V0OiBudWxsLGNvbm5lY3RlZDpmYWxzZSB9XG4gICAgYXN5bmMgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcblxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lIH0gPSB0aGlzLnByb3BzXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYW5vbnltb3VzYCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdXNlcm5hbWUgfSksXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBpbyhSRUFDVF9BUFBfU09DS0VUX1VSTCwgeyBxdWVyeTogYHRva2VuPSR7ZGF0YS50b2tlbn1gIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yIGZyb20gc29ja2V0XCIsIGVycm9yKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29ubmVjdGVkOnRydWV9KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNvY2tldDogdGhpcy5zb2NrZXQgfSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IuLi4uXCIsIGVycm9yKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzXG4gICAgICAgIGNvbnN0e2Nvbm5lY3RlZH09dGhpcy5zdGF0ZVxuICAgIFxuXG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4oeyBzb2NrZXQ6IHRoaXMuc3RhdGUuc29ja2V0LGNvbm5lY3RlZCB9KVxuICAgICAgICBcbiBcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvY2tldENvbXBvbmVudCIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJcblxuaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXG5cbmNvbnN0IERhdGVMaW5lYnJlYWsgPSh7ZGF0ZXRpbWV9KT0+e1xuICAgIHJldHVybiAoXG48ZGl2IHN0eWxlPXt7ZGlzcGxheTpcImZsZXhcIn19PlxuPGRpdiBzdHlsZT17e2ZsZXg6XCIxXCJ9fT48aHIgLz48L2Rpdj5cbjxkaXY+e25ldyBEYXRlKGRhdGV0aW1lKS50b0xvY2FsZURhdGVTdHJpbmcoKX08L2Rpdj5cbjxkaXYgc3R5bGU9e3tmbGV4OjF9fT48aHIgLz48L2Rpdj5cbjwvZGl2PlxuKVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRlTGluZWJyZWFrIiwiaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXG5cbmNvbnN0IE1lc3NhZ2VBbGlnbmVyID0gKHsgY2hpbGRyZW4sIHNpZGUsIHN0eWxlIH0pID0+IHtcbiAgICBjb25zdCBhbGlnbm1lbnQgPSBzaWRlID09PSBcImxlZnRcIiA/IFwiZmxleC1zdGFydFwiIDogXCJmbGV4LWVuZFwiXG4gICAgcmV0dXJuIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIGp1c3RpZnlDb250ZW50OiBhbGlnbm1lbnQsIC4uLnN0eWxlIH19PntjaGlsZHJlbn08L2Rpdj5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlQWxpZ25lciIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xuXG5cbmNvbnN0IE1lc3NhZ2VWaWV3ID0gKHsgbWVzc2FnZSwgYmFja2dyb3VuZENvbG9yLCBkYXRldGltZSB9KSA9PiAoXG48ZGl2IHN0eWxlPXt7XG4gIGJhY2tncm91bmRDb2xvcixcbiAgcGFkZGluZzogNSxcbiAgbWFyZ2luOiAyLFxuICBib3JkZXJSYWRpdXM6IDE1LFxuICBib3JkZXJDb2xvcjogJyM5RTlFOUUnLFxuICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgYm9yZGVyV2lkdGg6IDIsXG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIHdvcmRXcmFwOiAnYnJlYWstd29yZCcsXG4gIHdvcmRCcmVhazogJ2JyZWFrLWFsbCcsXG4gIG1pbldpZHRoOiAnMzAlJyxcbn19XG4+XG4gICAgPGRpdj57bWVzc2FnZX08L2Rpdj5cbiAgICA8ZGl2IHN0eWxlPXt7XG4gICAgICBmb250U2l6ZTogMTAsXG4gICAgICBwYWRkaW5nVG9wOiAyLFxuICAgICAgdGV4dEFsaWduOiAnZW5kJyxcbiAgICB9fVxuICAgID5cbjxpIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyNlZmViZTknIH19PntuZXcgRGF0ZShkYXRldGltZSkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9PC9pPlxuXG4gICAgPC9kaXY+XG48L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VWaWV3O1xuIiwiaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXG5pbXBvcnQgTWVzc2FnZSBmcm9tICcuL21lc3NhZ2UtdmlldydcblxuY29uc3QgU3Vic2VxdWVudE1lc3NhZ2UgPSAoeyBtZXNzYWdlLCBkYXRldGltZSB9KSA9PiB7XG5cbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsIG1hcmdpbkxlZnQ6NDUgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TWVzc2FnZSBtZXNzYWdlPXttZXNzYWdlfSBkYXRldGltZT17ZGF0ZXRpbWV9IGJhY2tncm91bmRDb2xvcj1cIiNGRkVDQjNcIiAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3Vic2VxdWVudE1lc3NhZ2UiLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcblxuY29uc3Qgc3R5bGUgPSB7XG4gIGhlaWdodDogMzAsXG4gIHdpZHRoOiA0MCxcbiAgcGFkZGluZzogMyxcbiAgYm9yZGVyUmFkaXVzOiAzMCxcbiAgYmFja2dyb3VuZENvbG9yOiAnZGFya1Ntb2tlJyxcbiAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIGJvcmRlcldpZHRoOiAyLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGNvbG9yOiAnIzAwOTY4OCcsXG4gIGJvcmRlckNvbG9yOiAnIzgwY2JjNCcsXG59O1xuXG5cbmNvbnN0IE1lc3NhZ2VBdmF0YXIgPSAoeyBsZXR0ZXIgPSAnVScgfSkgPT4gKDxkaXYgc3R5bGU9e3N0eWxlfT48ZGl2PntsZXR0ZXIudG9VcHBlckNhc2UoKX08L2Rpdj48L2Rpdj4pO1xuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlQXZhdGFyO1xuIiwiaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXG5pbXBvcnQgTWVzc2FnZSBmcm9tICcuL21lc3NhZ2UtdmlldydcbmltcG9ydCBNZXNzYWdlQXZhdGFyIGZyb20gJy4vbWVzc2FnZS1hdmF0YXInXG5cbmNvbnN0IEZpcnN0TWVzc2FnZSA9ICh7IG1lc3NhZ2UsIGRhdGV0aW1lLGxldHRlcixsb2NhbCB9KSA9PiB7XG5cbiAgICByZXR1cm4gKFxuXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJmbGV4XCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIgfX0+XG4gICAgICAgICAgICB7IWxvY2FsICYmPE1lc3NhZ2VBdmF0YXIgbGV0dGVyPXtsZXR0ZXJ9IC8+fVxuICAgICAgICAgICAgPE1lc3NhZ2UgbWVzc2FnZT17bWVzc2FnZX0gZGF0ZXRpbWU9e2RhdGV0aW1lfSBiYWNrZ3JvdW5kQ29sb3I9XCIjRkZFQ0IzXCIgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpcnN0TWVzc2FnZSIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2pzeC1wcm9wcy1uby1zcHJlYWRpbmcgKi9cbmltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnO1xuaW1wb3J0IE1lc3NhZ2VBbGlnbmVyIGZyb20gJy4vbWVzc2FnZS1hbGlnbmVyJztcbmltcG9ydCBGaXJzdE1lc3NhZ2UgZnJvbSAnLi9maXJzdC1tZXNzYWdlJztcbmltcG9ydCBTdWJzZXF1ZW50TWVzc2FnZSBmcm9tICcuL3N1YnNlcXVlbnQtbWVzc2FnZSc7XG5pbXBvcnQgRGF0ZUxpbmVicmVhayBmcm9tICcuL2RhdGUtbGluZWJyZWFrJztcblxuY29uc3QgTWVzc2FnZU9iamVjdE1hcHB0ZXIgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IG9yZGVyLCBkYXRlU3BhY2UgfSA9IHByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7ZGF0ZVNwYWNlICYmIDxEYXRlTGluZWJyZWFrIHsuLi5wcm9wc30gLz59XG4gICAgICAgICAgICA8TWVzc2FnZUFsaWduZXIgey4uLnByb3BzfT5cbiAgICAgICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAgICAgb3JkZXIgPT09ICdGJyA/IDxGaXJzdE1lc3NhZ2Ugey4uLnByb3BzfSAvPiA6IDxTdWJzZXF1ZW50TWVzc2FnZSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICA8L01lc3NhZ2VBbGlnbmVyPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZU9iamVjdE1hcHB0ZXI7XG4iLCJpbXBvcnQge2h9IGZyb20gJ3ByZWFjdCdcbmltcG9ydCB7dXNlU3RhdGUsdXNlRWZmZWN0fSBmcm9tICdwcmVhY3QvaG9va3MnXG5cbmNvbnN0IHVzZU1lc3NhZ2VzTWFwcGVyID0obWVzc2FnZXMpPT57XG4gIGNvbnN0IFttYXBwZWRNZXNzYWdlcyxzZXRNYXBwZWRNZXNzYWdlc109dXNlU3RhdGUobWVzc2FnZXMpXG4gIGNvbnN0IG1hcE1lc3NhZ2VzID0oKT0+e1xuICAgIGNvbnN0IGxvY2FsU2lkZSA9XCJyaWdodFwiXG4gICAgY29uc3QgcmVtb3RlU2lkZT1cImxlZnRcIlxuICAgIGlmKG1lc3NhZ2VzLmxlbmd0aD09PTApe1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgICAgbGV0IGVtYWlsID0gbWVzc2FnZXNbMF0uZnJvbVxuICAgICAgbGV0IGxhc3REYXRldGltZSA9IG1lc3NhZ2VzWzBdLmRhdGV0aW1lXG4gICAgcmV0dXJuIG1lc3NhZ2VzLm1hcCgobSwgaSkgPT4ge1xuICBcbiAgICAgIGlmIChpID09PSAwICYmIG0ubG9jYWwpIHtcbiAgICAgIFxuICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IGxvY2FsU2lkZSwgb3JkZXI6IFwiRlwiLCBkYXRlU3BhY2U6IHRydWUgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IDAgJiYgIW0ubG9jYWwpIHtcbiAgICAgXG4gICAgICAgIGNvbnN0IGxldHRlciA9IG0uZnJvbVswXSAhPT11bmRlZmluZWQgPyBtLmZyb21bMF06XCJcIlxuICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IHJlbW90ZVNpZGUsIG9yZGVyOiBcIkZcIiwgZGF0ZVNwYWNlOiB0cnVlLGxldHRlciB9XG4gICAgICB9XG4gICBcbiAgICAgIGlmIChpID4gMCAmJiBlbWFpbCA9PT0gbS5mcm9tICYmIG0ubG9jYWwpIHtcbiAgICAgICAgICBpZiAobmV3IERhdGUobGFzdERhdGV0aW1lKS5nZXREYXRlKCkgIT09IG5ldyBEYXRlKG0uZGF0ZXRpbWUpLmdldERhdGUoKSkge1xuICAgICAgICAgIFxuICAgICAgICAgICAgICBlbWFpbCA9IG0uZnJvbVxuICAgICAgICAgICAgICBsYXN0RGF0ZXRpbWUgPSBtLmRhdGV0aW1lXG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IGxvY2FsU2lkZSwgb3JkZXI6IFwiU1wiLCBkYXRlU3BhY2U6IHRydWUgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAgICAgZW1haWwgPSBtLmZyb21cbiAgICAgICAgICAgICAgbGFzdERhdGV0aW1lID0gbS5kYXRldGltZVxuICAgICAgICAgICAgICByZXR1cm4geyAuLi5tLCBzaWRlOiBsb2NhbFNpZGUsIG9yZGVyOiBcIlNcIiwgZGF0ZVNwYWNlOiBmYWxzZSB9XG4gICAgICAgICAgXG4gICAgICB9XG4gIFxuICAgICAgaWYgKGkgPiAwICYmIGVtYWlsICE9PSBtLmZyb20gJiYgbS5sb2NhbCkge1xuICAgICAgICBcbiAgICAgICAgICBpZiAobmV3IERhdGUobGFzdERhdGV0aW1lKS5nZXREYXRlKCkgPT09IG5ldyBEYXRlKG0uZGF0ZXRpbWUpLmdldERhdGUoKSkge1xuICAgICAgICAgXG4gICAgICAgICAgICAgIGVtYWlsID0gbS5mcm9tXG4gICAgICAgICAgICAgIGxhc3REYXRldGltZSA9IG0uZGF0ZXRpbWVcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubSwgc2lkZTogbG9jYWxTaWRlLCBvcmRlcjogXCJGXCIsIGRhdGVTcGFjZTogZmFsc2UgfVxuICAgICAgICAgIH0gXG4gICAgICAgICAgICAgIGVtYWlsID0gbS5mcm9tXG4gICAgICAgICAgICAgIGxhc3REYXRldGltZSA9IG0uZGF0ZXRpbWVcbiAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubSwgc2lkZTogbG9jYWxTaWRlLCBvcmRlcjogXCJGXCIsIGRhdGVTcGFjZTogdHJ1ZSB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChpID4gMCAmJiBlbWFpbCA9PT0gbS5mcm9tICYmICFtLmxvY2FsKSB7XG4gICAgICAgIFxuICAgICAgICAgIGlmIChuZXcgRGF0ZShsYXN0RGF0ZXRpbWUpLmdldERhdGUoKSAhPT0gbmV3IERhdGUobS5kYXRldGltZSkuZ2V0RGF0ZSgpKSB7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgIGNvbnN0IGxldHRlciA9IG0uZnJvbVswXSAhPT11bmRlZmluZWQgPyBtLmZyb21bMF06XCJcIlxuICAgICAgICAgICAgICBsYXN0RGF0ZXRpbWUgPSBtLmRhdGV0aW1lXG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IHJlbW90ZVNpZGUsIG9yZGVyOiBcIlNcIiwgZGF0ZVNwYWNlOiB0cnVlLGxldHRlciB9XG4gICAgICAgICAgfSBcbiAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGxldHRlciA9IG0uZnJvbVswXSAhPT11bmRlZmluZWQgPyBtLmZyb21bMF06XCJcIlxuICAgICAgICAgICAgICBsYXN0RGF0ZXRpbWUgPSBtLmRhdGV0aW1lXG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IHJlbW90ZVNpZGUsIG9yZGVyOiBcIlNcIiwgZGF0ZVNwYWNlOiBmYWxzZSxsZXR0ZXIgfVxuICAgICAgICAgIFxuICAgICAgfVxuICAgICAgaWYgKGkgPiAwICYmIGVtYWlsICE9PSBtLmZyb20gJiYgIW0ubG9jYWwpIHtcbiAgICAgICAgXG4gICAgICAgICAgaWYgKG5ldyBEYXRlKGxhc3REYXRldGltZSkuZ2V0RGF0ZSgpID09PSBuZXcgRGF0ZShtLmRhdGV0aW1lKS5nZXREYXRlKCkpIHtcbiAgICAgICAgIFxuICAgICAgICAgICAgIGNvbnN0IGxldHRlciA9IG0uZnJvbVswXSAhPT11bmRlZmluZWQgPyBtLmZyb21bMF06XCJcIlxuICAgICAgICAgICAgICBlbWFpbCA9IG0uZnJvbVxuICAgICAgICAgICAgICBsYXN0RGF0ZXRpbWUgPSBtLmRhdGV0aW1lXG4gICAgICAgICAgICAgIHJldHVybiB7IC4uLm0sIHNpZGU6IHJlbW90ZVNpZGUsIG9yZGVyOiBcIkZcIiwgZGF0ZVNwYWNlOiBmYWxzZSxsZXR0ZXIgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAgICBjb25zdCBsZXR0ZXIgPSBtLmZyb21bMF0gIT09dW5kZWZpbmVkID8gbS5mcm9tWzBdOlwiXCJcbiAgICAgICAgICAgICAgZW1haWwgPSBtLmZyb21cbiAgICAgICAgICAgICAgbGFzdERhdGV0aW1lID0gbS5kYXRldGltZVxuICAgICAgICAgICAgICByZXR1cm4geyAuLi5tLCBzaWRlOiByZW1vdGVTaWRlLCBvcmRlcjogXCJGXCIsIGRhdGVTcGFjZTogdHJ1ZSxsZXR0ZXIgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgfSlcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKT0+e1xuICAgIHNldE1hcHBlZE1lc3NhZ2VzKG1hcE1lc3NhZ2VzKCkpXG4gIH0sW21lc3NhZ2VzXSlcbnJldHVybiB7bWFwcGVkTWVzc2FnZXN9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZU1lc3NhZ2VzTWFwcGVyXG4iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5ICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9qc3gtcHJvcHMtbm8tc3ByZWFkaW5nICovXG5pbXBvcnQge2h9IGZyb20gJ3ByZWFjdCdcbmltcG9ydCBNZXNzYWdlT2JqZWN0TWFwcGVyIGZyb20gJy4vbWVzc2FnZS1vYmplY3QtbWFwcGVyJ1xuXG5jb25zdCBNZXNzYWdlQ29sbGVjdGlvblZpZXcgPSAoeyBtZXNzYWdlcyB9KSA9PntcblxuICAgIGlmKG1lc3NhZ2VzLmxlbmd0aD4wKXtcbiAgICAgICBcbiAgICAgICAgcmV0dXJuICBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UsIGkpID0+IDxNZXNzYWdlT2JqZWN0TWFwcGVyIHsuLi5tZXNzYWdlfSBrZXk9e2l9IC8+KVxuICAgIH1cbiAgICAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZUNvbGxlY3Rpb25WaWV3IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tZGVwcmVjYXRlZCAqL1xuaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcblxuY29uc3QgTWVzc2FnZVZpZXdTY3JvbGxlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoMTgwZGVnKVwiLFxuICAgICAgICBoZWlnaHQ6IFwiODUlXCIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjZWRlZmYyXCIsXG4gICAgICAgIG92ZXJmbG93OiBcInNjcm9sbFwiXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgc3R5bGU9e3sgdHJhbnNmb3JtOiBcInJvdGF0ZSgxODBkZWcpXCIgfX0+XG4gICAgICAgIHsgY2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VWaWV3U2Nyb2xsZXI7XG5cblxuIiwiXG5pbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0JztcblxuY29uc3QgTWVzc2FnZUVkaXRvckRpc3BsYXllciA9ICh7XG4gIG9uTWVzc2FnZUNoYW5nZSwgbWVzc2FnZSwgc2VuZE1lc3NhZ2UsIGlkID0gMCwgZGlzYWJsZWQsXG59KSA9PiAoXG4gIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxuICAgIDxpbnB1dCBzdHlsZT17eyBmbGV4OiAxIH19IGRhdGEtdGVzdGlkPXtgbWVzc2FnZSR7aWR9YH0gb25JbnB1dD17b25NZXNzYWdlQ2hhbmdlfSB2YWx1ZT17bWVzc2FnZX0gbmFtZT1cIm1lc3NhZ2VcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgbWVzc2FnZSB0ZXh0XCIgLz5cbiAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdmbGV4JyB9fT5cbiAgICAgICAgICA8YnV0dG9uIGRhdGEtdGVzdGlkPXtgc2VuZE1lc3NhZ2Uke2lkfWB9IGRpc2FibGVkPXttZXNzYWdlID09PSAnJyB8fCBkaXNhYmxlZH0gc3R5bGU9e3sgbWFyZ2luTGVmdDogMiwgd2lkdGg6ICcxMDAlJyB9fSBvbkNsaWNrPXtzZW5kTWVzc2FnZX0+XG5cbiAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMi4wMSAyMUwyMyAxMiAyLjAxIDMgMiAxMGwxNSAyLTE1IDJ6XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiIC8+XG4gICAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuKTtcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VFZGl0b3JEaXNwbGF5ZXI7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1zaGFkb3cgKi9cbmltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgdXNlTWVzc2FnZVNvcnRlciBmcm9tIFwiLi91c2VNZXNzYWdlU29ydGVyXCI7XG5pbXBvcnQgdXNlTWVzc2FnZU1hcHBlciBmcm9tIFwiLi91c2VNZXNzYWdlTWFwcGVyXCI7XG5pbXBvcnQgTWVzc2FnZUNvbGxlY3Rpb25WaWV3IGZyb20gXCIuL21lc3NhZ2UtY29sbGVjdGlvbi12aWV3XCI7XG5pbXBvcnQgTWVzc2FnZVZpZXdTY3JvbGxlciBmcm9tIFwiLi9tZXNzYWdlcy12aWV3LXNjcm9sbGVyXCI7XG5pbXBvcnQgTWVzc2FnZUVkaXRvckRpc3BsYXllciBmcm9tIFwiLi4vLi4vbWVzc2FnZS1lZGl0b3ItZGlzcGxheWVyXCI7XG5cbmNvbnN0IE1lc3NhZ2VzRGlzcGxheWVyID0gKHtcbiAgbWVzc2FnZXMsXG4gIHNvY2tldCxcbiAgaWQsXG4gIG1lc3NhZ2VUZXh0LFxuICBzZW5kTWVzc2FnZSxcbiAgaGFuZGxlTWVzc2FnZUNoYW5nZVxufSkgPT4ge1xuICBjb25zdCB7IHNvcnRlZE1lc3NhZ2VzIH0gPSB1c2VNZXNzYWdlU29ydGVyKG1lc3NhZ2VzKTtcbiAgY29uc3QgeyBtYXBwZWRNZXNzYWdlcyB9ID0gdXNlTWVzc2FnZU1hcHBlcihzb3J0ZWRNZXNzYWdlcyk7XG4gIHJldHVybiBbXG5cbiAgICAgIDxNZXNzYWdlVmlld1Njcm9sbGVyPlxuICAgICAgICA8TWVzc2FnZUNvbGxlY3Rpb25WaWV3IG1lc3NhZ2VzPXttYXBwZWRNZXNzYWdlc30gLz5cbiAgICAgIDwvTWVzc2FnZVZpZXdTY3JvbGxlcj4sXG4gICAgICA8TWVzc2FnZUVkaXRvckRpc3BsYXllclxuICAgICAgICBkaXNhYmxlZD17c29ja2V0ID09PSBudWxsfVxuICAgICAgICBpZD17aWR9XG4gICAgICAgIG1lc3NhZ2U9e21lc3NhZ2VUZXh0fVxuICAgICAgICBzZW5kTWVzc2FnZT17c2VuZE1lc3NhZ2V9XG4gICAgICAgIG9uTWVzc2FnZUNoYW5nZT17aGFuZGxlTWVzc2FnZUNoYW5nZX1cbiAgICAgIC8+XG5cbiAgXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VzRGlzcGxheWVyO1xuIiwiaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXG5pbXBvcnQge3VzZUVmZmVjdCx1c2VTdGF0ZX0gZnJvbSAncHJlYWN0L2hvb2tzJ1xuXG5jb25zdCB1c2VNZXNzYWdlU29ydGVyID0obWVzc2FnZXMpPT57XG5jb25zdCBbc29ydGVkTWVzc2FnZXMsc2V0U29ydGVkTWVzc2FnZXNdPXVzZVN0YXRlKG1lc3NhZ2VzKVxudXNlRWZmZWN0KCgpPT57XG5cbiAgICBzZXRTb3J0ZWRNZXNzYWdlcyhtZXNzYWdlcy5zb3J0KChhLCBiKT0+IGEuZGF0ZXRpbWUgLSBiLmRhdGV0aW1lKSlcbn0sW21lc3NhZ2VzXSlcblxucmV0dXJue3NvcnRlZE1lc3NhZ2VzfVxufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VNZXNzYWdlU29ydGVyXG5cbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgdXNlU29ja2V0IGZyb20gXCIuL3VzZVNvY2tldFwiO1xuaW1wb3J0IE1lc3NhZ2VzRGlzcGxheWVyIGZyb20gXCIuLi9zaGFyZWFibGUtdWkvbWVzc2FnZXMtZGlzcGxheWVyXCI7XG5pbXBvcnQgTWVzc2FnZUVkaXRvckRpc3BsYXllciBmcm9tIFwiLi4vc2hhcmVhYmxlLXVpL21lc3NhZ2UtZWRpdG9yLWRpc3BsYXllclwiO1xuaW1wb3J0IHVzZUNoYXRMb2cgZnJvbSBcIi4uL3NoYXJlYWJsZS1ob29rcy91c2VDaGF0TG9nXCI7XG5cbmNvbnN0IE1lc3NhZ2luZ01vZHVsZVNvY2tldCA9ICh7XG4gIG5hbWUsXG4gIHRhcmdldE5hbWUsXG4gIHNvY2tldCxcbiAgaWQgPSAwLFxuICBoZWlnaHRcbn0pID0+IHtcbiAgY29uc3Qge1xuICAgIG1lc3NhZ2VTZW50LFxuICAgIG1lc3NhZ2VSZWNpZXZlZCxcbiAgICBtZXNzYWdlVGV4dCxcbiAgICBzZW5kTWVzc2FnZSxcbiAgICBoYW5kbGVNZXNzYWdlQ2hhbmdlXG4gIH0gPSB1c2VTb2NrZXQoeyBzb2NrZXQsIHRhcmdldE5hbWUgfSk7XG4gIGNvbnN0IHsgbWVzc2FnZXMgfSA9IHVzZUNoYXRMb2coeyBuYW1lLCBtZXNzYWdlUmVjaWV2ZWQsIG1lc3NhZ2VTZW50IH0pO1xuICByZXR1cm4gPE1lc3NhZ2VzRGlzcGxheWVyIGhhbmRsZU1lc3NhZ2VDaGFuZ2U9e2hhbmRsZU1lc3NhZ2VDaGFuZ2V9IHNlbmRNZXNzYWdlPXtzZW5kTWVzc2FnZX0gbWVzc2FnZVRleHQ9e21lc3NhZ2VUZXh0fSBtZXNzYWdlcz17bWVzc2FnZXN9IC8+XG4gIFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnaW5nTW9kdWxlU29ja2V0O1xuIiwiaW1wb3J0IHtoLCBDb21wb25lbnR9IGZyb20gJ3ByZWFjdCdcbmltcG9ydCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gZnJvbSAncHJlYWN0L2hvb2tzJ1xuXG5jb25zdCB1c2VTb2NrZXQgPSh7c29ja2V0LHRhcmdldE5hbWV9KT0+e1xuY29uc3QgW21lc3NhZ2VUZXh0LHNldE1lc3NhZ2VUZXh0XT11c2VTdGF0ZSgnJylcbmNvbnN0IFttZXNzYWdlUmVjaWV2ZWQsc2V0TWVzc2FnZVJlY2lldmVkXT11c2VTdGF0ZShudWxsKVxuY29uc3QgW21lc3NhZ2VTZW50LHNldE1lc3NhZ2VTZW50XT11c2VTdGF0ZShudWxsKVxuY29uc3QgW2Nvbm5lY3RlZCxzZXRDb25uZWN0ZWRdPXVzZVN0YXRlKGZhbHNlKVxuY29uc3QgW2Vycm9ycyxzZXRFcnJvcl09dXNlU3RhdGUoW10pXG4gIGNvbnN0ICAgc2VuZE1lc3NhZ2UgPSAoKSA9PiB7XG4gIGNvbnN0IGRhdGV0aW1lID0gIG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gIHNvY2tldC5lbWl0KFwidGV4dF9tZXNzYWdlXCIse1xuICAgIHJlY2lldmVyOnRhcmdldE5hbWUsXG4gICAgbWVzc2FnZTogbWVzc2FnZVRleHQsXG4gICAgZGF0ZXRpbWV9KTtcbiAgc2V0TWVzc2FnZVNlbnQoe3JlY2lldmVyOnRhcmdldE5hbWUsZGF0ZXRpbWUsbWVzc2FnZTptZXNzYWdlVGV4dH0pXG4gIHNldE1lc3NhZ2VUZXh0KCcnKVxufVxuXG5jb25zdCBoYW5kbGVNZXNzYWdlQ2hhbmdlID0oZSk9PntcbnNldE1lc3NhZ2VUZXh0KGUudGFyZ2V0LnZhbHVlKVxuXG59XG5cbiAgdXNlRWZmZWN0KCgpPT57XG4gICAgaWYoc29ja2V0ICE9PW51bGwpe1xuXG4gICAgIFxuICAgICAgc29ja2V0Lm9uKFwidGV4dF9tZXNzYWdlXCIsIGRhdGEgPT4ge1xuICAgICAgICBjb25zdCB7IHNlbmRlciAsIG1lc3NhZ2UsIGRhdGV0aW1lIH0gPSBkYXRhO1xuICAgICAgIFxuICAgICAgc2V0TWVzc2FnZVJlY2lldmVkKHtzZW5kZXIsbWVzc2FnZSxkYXRldGltZX0pXG4gICAgICB9KTtcbiAgICAgIHNvY2tldC5vbihcImNvbm5lY3RcIiwoKT0+e1xuICAgICAgIFxuICAgICAgICBzZXRDb25uZWN0ZWQodHJ1ZSlcbiAgICAgIH0pXG4gIFxuICAgICAgc29ja2V0Lm9uKFwiZGlzY29ubmVjdFwiLCgpPT57XG4gICAgICAgIFxuICAgICAgICBzZXRDb25uZWN0ZWQoZmFsc2UpXG4gICAgICB9KVxuXG4gICAgICBzb2NrZXQub24oJ2Vycm9yJywoZXJyb3IpPT57XG4gICAgICAgIHNldEVycm9yKFsuLi5lcnJvcnMsZXJyb3JdKVxuICAgICAgfSlcbiAgICB9XG5cbiAgfSlcblxuXG5cbnJldHVybiB7bWVzc2FnZVJlY2lldmVkLG1lc3NhZ2VTZW50LG1lc3NhZ2VUZXh0LHNlbmRNZXNzYWdlLGhhbmRsZU1lc3NhZ2VDaGFuZ2UsZXJyb3JzLGNvbm5lY3RlZH1cblxufVxuZXhwb3J0IGRlZmF1bHQgdXNlU29ja2V0XG5cbiIsImltcG9ydCB7aH0gZnJvbSAncHJlYWN0J1xuaW1wb3J0IHt1c2VTdGF0ZSx1c2VFZmZlY3R9IGZyb20gJ3ByZWFjdC9ob29rcydcblxuY29uc3QgdXNlQ2hhdExvZyA9KHtuYW1lLG1lc3NhZ2VSZWNpZXZlZCxtZXNzYWdlU2VudH0pPT57XG4gIGNvbnN0IFttZXNzYWdlcyxzZXRNZXNzYWdlc109dXNlU3RhdGUoW10pXG4gIFxuICBjb25zdCBzYXZlVG9Mb2NhbFN0b3JhZ2UgPSAobSwga2V5KSA9PiB7XG4gICAgY29uc3QgcGVyc2lzdGVkTWVzc2FnZXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpID09PSBudWxsID8gW21dIDogWy4uLkpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSksIG1dXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShwZXJzaXN0ZWRNZXNzYWdlcykpO1xuICAgIHJldHVybiBwZXJzaXN0ZWRNZXNzYWdlc1xufVxuICAvLyBjb21wb25lbnREaWRNb3VudFxuICB1c2VFZmZlY3QoKCk9PntcbiAgICBzZXRNZXNzYWdlcyhKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUpKSA9PT0gbnVsbCA/XG4gICAgIFtdIDogWy4uLkpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSkpXSlcbiAgICAgXG4gIH0sW10pXG4gIC8vIHNhdmVSZW1vdGVNZXNzYWdlXG4gdXNlRWZmZWN0KCgpPT57XG4gICBpZihtZXNzYWdlUmVjaWV2ZWQhPT1udWxsKVxuICAge1xuICAgIGNvbnN0IHsgZGF0ZXRpbWUsIG1lc3NhZ2UsIHNlbmRlciB9ID0gbWVzc2FnZVJlY2lldmVkXG4gICAgY29uc3QgbG9jYWwgPSBmYWxzZVxuICBzZXRNZXNzYWdlcyhzYXZlVG9Mb2NhbFN0b3JhZ2UoIHsgbWVzc2FnZSwgZnJvbTogc2VuZGVyLCBsb2NhbCwgZGF0ZXRpbWUsIHRvOiBuYW1lIH0sbmFtZSkpXG4gICB9XG4gIFxuIH0sW21lc3NhZ2VSZWNpZXZlZF0pXG5cbiAgLy8gc2F2ZUxvY2FsTWVzc2FnZVxuICB1c2VFZmZlY3QoKCk9PntcbiAgICBpZihtZXNzYWdlU2VudCE9PW51bGwpe1xuICAgICBcbiAgICAgIGNvbnN0IHsgZGF0ZXRpbWUsIG1lc3NhZ2UsIHJlY2lldmVyIH0gPSBtZXNzYWdlU2VudFxuICAgICAgY29uc3QgbG9jYWwgPSB0cnVlXG4gICAgICBjb25zdCBmcm9tID1uYW1lXG4gICAgc2V0TWVzc2FnZXMoc2F2ZVRvTG9jYWxTdG9yYWdlKCB7IG1lc3NhZ2UsIGZyb20sIGxvY2FsLCBkYXRldGltZSwgdG86IHJlY2lldmVyIH0sbmFtZSkpXG5cbiAgICB9XG59LFttZXNzYWdlU2VudF0pXG4gXG4gIHJldHVybiB7bWVzc2FnZXN9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUNoYXRMb2dcblxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCBTb2NrZXRDb21wb25lbnQgZnJvbSBcIi4vU29ja2V0Q29tcG9uZW50XCI7XG5pbXBvcnQgTWVzc2FnZU1vZHVsZVNvY2tldCBmcm9tIFwiLi4vLi4vLi4vLi4vcnRjanMvbWVzc2FnaW5nLW1vZHVsZS1zb2NrZXRcIjtcblxuY29uc3QgQ2hhdFVzZXIgPSAoeyBuYW1lLCB0YXJnZXROYW1lIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8U29ja2V0Q29tcG9uZW50IHVzZXJuYW1lPXtuYW1lfT5cbiAgICAgIHsoeyBzb2NrZXQsIGNvbm5lY3RlZCB9KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2cobmFtZSxjb25uZWN0ZWQpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPE1lc3NhZ2VNb2R1bGVTb2NrZXRcbiAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICB0YXJnZXROYW1lPXt0YXJnZXROYW1lfVxuICAgICAgICAgICAgc29ja2V0PXtzb2NrZXR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH19XG4gICAgPC9Tb2NrZXRDb21wb25lbnQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGF0VXNlcjtcbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCBUYWJCYXIgZnJvbSBcInByZWFjdC1tYXRlcmlhbC1jb21wb25lbnRzL1RhYkJhclwiO1xuaW1wb3J0IFwicHJlYWN0LW1hdGVyaWFsLWNvbXBvbmVudHMvVGFiQmFyL3N0eWxlLmNzc1wiO1xuaW1wb3J0IFwicHJlYWN0LW1hdGVyaWFsLWNvbXBvbmVudHMvVGFicy9zdHlsZS5jc3NcIjtcbmltcG9ydCBMYXlvdXRHcmlkIGZyb20gXCJwcmVhY3QtbWF0ZXJpYWwtY29tcG9uZW50cy9MYXlvdXRHcmlkXCI7XG5pbXBvcnQgXCJwcmVhY3QtbWF0ZXJpYWwtY29tcG9uZW50cy9MYXlvdXRHcmlkL3N0eWxlLmNzc1wiO1xuaW1wb3J0IENoYXRVc2VyIGZyb20gXCIuL0NoYXRVc2VyXCI7XG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jb25zdCBDaGF0Um9vbSA9ICgpID0+IHtcbiAgY29uc3QgW3NlbGVjdGVkSXRlbSwgc2V0U2VsZWN0ZWRJdGVtXSA9IHVzZVN0YXRlKDApO1xuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiMTAwJVwifX0+XG4gICAgICA8VGFiQmFyPlxuICAgICAgICA8VGFiQmFyLlRhYiBhY3RpdmUgb25DbGljaz17KCkgPT4gc2V0U2VsZWN0ZWRJdGVtKDApfT5cbiAgICAgICAgICA8VGFiQmFyLlRhYkxhYmVsPkNsaWVudCAxPC9UYWJCYXIuVGFiTGFiZWw+XG4gICAgICAgIDwvVGFiQmFyLlRhYj5cbiAgICAgICAgPFRhYkJhci5UYWIgb25DbGljaz17KCkgPT4gc2V0U2VsZWN0ZWRJdGVtKDEpfT5cbiAgICAgICAgICA8VGFiQmFyLlRhYkxhYmVsPkNsaWVudCAyPC9UYWJCYXIuVGFiTGFiZWw+XG4gICAgICAgIDwvVGFiQmFyLlRhYj5cbiAgICAgIDwvVGFiQmFyPlxuICAgICAge3NlbGVjdGVkSXRlbSA9PT0gMCAmJiA8Q2hhdFVzZXIgbmFtZT1cIm1hcmlvXCIgdGFyZ2V0TmFtZT1cImRyYWdvc1wiIC8+fVxuICAgICAge3NlbGVjdGVkSXRlbSA9PT0gMSAmJiA8Q2hhdFVzZXIgbmFtZT1cImRyYWdvc1wiIHRhcmdldE5hbWU9XCJtYXJpb1wiIC8+fVxuICAgIDwvZGl2PlxuICApO1xufTtcbmV4cG9ydCBkZWZhdWx0IENoYXRSb29tO1xuIiwiaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXG5pbXBvcnQgQ2hhdFJvb20gZnJvbSAnLi9DaGF0Um9vbSdcblxuY29uc3QgU29ja2V0SU9NZXNzYWdpbmcgPSgpPT57XG5cbiAgICByZXR1cm4oXG4gICAgICA8Q2hhdFJvb20gLz5cbiAgICApXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgU29ja2V0SU9NZXNzYWdpbmciLCJpbXBvcnQge2h9IGZyb20gJ3ByZWFjdCdcblxuY29uc3QgV2ViUlRDTWVzc2FnaW5nID0oKT0+e1xuXG4gICAgcmV0dXJuKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7bWFyZ2luVG9wOjIwMH19PldlYlJUQyBNZXNzYWdpbmc8L2Rpdj5cbiAgICApXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgV2ViUlRDTWVzc2FnaW5nIiwiaW1wb3J0IHtofSBmcm9tICdwcmVhY3QnXG5cbmNvbnN0IFdlYlJUQ1ZpZGVvQ2hhdCA9KCk9PntcblxuICAgIHJldHVybihcbiAgICAgICAgPGRpdiBzdHlsZT17e21hcmdpblRvcDoyMDB9fT5cbiAgICAgICAgICAgIFdlYlJUQ1ZpZGVvQ2hhdFxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYlJUQ1ZpZGVvQ2hhdCJdLCJuYW1lcyI6WyJjc3NDbGFzc2VzIiwiQUNUSVZFIiwiRkFERSIsIk5PX1RSQU5TSVRJT04iLCJzdHJpbmdzIiwiQ09OVEVOVF9TRUxFQ1RPUiIsIk1EQ1RhYkluZGljYXRvckZvdW5kYXRpb24iLCJNRENGb3VuZGF0aW9uIiwiZGVmYXVsdEFkYXB0ZXIiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiY29tcHV0ZUNvbnRlbnRDbGllbnRSZWN0Iiwic2V0Q29udGVudFN0eWxlUHJvcGVydHkiLCJbb2JqZWN0IE9iamVjdF0iLCJhZGFwdGVyIiwic3VwZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJ0aGlzIiwiYWRhcHRlcl8iLCJwcmV2aW91c0luZGljYXRvckNsaWVudFJlY3QiLCJNRENTbGlkaW5nVGFiSW5kaWNhdG9yRm91bmRhdGlvbiIsImN1cnJlbnRDbGllbnRSZWN0Iiwid2lkdGhEZWx0YSIsIndpZHRoIiwieFBvc2l0aW9uIiwibGVmdCIsIk1EQ0ZhZGluZ1RhYkluZGljYXRvckZvdW5kYXRpb24iLCJNRENUYWJJbmRpY2F0b3IiLCJNRENDb21wb25lbnQiLCJyb290IiwiYXJncyIsImNvbnRlbnRfIiwicm9vdF8iLCJxdWVyeVNlbGVjdG9yIiwiZm91bmRhdGlvbl8iLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwcm9wIiwidmFsdWUiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiY29udGFpbnMiLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJBUklBX1NFTEVDVEVEIiwiUklQUExFX1NFTEVDVE9SIiwiVEFCX0lORElDQVRPUl9TRUxFQ1RPUiIsIlRBQklOREVYIiwiSU5URVJBQ1RFRF9FVkVOVCIsIk1EQ1RhYkZvdW5kYXRpb24iLCJoYXNDbGFzcyIsInNldEF0dHIiLCJhY3RpdmF0ZUluZGljYXRvciIsImRlYWN0aXZhdGVJbmRpY2F0b3IiLCJub3RpZnlJbnRlcmFjdGVkIiwiZ2V0T2Zmc2V0TGVmdCIsImdldE9mZnNldFdpZHRoIiwiZ2V0Q29udGVudE9mZnNldExlZnQiLCJnZXRDb250ZW50T2Zmc2V0V2lkdGgiLCJmb2N1cyIsImhhbmRsZUNsaWNrXyIsImhhbmRsZUNsaWNrIiwiaXNBY3RpdmUiLCJyb290V2lkdGgiLCJyb290TGVmdCIsImNvbnRlbnRXaWR0aCIsImNvbnRlbnRMZWZ0Iiwicm9vdFJpZ2h0IiwiY29udGVudFJpZ2h0IiwiTURDVGFiIiwicmlwcGxlXyIsInRhYkluZGljYXRvcl8iLCJyaXBwbGVGYWN0b3J5IiwiZWwiLCJmb3VuZGF0aW9uIiwiTURDUmlwcGxlIiwidGFiSW5kaWNhdG9yRmFjdG9yeSIsInJpcHBsZVN1cmZhY2UiLCJyaXBwbGVBZGFwdGVyIiwiY3JlYXRlQWRhcHRlciIsInVwZGF0ZUNzc1ZhcmlhYmxlIiwidmFyTmFtZSIsInJpcHBsZUZvdW5kYXRpb24iLCJNRENSaXBwbGVGb3VuZGF0aW9uIiwidGFiSW5kaWNhdG9yRWxlbWVudCIsImJpbmQiLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsImRlc3Ryb3kiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwiZW1pdCIsInRhYiIsIm9mZnNldExlZnQiLCJvZmZzZXRXaWR0aCIsImFjdGl2ZSIsImNvbXB1dGVJbmRpY2F0b3JDbGllbnRSZWN0IiwiY29tcHV0ZURpbWVuc2lvbnMiLCJBTklNQVRJTkciLCJTQ1JPTExfVEVTVCIsIlNDUk9MTF9BUkVBX1NDUk9MTCIsIkFSRUFfU0VMRUNUT1IiLCJNRENUYWJTY3JvbGxlclJUTCIsInRyYW5zbGF0ZVgiLCJzY3JvbGxYIiwiTURDVGFiU2Nyb2xsZXJSVExEZWZhdWx0IiwiY3VycmVudFNjcm9sbExlZnQiLCJnZXRTY3JvbGxBcmVhU2Nyb2xsTGVmdCIsInJpZ2h0IiwiY2FsY3VsYXRlU2Nyb2xsRWRnZXNfIiwiTWF0aCIsInJvdW5kIiwiZWRnZXMiLCJjbGFtcGVkU2Nyb2xsTGVmdCIsImNsYW1wU2Nyb2xsVmFsdWVfIiwiZmluYWxTY3JvbGxQb3NpdGlvbiIsInNjcm9sbERlbHRhIiwiZ2V0U2Nyb2xsQ29udGVudE9mZnNldFdpZHRoIiwiZ2V0U2Nyb2xsQXJlYU9mZnNldFdpZHRoIiwibWluIiwibWF4IiwiTURDVGFiU2Nyb2xsZXJSVExOZWdhdGl2ZSIsIk1EQ1RhYlNjcm9sbGVyUlRMUmV2ZXJzZSIsIk1EQ1RhYlNjcm9sbGVyRm91bmRhdGlvbiIsImV2ZW50VGFyZ2V0TWF0Y2hlc1NlbGVjdG9yIiwiYWRkU2Nyb2xsQXJlYUNsYXNzIiwic2V0U2Nyb2xsQXJlYVN0eWxlUHJvcGVydHkiLCJzZXRTY3JvbGxDb250ZW50U3R5bGVQcm9wZXJ0eSIsImdldFNjcm9sbENvbnRlbnRTdHlsZVZhbHVlIiwic2V0U2Nyb2xsQXJlYVNjcm9sbExlZnQiLCJjb21wdXRlU2Nyb2xsQXJlYUNsaWVudFJlY3QiLCJjb21wdXRlU2Nyb2xsQ29udGVudENsaWVudFJlY3QiLCJjb21wdXRlSG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodCIsImlzQW5pbWF0aW5nXyIsInJ0bFNjcm9sbGVySW5zdGFuY2VfIiwiaG9yaXpvbnRhbFNjcm9sbGJhckhlaWdodCIsImlzUlRMXyIsImNvbXB1dGVDdXJyZW50U2Nyb2xsUG9zaXRpb25SVExfIiwiY3VycmVudFRyYW5zbGF0ZVgiLCJjYWxjdWxhdGVDdXJyZW50VHJhbnNsYXRlWF8iLCJzdG9wU2Nyb2xsQW5pbWF0aW9uXyIsImV2dCIsInRhcmdldCIsInNjcm9sbFhJbmNyZW1lbnQiLCJpbmNyZW1lbnRTY3JvbGxSVExfIiwiaW5jcmVtZW50U2Nyb2xsXyIsInNjcm9sbFRvUlRMXyIsInNjcm9sbFRvXyIsInJ0bFNjcm9sbGVyRmFjdG9yeV8iLCJ0cmFuc2Zvcm1WYWx1ZSIsInBhcnRzIiwiZXhlYyIsInNwbGl0IiwicGFyc2VGbG9hdCIsImdldFJUTFNjcm9sbGVyIiwiZ2V0U2Nyb2xsUG9zaXRpb25SVEwiLCJjdXJyZW50U2Nyb2xsWCIsImdldFNjcm9sbFBvc2l0aW9uIiwic2FmZVNjcm9sbFgiLCJhbmltYXRlXyIsImFuaW1hdGlvbiIsInNjcm9sbFRvUlRMIiwidGFyZ2V0U2Nyb2xsWCIsImluY3JlbWVudFNjcm9sbFJUTCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImN1cnJlbnRTY3JvbGxQb3NpdGlvbiIsImdldEFuaW1hdGluZ1Njcm9sbFBvc2l0aW9uXyIsInNjcm9sbExlZnQiLCJnZXRBbmltYXRpbmdTY3JvbGxQb3NpdGlvbiIsImluaXRpYWxTY3JvbGxMZWZ0IiwibmV3U2Nyb2xsTGVmdCIsInJvb3RDbGllbnRSZWN0IiwiY29udGVudENsaWVudFJlY3QiLCJyaWdodEVkZ2VEZWx0YSIsImhvcml6b250YWxTY3JvbGxiYXJIZWlnaHRfIiwiTURDVGFiU2Nyb2xsZXIiLCJhcmVhXyIsImhhbmRsZUludGVyYWN0aW9uXyIsImhhbmRsZVRyYW5zaXRpb25FbmRfIiwiaGFuZGxlSW50ZXJhY3Rpb24iLCJoYW5kbGVUcmFuc2l0aW9uRW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnRUYXJnZXQiLCJzZWxlY3RvciIsIkhUTUxFbGVtZW50UHJvdG90eXBlIiwiZmlsdGVyIiwicCIsInBvcCIsInV0aWwuZ2V0TWF0Y2hlc1Byb3BlcnR5IiwiSFRNTEVsZW1lbnQiLCJwcm90b3R5cGUiLCJwcm9wTmFtZSIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZG9jdW1lbnRPYmoiLCJzaG91bGRDYWNoZVJlc3VsdCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJvZmZzZXRIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJyZW1vdmVDaGlsZCIsInV0aWwuY29tcHV0ZUhvcml6b250YWxTY3JvbGxiYXJIZWlnaHQiLCJkb2N1bWVudCIsImluY3JlbWVudFNjcm9sbCIsInNjcm9sbFRvIiwiVEFCX0FDVElWQVRFRF9FVkVOVCIsIlRBQl9TQ1JPTExFUl9TRUxFQ1RPUiIsIlRBQl9TRUxFQ1RPUiIsIkFSUk9XX0xFRlRfS0VZIiwiQVJST1dfUklHSFRfS0VZIiwiRU5EX0tFWSIsIkhPTUVfS0VZIiwiRU5URVJfS0VZIiwiU1BBQ0VfS0VZIiwibnVtYmVycyIsIkVYVFJBX1NDUk9MTF9BTU9VTlQiLCJBUlJPV19MRUZUX0tFWUNPREUiLCJBUlJPV19SSUdIVF9LRVlDT0RFIiwiRU5EX0tFWUNPREUiLCJIT01FX0tFWUNPREUiLCJFTlRFUl9LRVlDT0RFIiwiU1BBQ0VfS0VZQ09ERSIsIkFDQ0VQVEFCTEVfS0VZUyIsIlNldCIsIktFWUNPREVfTUFQIiwiTWFwIiwic2V0IiwiTURDVGFiQmFyRm91bmRhdGlvbiIsImdldFNjcm9sbENvbnRlbnRXaWR0aCIsImlzUlRMIiwic2V0QWN0aXZlVGFiIiwiYWN0aXZhdGVUYWJBdEluZGV4IiwiZGVhY3RpdmF0ZVRhYkF0SW5kZXgiLCJmb2N1c1RhYkF0SW5kZXgiLCJnZXRUYWJJbmRpY2F0b3JDbGllbnRSZWN0QXRJbmRleCIsImdldFRhYkRpbWVuc2lvbnNBdEluZGV4IiwiZ2V0UHJldmlvdXNBY3RpdmVUYWJJbmRleCIsImdldEZvY3VzZWRUYWJJbmRleCIsImdldEluZGV4T2ZUYWIiLCJnZXRUYWJMaXN0TGVuZ3RoIiwibm90aWZ5VGFiQWN0aXZhdGVkIiwidXNlQXV0b21hdGljQWN0aXZhdGlvbl8iLCJ1c2VBdXRvbWF0aWNBY3RpdmF0aW9uIiwiaW5kZXgiLCJwcmV2aW91c0FjdGl2ZUluZGV4IiwiaW5kZXhJc0luUmFuZ2VfIiwic2Nyb2xsSW50b1ZpZXciLCJrZXkiLCJnZXRLZXlGcm9tRXZlbnRfIiwidW5kZWZpbmVkIiwiaXNBY3RpdmF0aW9uS2V5XyIsInByZXZlbnREZWZhdWx0IiwiZGV0ZXJtaW5lVGFyZ2V0RnJvbUtleV8iLCJmb2N1c2VkVGFiSW5kZXgiLCJkZXRhaWwiLCJzY3JvbGxJbnRvVmlld1JUTF8iLCJzY3JvbGxJbnRvVmlld18iLCJvcmlnaW4iLCJtYXhJbmRleCIsInNob3VsZEdvVG9FbmQiLCJzaG91bGREZWNyZW1lbnQiLCJzaG91bGRJbmNyZW1lbnQiLCJuZXh0SW5kZXgiLCJzY3JvbGxQb3NpdGlvbiIsImJhcldpZHRoIiwibmV4dFRhYkRpbWVuc2lvbnMiLCJyZWxhdGl2ZUNvbnRlbnRMZWZ0IiwibGVmdEluY3JlbWVudCIsInJpZ2h0SW5jcmVtZW50Iiwic2Nyb2xsQ29udGVudFdpZHRoIiwidGFiRGltZW5zaW9ucyIsInJlbGF0aXZlUm9vdExlZnQiLCJyZWxhdGl2ZVJvb3RSaWdodCIsInJlbGF0aXZlUm9vdERlbHRhIiwicm9vdERlbHRhIiwiaGFzIiwiZ2V0Iiwia2V5Q29kZSIsImZpbmRBZGphY2VudFRhYkluZGV4Q2xvc2VzdFRvRWRnZV8iLCJzY3JvbGxJbmNyZW1lbnQiLCJjYWxjdWxhdGVTY3JvbGxJbmNyZW1lbnRfIiwic2Nyb2xsV2lkdGgiLCJmaW5kQWRqYWNlbnRUYWJJbmRleENsb3Nlc3RUb0VkZ2VSVExfIiwiY2FsY3VsYXRlU2Nyb2xsSW5jcmVtZW50UlRMXyIsIk1EQ1RhYkJhciIsInRhYkxpc3RfIiwidGFiRmFjdG9yeV8iLCJ0YWJTY3JvbGxlcl8iLCJ0YWJTY3JvbGxlckZhY3RvcnlfIiwiaGFuZGxlVGFiSW50ZXJhY3Rpb25fIiwiaGFuZGxlS2V5RG93bl8iLCJzZXRVc2VBdXRvbWF0aWNBY3RpdmF0aW9uIiwidGFiRmFjdG9yeSIsInRhYlNjcm9sbGVyRmFjdG9yeSIsImdldFRhYkVsZW1lbnRzXyIsIm1hcCIsInRhYlNjcm9sbGVyRWxlbWVudCIsImhhbmRsZVRhYkludGVyYWN0aW9uIiwiaGFuZGxlS2V5RG93biIsImkiLCJsZW5ndGgiLCJmb3JFYWNoIiwiYWN0aXZhdGVUYWIiLCJjbGllbnRSZWN0IiwidGFiRWxlbWVudHMiLCJhY3RpdmVFbGVtZW50IiwiaW5kZXhPZiIsInRhYlRvRmluZCIsInNsaWNlIiwiY2FsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJfZ2V0MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlJCQwIiwiX2NsYXNzQ2FsbENoZWNrMiIsInJlcXVpcmUkJDEiLCJfY3JlYXRlQ2xhc3MyIiwicmVxdWlyZSQkMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInJlcXVpcmUkJDMiLCJfZ2V0UHJvdG90eXBlT2YyIiwicmVxdWlyZSQkNCIsIl9pbmhlcml0czIiLCJyZXF1aXJlJCQ1IiwiX01hdGVyaWFsQ29tcG9uZW50NSIsInJlcXVpcmUkJDYiLCJUYWJMYWJlbCIsIl9NYXRlcmlhbENvbXBvbmVudCIsIl90aGlzIiwiZGVmYXVsdCIsImFwcGx5IiwiYXJndW1lbnRzIiwiY29tcG9uZW50TmFtZSIsIm1kY1Byb3BzIiwicHJvcHMiLCJfcHJlYWN0IiwiaCIsImNoaWxkcmVuIiwiVGFiSWNvbiIsIl9NYXRlcmlhbENvbXBvbmVudDIiLCJfdGhpczIiLCJUYWIiLCJfTWF0ZXJpYWxDb21wb25lbnQzIiwiX3RoaXMzIiwibWRjTm90aWZ5UHJvcHMiLCJjbGFzcyIsInJvbGUiLCJhcmlhLXNlbGVjdGVkIiwiY29uY2F0IiwiVGFiQmFyIiwiX01hdGVyaWFsQ29tcG9uZW50NCIsIl90aGlzNCIsImNvbnRyb2wiLCJNRENvbXBvbmVudCIsIl90YWJCYXIiLCJhZnRlckNvbXBvbmVudERpZE1vdW50IiwicmVmIiwic2V0Q29udHJvbFJlZiIsImRlZmF1bHRfMSIsIl9UYWJCYXIiLCJMYXlvdXRHcmlkSW5uZXIiLCJMYXlvdXRHcmlkQ2VsbCIsImVsZW1lbnQiLCJrZXlzIiwicHJvcHNEaWN0IiwiYXR0cmlidXRlcyIsImNyZWF0ZUNsYXNzTmFtZSIsImJhc2VDbGFzcyIsImNsYXNzZXMiLCJjb2xzIiwicHVzaCIsImRlc2t0b3AiLCJ0YWJsZXQiLCJwaG9uZSIsIm9yZGVyIiwiYWxpZ24iLCJqb2luIiwiTGF5b3V0R3JpZCIsIl9MYXlvdXRHcmlkIiwiQ2VsbCIsIklubmVyIiwib2JqIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicmUiLCJzdHIiLCJzcmMiLCJiIiwiZSIsInN1YnN0cmluZyIsInJlcGxhY2UiLCJtIiwidXJpIiwic291cmNlIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJzIiwiZCIsInciLCJ5IiwidmFsIiwib3B0aW9ucyIsInR5cGUiLCJTdHJpbmciLCJtYXRjaCIsIm4iLCJ0b0xvd2VyQ2FzZSIsInBhcnNlIiwiaXNGaW5pdGUiLCJsb25nIiwibXMiLCJtc0FicyIsImFicyIsInBsdXJhbCIsImZtdExvbmciLCJmbXRTaG9ydCIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5hbWUiLCJpc1BsdXJhbCIsImVudiIsInNlbGVjdENvbG9yIiwibmFtZXNwYWNlIiwiaGFzaCIsImNoYXJDb2RlQXQiLCJjcmVhdGVEZWJ1ZyIsImNvbG9ycyIsInByZXZUaW1lIiwiZGVidWciLCJlbmFibGVkIiwic2VsZiIsImN1cnIiLCJOdW1iZXIiLCJEYXRlIiwiZGlmZiIsInByZXYiLCJjb2VyY2UiLCJ1bnNoaWZ0IiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwiZm9ybWF0dGVycyIsInNwbGljZSIsImZvcm1hdEFyZ3MiLCJsb2ciLCJ1c2VDb2xvcnMiLCJjb2xvciIsImV4dGVuZCIsImluaXQiLCJpbnN0YW5jZXMiLCJkZWxpbWl0ZXIiLCJuZXdEZWJ1ZyIsInRvTmFtZXNwYWNlIiwicmVnZXhwIiwidG9TdHJpbmciLCJzdGFjayIsIm1lc3NhZ2UiLCJkaXNhYmxlIiwibmFtZXNwYWNlcyIsIm5hbWVzIiwic2tpcHMiLCJlbmFibGUiLCJzYXZlIiwibGVuIiwiUmVnRXhwIiwic3Vic3RyIiwiaW5zdGFuY2UiLCJ0ZXN0IiwiaHVtYW5pemUiLCJsb2FkIiwiY29uc29sZSIsIm1vZHVsZSIsImMiLCJsYXN0QyIsInN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImVycm9yIiwiciIsImdldEl0ZW0iLCJwcm9jZXNzIiwiREVCVUciLCJfX253anMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwicGFyc2VJbnQiLCIkMSIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImoiLCJ2IiwibG9jIiwibG9jYXRpb24iLCJwcm90b2NvbCIsImNoYXJBdCIsInBhcnNldXJpIiwicG9ydCIsInBhdGgiLCJpZCIsImhyZWYiLCJpc05hTiIsImZsb29yIiwiY2VpbCIsIkFycmF5IiwiRnVuY3Rpb24iLCJjaHJvbWUiLCJsb2NhbCIsImVyciIsIkVtaXR0ZXIiLCJtaXhpbiIsIm9uIiwiZXZlbnQiLCJmbiIsIl9jYWxsYmFja3MiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJjYiIsImNhbGxiYWNrcyIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImlzQXJyYXkiLCJhcnIiLCJsb29rdXAiLCJyZXZMb29rdXAiLCJBcnIiLCJVaW50OEFycmF5IiwiaW5pdGVkIiwiY29kZSIsImVuY29kZUNodW5rIiwidWludDgiLCJzdGFydCIsImVuZCIsInRtcCIsIm51bSIsIm91dHB1dCIsImZyb21CeXRlQXJyYXkiLCJleHRyYUJ5dGVzIiwibGVuMiIsInJlYWQiLCJidWZmZXIiLCJvZmZzZXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsIkluZmluaXR5IiwicG93Iiwid3JpdGUiLCJydCIsIkxOMiIsImtNYXhMZW5ndGgiLCJCdWZmZXIiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJfX3Byb3RvX18iLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21TdHJpbmciLCJpbnRlcm5hbElzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJkYXRhIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJzaXplIiwiX2lzQnVmZmVyIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiYmFzZTY0LmZyb21CeXRlQXJyYXkiLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiZ2xvYmFsIiwicG9vbFNpemUiLCJfYXVnbWVudCIsImFsbG9jIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsImlzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJ0b0pTT04iLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0IiwiaWVlZTc1NC53cml0ZSIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic3ViYXJyYXkiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwiaWVlZTc1NC5yZWFkIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwibGVhZFN1cnJvZ2F0ZSIsImI2NCIsImwiLCJwbGFjZUhvbGRlcnMiLCJMIiwiYmFzZTY0LnRvQnl0ZUFycmF5IiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsImRzdCIsImlzRmFzdEJ1ZmZlciIsImlzU2xvd0J1ZmZlciIsImNvbnN0cnVjdG9yIiwid2l0aE5hdGl2ZUJ1ZmZlciIsIkJ1ZmZlci5pc0J1ZmZlciIsIndpdGhOYXRpdmVBcnJheUJ1ZmZlciIsIndpdGhOYXRpdmVCbG9iIiwiQmxvYiIsIndpdGhOYXRpdmVGaWxlIiwiRmlsZSIsInBhY2tldCIsImJ1ZmZlcnMiLCJwYWNrZXREYXRhIiwicGFjayIsIl9kZWNvbnN0cnVjdFBhY2tldCIsImlzQnVmIiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJuZXdEYXRhIiwiYXR0YWNobWVudHMiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJjYWxsYmFjayIsInBlbmRpbmdCbG9icyIsImJsb2JsZXNzRGF0YSIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsInJlYWRBc0FycmF5QnVmZmVyIiwiRW5jb2RlciIsIkRlY29kZXIiLCJFUlJPUl9QQUNLRVQiLCJFUlJPUiIsImVuY29kZUFzU3RyaW5nIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsIm5zcCIsInBheWxvYWQiLCJ0cnlTdHJpbmdpZnkiLCJyZWNvbnN0cnVjdG9yIiwiQmluYXJ5UmVjb25zdHJ1Y3RvciIsInJlY29uUGFjayIsIm1zZyIsImVuY29kZSIsImJpbmFyeSIsInJlbW92ZUJsb2JzIiwiZGVjb25zdHJ1Y3Rpb24iLCJkZWNvbnN0cnVjdFBhY2tldCIsImVuY29kZUFzQmluYXJ5IiwidHlwZXMiLCJuZXh0IiwidHJ5UGFyc2UiLCJkZWNvZGVTdHJpbmciLCJiYXNlNjQiLCJ0YWtlQmluYXJ5RGF0YSIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJiaW5EYXRhIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJYTUxIdHRwUmVxdWVzdCIsIm9wdHMiLCJ4ZG9tYWluIiwieHNjaGVtZSIsImVuYWJsZXNYRFIiLCJoYXNDT1JTIiwiWERvbWFpblJlcXVlc3QiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc0JpbmFyeSIsImFycmF5YnVmZmVyIiwiYWJ2IiwiaWkiLCJjb3VudCIsImVycl9jYiIsImJhaWwiLCJub29wIiwicHJveHkiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsInN0cmljdCIsInRvVXBwZXJDYXNlIiwiY3JlYXRlQnl0ZSIsInNoaWZ0IiwiZW5jb2RlQ29kZVBvaW50Iiwic3ltYm9sIiwicmVhZENvbnRpbnVhdGlvbkJ5dGUiLCJjb250aW51YXRpb25CeXRlIiwiZGVjb2RlU3ltYm9sIiwiYnl0ZTEiLCJ2ZXJzaW9uIiwiYnl0ZVN0cmluZyIsImRlY29kZSIsInVjczJlbmNvZGUiLCJjaGFycyIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsImJsb2JTdXBwb3J0ZWQiLCJibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXciLCJibG9iQnVpbGRlclN1cHBvcnRlZCIsImFwcGVuZCIsImdldEJsb2IiLCJtYXBBcnJheUJ1ZmZlclZpZXdzIiwiYXJ5IiwiY2h1bmsiLCJCbG9iQnVpbGRlckNvbnN0cnVjdG9yIiwiYmIiLCJwYXJ0IiwiQmxvYkNvbnN0cnVjdG9yIiwiYmFzZTY0ZW5jb2RlciIsImlzQW5kcm9pZCIsImlzUGhhbnRvbUpTIiwiZG9udFNlbmRCbG9icyIsInBhY2tldHMiLCJvcGVuIiwiY2xvc2UiLCJwaW5nIiwicG9uZyIsInVwZ3JhZGUiLCJwYWNrZXRzbGlzdCIsImVhY2giLCJkb25lIiwiYWZ0ZXIiLCJlYWNoV2l0aEluZGV4Iiwic3VwcG9ydHNCaW5hcnkiLCJ1dGY4ZW5jb2RlIiwiZW5jb2RlQmFzZTY0UGFja2V0IiwiY29udGVudEFycmF5IiwicmVzdWx0QnVmZmVyIiwiZW5jb2RlQXJyYXlCdWZmZXIiLCJmciIsImVuY29kZVBhY2tldCIsImVuY29kZUJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsImVuY29kZUJsb2IiLCJlbmNvZGVCYXNlNjRPYmplY3QiLCJlbmNvZGVkIiwidXRmOCIsImI2NGRhdGEiLCJyZWFkQXNEYXRhVVJMIiwidHlwZWQiLCJiYXNpYyIsImJ0b2EiLCJiaW5hcnlUeXBlIiwidXRmOGRlY29kZSIsImRlY29kZUJhc2U2NFBhY2tldCIsInRyeURlY29kZSIsInJlc3QiLCJzbGljZUJ1ZmZlciIsImlzQmluYXJ5IiwiZW5jb2RlUGF5bG9hZEFzQmxvYiIsImVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyIiwiZG9uZUNhbGxiYWNrIiwic2V0TGVuZ3RoSGVhZGVyIiwicmVzdWx0cyIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsImNociIsImRlY29kZVBhY2tldCIsImVuY29kZWRQYWNrZXRzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJyZXN1bHRBcnJheSIsImJ1ZmZlckluZGV4IiwiaXNTdHJpbmciLCJhYiIsInZpZXciLCJsZW5TdHIiLCJiaW5hcnlJZGVudGlmaWVyIiwibGVuZ3RoQXJ5IiwiYnVmZmVyVGFpbCIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInRvdGFsIiwiVHJhbnNwb3J0IiwiaG9zdG5hbWUiLCJzZWN1cmUiLCJxdWVyeSIsInRpbWVzdGFtcFBhcmFtIiwidGltZXN0YW1wUmVxdWVzdHMiLCJyZWFkeVN0YXRlIiwiYWdlbnQiLCJzb2NrZXQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJwZngiLCJwYXNzcGhyYXNlIiwiY2VydCIsImNhIiwiY2lwaGVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImZvcmNlTm9kZSIsImlzUmVhY3ROYXRpdmUiLCJleHRyYUhlYWRlcnMiLCJsb2NhbEFkZHJlc3MiLCJvbkVycm9yIiwiZGVzYyIsImRlc2NyaXB0aW9uIiwiZG9PcGVuIiwiZG9DbG9zZSIsIm9uQ2xvc2UiLCJzZW5kIiwib25PcGVuIiwib25EYXRhIiwicGFyc2VyIiwib25QYWNrZXQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImFscGhhYmV0Iiwic2VlZCIsInllYXN0Iiwibm93IiwiZGVjb2RlZCIsIlBvbGxpbmciLCJoYXNYSFIyIiwicmVzcG9uc2VUeXBlIiwiZm9yY2VCYXNlNjQiLCJpbmhlcml0IiwicG9sbCIsInBhdXNlIiwib25QYXVzZSIsInBvbGxpbmciLCJkb1BvbGwiLCJkZWNvZGVQYXlsb2FkIiwiY2FsbGJhY2tmbiIsImVuY29kZVBheWxvYWQiLCJkb1dyaXRlIiwic2NoZW1hIiwic2lkIiwicGFyc2VxcyIsIlhIUiIsIlJlcXVlc3QiLCJlbXB0eSIsInJlcXVlc3RUaW1lb3V0IiwiaXNTU0wiLCJ4ZCIsInhzIiwibWV0aG9kIiwiYXN5bmMiLCJjcmVhdGUiLCJyZXF1ZXN0IiwicmVxIiwic2VuZFhociIsInBvbGxYaHIiLCJ4aHIiLCJzZXREaXNhYmxlSGVhZGVyQ2hlY2siLCJzZXRSZXF1ZXN0SGVhZGVyIiwidGltZW91dCIsImhhc1hEUiIsIm9uTG9hZCIsIm9uZXJyb3IiLCJyZXNwb25zZVRleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJjb250ZW50VHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwic3RhdHVzIiwic2V0VGltZW91dCIsInJlcXVlc3RzQ291bnQiLCJyZXF1ZXN0cyIsIm9uU3VjY2VzcyIsImNsZWFudXAiLCJmcm9tRXJyb3IiLCJhYm9ydCIsInJlc3BvbnNlIiwiYXR0YWNoRXZlbnQiLCJ1bmxvYWRIYW5kbGVyIiwidGVybWluYXRpb25FdmVudCIsIkpTT05QUG9sbGluZyIsInJOZXdsaW5lIiwickVzY2FwZWROZXdsaW5lIiwiZ2xvYiIsIl9fX2VpbyIsInNjcmlwdCIsInBhcmVudE5vZGUiLCJmb3JtIiwiaWZyYW1lIiwiaW5zZXJ0QXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJhcmVhIiwiaWZyYW1lSWQiLCJwb3NpdGlvbiIsInRvcCIsImNvbXBsZXRlIiwiaW5pdElmcmFtZSIsImh0bWwiLCJhY3Rpb24iLCJzdWJtaXQiLCJCcm93c2VyV2ViU29ja2V0IiwiTm9kZVdlYlNvY2tldCIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIldlYlNvY2tldEltcGwiLCJXUyIsInBlck1lc3NhZ2VEZWZsYXRlIiwidXNpbmdCcm93c2VyV2ViU29ja2V0IiwicHJvdG9jb2xzIiwiY2hlY2siLCJoZWFkZXJzIiwid3MiLCJzdXBwb3J0cyIsImFkZEV2ZW50TGlzdGVuZXJzIiwib25vcGVuIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsImV2IiwiY29tcHJlc3MiLCJ0aHJlc2hvbGQiLCJqc29ucCIsImZvcmNlSlNPTlAiLCJKU09OUCIsIndlYnNvY2tldCIsIlNvY2tldCIsInRyYW5zcG9ydHMiLCJ0cmFuc3BvcnRPcHRpb25zIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwicG9saWN5UG9ydCIsInJlbWVtYmVyVXBncmFkZSIsIm9ubHlCaW5hcnlVcGdyYWRlcyIsInByb2R1Y3QiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ0ludGVydmFsVGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiY3JlYXRlVHJhbnNwb3J0IiwibyIsImNsb25lIiwiRUlPIiwidHJhbnNwb3J0Iiwic2V0VHJhbnNwb3J0Iiwib25EcmFpbiIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkZUxvc2VzQmluYXJ5IiwidXBncmFkaW5nIiwiZmx1c2giLCJmcmVlemVUcmFuc3BvcnQiLCJvblRyYW5zcG9ydENsb3NlIiwib251cGdyYWRlIiwidG8iLCJvbkhhbmRzaGFrZSIsInNldFBpbmciLCJmaWx0ZXJVcGdyYWRlcyIsIm9uSGVhcnRiZWF0IiwiY2xlYXJUaW1lb3V0Iiwic2VuZFBhY2tldCIsIndhaXRGb3JVcGdyYWRlIiwiY2xlYW51cEFuZENsb3NlIiwicmVhc29uIiwiZmlsdGVyZWRVcGdyYWRlcyIsImV2ZW50cyIsImNvbm5lY3QiLCJjb25uZWN0X2Vycm9yIiwiY29ubmVjdF90aW1lb3V0IiwiY29ubmVjdGluZyIsImRpc2Nvbm5lY3QiLCJyZWNvbm5lY3QiLCJyZWNvbm5lY3RfYXR0ZW1wdCIsInJlY29ubmVjdF9mYWlsZWQiLCJyZWNvbm5lY3RfZXJyb3IiLCJyZWNvbm5lY3RpbmciLCJpbyIsImpzb24iLCJpZHMiLCJhY2tzIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0ZWQiLCJmbGFncyIsImF1dG9Db25uZWN0Iiwic3ViRXZlbnRzIiwic3VicyIsInRvQXJyYXkiLCJoYXNCaW4iLCJFVkVOVCIsIkNPTk5FQ1QiLCJvbnBhY2tldCIsInNhbWVOYW1lc3BhY2UiLCJyb290TmFtZXNwYWNlRXJyb3IiLCJvbmNvbm5lY3QiLCJvbmV2ZW50IiwiQUNLIiwib25hY2siLCJESVNDT05ORUNUIiwib25kaXNjb25uZWN0IiwiYWNrIiwic2VudCIsImVtaXRCdWZmZXJlZCIsIkJhY2tvZmYiLCJmYWN0b3IiLCJqaXR0ZXIiLCJhdHRlbXB0cyIsImR1cmF0aW9uIiwicmFuZCIsInJhbmRvbSIsImRldmlhdGlvbiIsInJlc2V0Iiwic2V0TWluIiwic2V0TWF4Iiwic2V0Sml0dGVyIiwiTWFuYWdlciIsIm5zcHMiLCJyZWNvbm5lY3Rpb24iLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsImxhc3RQaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiZW1pdEFsbCIsInVwZGF0ZVNvY2tldElkcyIsImdlbmVyYXRlSWQiLCJlbmdpbmUiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5IiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwiZWlvIiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCJlcnJvclN1YiIsInRpbWVyIiwib25waW5nIiwib25wb25nIiwib25kYXRhIiwib25kZWNvZGVkIiwib25Db25uZWN0aW5nIiwicHJvY2Vzc1BhY2tldFF1ZXVlIiwic3Vic0xlbmd0aCIsImRlbGF5Iiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiY2FjaGUiLCJ1cmwiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsIlNvY2tldENvbXBvbmVudCIsInRva2VuIiwiQ29tcG9uZW50IiwidXNlcm5hbWUiLCJmZXRjaCIsInNldFN0YXRlIiwic3RhdGUiLCJhcnIyIiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVNwcmVhZCIsIkRhdGVMaW5lYnJlYWsiLCJkYXRldGltZSIsImRpc3BsYXkiLCJmbGV4IiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiTWVzc2FnZUFsaWduZXIiLCJzaWRlIiwianVzdGlmeUNvbnRlbnQiLCJNZXNzYWdlVmlldyIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJtYXJnaW4iLCJib3JkZXJSYWRpdXMiLCJib3JkZXJDb2xvciIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJtYXhXaWR0aCIsIndvcmRXcmFwIiwid29yZEJyZWFrIiwibWluV2lkdGgiLCJmb250U2l6ZSIsInBhZGRpbmdUb3AiLCJ0ZXh0QWxpZ24iLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJTdWJzZXF1ZW50TWVzc2FnZSIsImFsaWduSXRlbXMiLCJtYXJnaW5MZWZ0IiwiTWVzc2FnZSIsImhlaWdodCIsIk1lc3NhZ2VBdmF0YXIiLCJsZXR0ZXIiLCJGaXJzdE1lc3NhZ2UiLCJNZXNzYWdlT2JqZWN0TWFwcHRlciIsImRhdGVTcGFjZSIsInVzZU1lc3NhZ2VzTWFwcGVyIiwibWVzc2FnZXMiLCJ1c2VTdGF0ZSIsIm1hcHBlZE1lc3NhZ2VzIiwic2V0TWFwcGVkTWVzc2FnZXMiLCJ1c2VFZmZlY3QiLCJlbWFpbCIsImxhc3REYXRldGltZSIsImdldERhdGUiLCJtYXBNZXNzYWdlcyIsIl9leHRlbmRzIiwiTWVzc2FnZUNvbGxlY3Rpb25WaWV3IiwiTWVzc2FnZU9iamVjdE1hcHBlciIsIk1lc3NhZ2VWaWV3U2Nyb2xsZXIiLCJ0cmFuc2Zvcm0iLCJvdmVyZmxvdyIsIk1lc3NhZ2VFZGl0b3JEaXNwbGF5ZXIiLCJvbk1lc3NhZ2VDaGFuZ2UiLCJzZW5kTWVzc2FnZSIsImRpc2FibGVkIiwib25JbnB1dCIsIm9uQ2xpY2siLCJ4bWxucyIsInZpZXdCb3giLCJNZXNzYWdlc0Rpc3BsYXllciIsIm1lc3NhZ2VUZXh0IiwiaGFuZGxlTWVzc2FnZUNoYW5nZSIsInNvcnRlZE1lc3NhZ2VzIiwic2V0U29ydGVkTWVzc2FnZXMiLCJzb3J0IiwidXNlTWVzc2FnZVNvcnRlciIsInVzZU1lc3NhZ2VNYXBwZXIiLCJNZXNzYWdpbmdNb2R1bGVTb2NrZXQiLCJ0YXJnZXROYW1lIiwic2V0TWVzc2FnZVRleHQiLCJtZXNzYWdlUmVjaWV2ZWQiLCJzZXRNZXNzYWdlUmVjaWV2ZWQiLCJtZXNzYWdlU2VudCIsInNldE1lc3NhZ2VTZW50Iiwic2V0Q29ubmVjdGVkIiwiZXJyb3JzIiwic2V0RXJyb3IiLCJzZW5kZXIiLCJnZXRUaW1lIiwicmVjaWV2ZXIiLCJ1c2VTb2NrZXQiLCJzZXRNZXNzYWdlcyIsInNhdmVUb0xvY2FsU3RvcmFnZSIsInBlcnNpc3RlZE1lc3NhZ2VzIiwidXNlQ2hhdExvZyIsIkNoYXRVc2VyIiwiTWVzc2FnZU1vZHVsZVNvY2tldCIsIkNoYXRSb29tIiwic2VsZWN0ZWRJdGVtIiwic2V0U2VsZWN0ZWRJdGVtIiwiU29ja2V0SU9NZXNzYWdpbmciLCJXZWJSVENNZXNzYWdpbmciLCJtYXJnaW5Ub3AiLCJXZWJSVENWaWRlb0NoYXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JBLE1BQU1BLEVBQWEsQ0FDakJDLE9BQVEsNEJBQ1JDLEtBQU0sMEJBQ05DLGNBQWUsb0NBSVhDLEVBQVUsQ0FDZEMsaUJBQWtCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0VwQixNQUFNQyxVQUFrQ0MsRUFFdENQLHdCQUNFLE9BQU9BLEVBSVRJLHFCQUNFLE9BQU9BLEVBT1RJLDRCQUNFLE9BQ0VDLFNBQVUsT0FDVkMsWUFBYSxPQUNiQyx5QkFBMEIsT0FDMUJDLHdCQUF5QixRQUs3QkMsWUFBWUMsR0FDVkMsTUFBTUMsT0FBT0MsT0FBT1gsRUFBMEJFLGVBQWdCTSxJQUloRUQsMkJBQ0UsT0FBT0ssS0FBS0MsU0FBU1IsMkJBUXZCRSxTQUFTTyxJQUdUUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQy9DRixNQUFNUSxVQUF5Q2YsRUFFN0NPLFNBQVNPLEdBR1AsSUFBS0EsRUFFSCxZQURBRixLQUFLQyxTQUFTVixTQUFTSCxFQUEwQk4sV0FBV0MsUUFROUQsTUFBTXFCLEVBQW9CSixL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
