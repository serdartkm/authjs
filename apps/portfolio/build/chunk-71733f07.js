import{a as t,b as e,s as r,C as n,c as o,d as i,n as s,e as a,f as c,g as l,h,i as u,j as f,l as d,m as p,q as g,r as m,x as y,y as b,B as v,w as _}from"./chunk-b152c3ca.js";import{a as C,b as w}from"./index-8e90e029.js";import{a as A,b as E}from"./chunk-df286d13.js";
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const T={ACTIVE:"mdc-tab-indicator--active",FADE:"mdc-tab-indicator--fade",NO_TRANSITION:"mdc-tab-indicator--no-transition"},S={CONTENT_SELECTOR:".mdc-tab-indicator__content"};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class R extends t{static get cssClasses(){return T}static get strings(){return S}static get defaultAdapter(){return{addClass:()=>{},removeClass:()=>{},computeContentClientRect:()=>{},setContentStyleProperty:()=>{}}}constructor(t){super(Object.assign(R.defaultAdapter,t))}computeContentClientRect(){return this.adapter_.computeContentClientRect()}activate(t){}deactivate(){}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class k extends R{activate(t){if(!t)return void this.adapter_.addClass(R.cssClasses.ACTIVE);const e=this.computeContentClientRect(),r=t.width/e.width,n=t.left-e.left;this.adapter_.addClass(R.cssClasses.NO_TRANSITION),this.adapter_.setContentStyleProperty("transform",`translateX(${n}px) scaleX(${r})`),this.computeContentClientRect(),this.adapter_.removeClass(R.cssClasses.NO_TRANSITION),this.adapter_.addClass(R.cssClasses.ACTIVE),this.adapter_.setContentStyleProperty("transform","")}deactivate(){this.adapter_.removeClass(R.cssClasses.ACTIVE)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class O extends R{activate(){this.adapter_.addClass(R.cssClasses.ACTIVE)}deactivate(){this.adapter_.removeClass(R.cssClasses.ACTIVE)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class I extends e{static attachTo(t){return new I(t)}constructor(...t){super(...t),this.content_}initialize(){this.content_=this.root_.querySelector(R.strings.CONTENT_SELECTOR)}computeContentClientRect(){return this.foundation_.computeContentClientRect()}getDefaultFoundation(){const t=Object.assign({addClass:t=>this.root_.classList.add(t),removeClass:t=>this.root_.classList.remove(t),computeContentClientRect:()=>this.content_.getBoundingClientRect(),setContentStyleProperty:(t,e)=>this.content_.style.setProperty(t,e)});return this.root_.classList.contains(R.cssClasses.FADE)?new O(t):new k(t)}activate(t){this.foundation_.activate(t)}deactivate(){this.foundation_.deactivate()}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const x={ACTIVE:"mdc-tab--active"},L={ARIA_SELECTED:"aria-selected",RIPPLE_SELECTOR:".mdc-tab__ripple",CONTENT_SELECTOR:".mdc-tab__content",TAB_INDICATOR_SELECTOR:".mdc-tab-indicator",TABINDEX:"tabIndex",INTERACTED_EVENT:"MDCTab:interacted"};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class P extends t{static get cssClasses(){return x}static get strings(){return L}static get defaultAdapter(){return{addClass:()=>{},removeClass:()=>{},hasClass:()=>{},setAttr:()=>{},activateIndicator:()=>{},deactivateIndicator:()=>{},notifyInteracted:()=>{},getOffsetLeft:()=>{},getOffsetWidth:()=>{},getContentOffsetLeft:()=>{},getContentOffsetWidth:()=>{},focus:()=>{}}}constructor(t){super(Object.assign(P.defaultAdapter,t)),this.handleClick_=()=>this.handleClick()}handleClick(){this.adapter_.notifyInteracted()}isActive(){return this.adapter_.hasClass(x.ACTIVE)}activate(t){this.adapter_.addClass(x.ACTIVE),this.adapter_.setAttr(L.ARIA_SELECTED,"true"),this.adapter_.setAttr(L.TABINDEX,"0"),this.adapter_.activateIndicator(t),this.adapter_.focus()}deactivate(){this.isActive()&&(this.adapter_.removeClass(x.ACTIVE),this.adapter_.setAttr(L.ARIA_SELECTED,"false"),this.adapter_.setAttr(L.TABINDEX,"-1"),this.adapter_.deactivateIndicator())}computeDimensions(){const t=this.adapter_.getOffsetWidth(),e=this.adapter_.getOffsetLeft(),r=this.adapter_.getContentOffsetWidth(),n=this.adapter_.getContentOffsetLeft();return{rootLeft:e,rootRight:e+t,contentLeft:e+n,contentRight:e+n+r}}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class N extends e{constructor(...t){super(...t),this.ripple_,this.tabIndicator_,this.content_,this.handleClick_}static attachTo(t){return new N(t)}initialize(t=((t,e)=>new r(t,e)),e=(t=>new I(t))){const o=this.root_.querySelector(P.strings.RIPPLE_SELECTOR),i=Object.assign(r.createAdapter(this),{addClass:t=>o.classList.add(t),removeClass:t=>o.classList.remove(t),updateCssVariable:(t,e)=>o.style.setProperty(t,e)}),s=new n(i);this.ripple_=t(this.root_,s);const a=this.root_.querySelector(P.strings.TAB_INDICATOR_SELECTOR);this.tabIndicator_=e(a),this.content_=this.root_.querySelector(P.strings.CONTENT_SELECTOR)}initialSyncWithDOM(){this.handleClick_=this.foundation_.handleClick.bind(this.foundation_),this.listen("click",this.handleClick_)}destroy(){this.unlisten("click",this.handleClick_),this.ripple_.destroy(),super.destroy()}getDefaultFoundation(){return new P({setAttr:(t,e)=>this.root_.setAttribute(t,e),addClass:t=>this.root_.classList.add(t),removeClass:t=>this.root_.classList.remove(t),hasClass:t=>this.root_.classList.contains(t),activateIndicator:t=>this.tabIndicator_.activate(t),deactivateIndicator:()=>this.tabIndicator_.deactivate(),notifyInteracted:()=>this.emit(P.strings.INTERACTED_EVENT,{tab:this},!0),getOffsetLeft:()=>this.root_.offsetLeft,getOffsetWidth:()=>this.root_.offsetWidth,getContentOffsetLeft:()=>this.content_.offsetLeft,getContentOffsetWidth:()=>this.content_.offsetWidth,focus:()=>this.root_.focus()})}get active(){return this.foundation_.isActive()}activate(t){this.foundation_.activate(t)}deactivate(){this.foundation_.deactivate()}computeIndicatorClientRect(){return this.tabIndicator_.computeContentClientRect()}computeDimensions(){return this.foundation_.computeDimensions()}focus(){this.root_.focus()}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const F={ANIMATING:"mdc-tab-scroller--animating",SCROLL_TEST:"mdc-tab-scroller__test",SCROLL_AREA_SCROLL:"mdc-tab-scroller__scroll-area--scroll"},B={AREA_SELECTOR:".mdc-tab-scroller__scroll-area",CONTENT_SELECTOR:".mdc-tab-scroller__scroll-content"};
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class D{constructor(t){this.adapter_=t}getScrollPositionRTL(t){}scrollToRTL(t){}incrementScrollRTL(t){}getAnimatingScrollPosition(t,e){}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class M extends D{getScrollPositionRTL(){const t=this.adapter_.getScrollAreaScrollLeft(),{right:e}=this.calculateScrollEdges_();return Math.round(e-t)}scrollToRTL(t){const e=this.calculateScrollEdges_(),r=this.adapter_.getScrollAreaScrollLeft(),n=this.clampScrollValue_(e.right-t);return{finalScrollPosition:n,scrollDelta:n-r}}incrementScrollRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),r=this.clampScrollValue_(e-t);return{finalScrollPosition:r,scrollDelta:r-e}}getAnimatingScrollPosition(t){return t}calculateScrollEdges_(){return{left:0,right:this.adapter_.getScrollContentOffsetWidth()-this.adapter_.getScrollAreaOffsetWidth()}}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.min(Math.max(e.left,t),e.right)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class U extends D{getScrollPositionRTL(t){const e=this.adapter_.getScrollAreaScrollLeft();return Math.round(t-e)}scrollToRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),r=this.clampScrollValue_(-t);return{finalScrollPosition:r,scrollDelta:r-e}}incrementScrollRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),r=this.clampScrollValue_(e-t);return{finalScrollPosition:r,scrollDelta:r-e}}getAnimatingScrollPosition(t,e){return t-e}calculateScrollEdges_(){const t=this.adapter_.getScrollContentOffsetWidth();return{left:this.adapter_.getScrollAreaOffsetWidth()-t,right:0}}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.max(Math.min(e.right,t),e.left)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class j extends D{getScrollPositionRTL(t){const e=this.adapter_.getScrollAreaScrollLeft();return Math.round(e-t)}scrollToRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),r=this.clampScrollValue_(t);return{finalScrollPosition:r,scrollDelta:e-r}}incrementScrollRTL(t){const e=this.adapter_.getScrollAreaScrollLeft(),r=this.clampScrollValue_(e+t);return{finalScrollPosition:r,scrollDelta:e-r}}getAnimatingScrollPosition(t,e){return t+e}calculateScrollEdges_(){return{left:this.adapter_.getScrollContentOffsetWidth()-this.adapter_.getScrollAreaOffsetWidth(),right:0}}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.min(Math.max(e.right,t),e.left)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class Y extends t{static get cssClasses(){return F}static get strings(){return B}static get defaultAdapter(){return{eventTargetMatchesSelector:()=>{},addClass:()=>{},removeClass:()=>{},addScrollAreaClass:()=>{},setScrollAreaStyleProperty:()=>{},setScrollContentStyleProperty:()=>{},getScrollContentStyleValue:()=>{},setScrollAreaScrollLeft:()=>{},getScrollAreaScrollLeft:()=>{},getScrollContentOffsetWidth:()=>{},getScrollAreaOffsetWidth:()=>{},computeScrollAreaClientRect:()=>{},computeScrollContentClientRect:()=>{},computeHorizontalScrollbarHeight:()=>{}}}constructor(t){super(Object.assign(Y.defaultAdapter,t)),this.isAnimating_=!1,this.rtlScrollerInstance_}init(){const t=this.adapter_.computeHorizontalScrollbarHeight();this.adapter_.setScrollAreaStyleProperty("margin-bottom",-t+"px"),this.adapter_.addScrollAreaClass(Y.cssClasses.SCROLL_AREA_SCROLL)}getScrollPosition(){if(this.isRTL_())return this.computeCurrentScrollPositionRTL_();const t=this.calculateCurrentTranslateX_();return this.adapter_.getScrollAreaScrollLeft()-t}handleInteraction(){this.isAnimating_&&this.stopScrollAnimation_()}handleTransitionEnd(t){this.isAnimating_&&this.adapter_.eventTargetMatchesSelector(t.target,Y.strings.CONTENT_SELECTOR)&&(this.isAnimating_=!1,this.adapter_.removeClass(Y.cssClasses.ANIMATING))}incrementScroll(t){if(0!==t)return this.isRTL_()?this.incrementScrollRTL_(t):void this.incrementScroll_(t)}scrollTo(t){if(this.isRTL_())return this.scrollToRTL_(t);this.scrollTo_(t)}getRTLScroller(){return this.rtlScrollerInstance_||(this.rtlScrollerInstance_=this.rtlScrollerFactory_()),this.rtlScrollerInstance_}calculateCurrentTranslateX_(){const t=this.adapter_.getScrollContentStyleValue("transform");if("none"===t)return 0;const e=/\((.+)\)/.exec(t)[1].split(",");return parseFloat(e[4])}clampScrollValue_(t){const e=this.calculateScrollEdges_();return Math.min(Math.max(e.left,t),e.right)}computeCurrentScrollPositionRTL_(){const t=this.calculateCurrentTranslateX_();return this.getRTLScroller().getScrollPositionRTL(t)}calculateScrollEdges_(){return{left:0,right:this.adapter_.getScrollContentOffsetWidth()-this.adapter_.getScrollAreaOffsetWidth()}}scrollTo_(t){const e=this.getScrollPosition(),r=this.clampScrollValue_(t),n=r-e;this.animate_({finalScrollPosition:r,scrollDelta:n})}scrollToRTL_(t){const e=this.getRTLScroller().scrollToRTL(t);this.animate_(e)}incrementScroll_(t){const e=this.getScrollPosition(),r=t+e,n=this.clampScrollValue_(r),o=n-e;this.animate_({finalScrollPosition:n,scrollDelta:o})}incrementScrollRTL_(t){const e=this.getRTLScroller().incrementScrollRTL(t);this.animate_(e)}animate_(t){0!==t.scrollDelta&&(this.stopScrollAnimation_(),this.adapter_.setScrollAreaScrollLeft(t.finalScrollPosition),this.adapter_.setScrollContentStyleProperty("transform",`translateX(${t.scrollDelta}px)`),this.adapter_.computeScrollAreaClientRect(),requestAnimationFrame(()=>{this.adapter_.addClass(Y.cssClasses.ANIMATING),this.adapter_.setScrollContentStyleProperty("transform","none")}),this.isAnimating_=!0)}stopScrollAnimation_(){this.isAnimating_=!1;const t=this.getAnimatingScrollPosition_();this.adapter_.removeClass(Y.cssClasses.ANIMATING),this.adapter_.setScrollContentStyleProperty("transform","translateX(0px)"),this.adapter_.setScrollAreaScrollLeft(t)}getAnimatingScrollPosition_(){const t=this.calculateCurrentTranslateX_(),e=this.adapter_.getScrollAreaScrollLeft();return this.isRTL_()?this.getRTLScroller().getAnimatingScrollPosition(e,t):e-t}rtlScrollerFactory_(){const t=this.adapter_.getScrollAreaScrollLeft();this.adapter_.setScrollAreaScrollLeft(t-1);const e=this.adapter_.getScrollAreaScrollLeft();if(e<0)return this.adapter_.setScrollAreaScrollLeft(t),new U(this.adapter_);const r=this.adapter_.computeScrollAreaClientRect(),n=this.adapter_.computeScrollContentClientRect(),o=Math.round(n.right-r.right);return this.adapter_.setScrollAreaScrollLeft(t),o===e?new j(this.adapter_):new M(this.adapter_)}isRTL_(){return"rtl"===this.adapter_.getScrollContentStyleValue("direction")}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */let W;
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
class H extends e{static attachTo(t){return new H(t)}constructor(...t){super(...t),this.content_,this.area_,this.handleInteraction_,this.handleTransitionEnd_}initialize(){this.area_=this.root_.querySelector(Y.strings.AREA_SELECTOR),this.content_=this.root_.querySelector(Y.strings.CONTENT_SELECTOR)}initialSyncWithDOM(){this.handleInteraction_=()=>this.foundation_.handleInteraction(),this.handleTransitionEnd_=t=>this.foundation_.handleTransitionEnd(t),this.area_.addEventListener("wheel",this.handleInteraction_),this.area_.addEventListener("touchstart",this.handleInteraction_),this.area_.addEventListener("pointerdown",this.handleInteraction_),this.area_.addEventListener("mousedown",this.handleInteraction_),this.area_.addEventListener("keydown",this.handleInteraction_),this.content_.addEventListener("transitionend",this.handleTransitionEnd_)}destroy(){super.destroy(),this.area_.removeEventListener("wheel",this.handleInteraction_),this.area_.removeEventListener("touchstart",this.handleInteraction_),this.area_.removeEventListener("pointerdown",this.handleInteraction_),this.area_.removeEventListener("mousedown",this.handleInteraction_),this.area_.removeEventListener("keydown",this.handleInteraction_),this.content_.removeEventListener("transitionend",this.handleTransitionEnd_)}getDefaultFoundation(){return new Y({eventTargetMatchesSelector:(t,e)=>{return t[function(t){return["msMatchesSelector","matches"].filter(e=>e in t).pop()}(HTMLElement.prototype)](e)},addClass:t=>this.root_.classList.add(t),removeClass:t=>this.root_.classList.remove(t),addScrollAreaClass:t=>this.area_.classList.add(t),setScrollAreaStyleProperty:(t,e)=>this.area_.style.setProperty(t,e),setScrollContentStyleProperty:(t,e)=>this.content_.style.setProperty(t,e),getScrollContentStyleValue:t=>window.getComputedStyle(this.content_).getPropertyValue(t),setScrollAreaScrollLeft:t=>this.area_.scrollLeft=t,getScrollAreaScrollLeft:()=>this.area_.scrollLeft,getScrollContentOffsetWidth:()=>this.content_.offsetWidth,getScrollAreaOffsetWidth:()=>this.area_.offsetWidth,computeScrollAreaClientRect:()=>this.area_.getBoundingClientRect(),computeScrollContentClientRect:()=>this.content_.getBoundingClientRect(),computeHorizontalScrollbarHeight:()=>(function(t,e=!0){if(e&&void 0!==W)return W;const r=t.createElement("div");r.classList.add(F.SCROLL_TEST),t.body.appendChild(r);const n=r.offsetHeight-r.clientHeight;return t.body.removeChild(r),e&&(W=n),n})(document)})}getScrollPosition(){return this.foundation_.getScrollPosition()}getScrollContentWidth(){return this.content_.offsetWidth}incrementScroll(t){this.foundation_.incrementScroll(t)}scrollTo(t){this.foundation_.scrollTo(t)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const q={TAB_ACTIVATED_EVENT:"MDCTabBar:activated",TAB_SCROLLER_SELECTOR:".mdc-tab-scroller",TAB_SELECTOR:".mdc-tab",ARROW_LEFT_KEY:"ArrowLeft",ARROW_RIGHT_KEY:"ArrowRight",END_KEY:"End",HOME_KEY:"Home",ENTER_KEY:"Enter",SPACE_KEY:"Space"},z={EXTRA_SCROLL_AMOUNT:20,ARROW_LEFT_KEYCODE:37,ARROW_RIGHT_KEYCODE:39,END_KEYCODE:35,HOME_KEYCODE:36,ENTER_KEYCODE:13,SPACE_KEYCODE:32},V=new Set;V.add(q.ARROW_LEFT_KEY),V.add(q.ARROW_RIGHT_KEY),V.add(q.END_KEY),V.add(q.HOME_KEY),V.add(q.ENTER_KEY),V.add(q.SPACE_KEY);const K=new Map;K.set(z.ARROW_LEFT_KEYCODE,q.ARROW_LEFT_KEY),K.set(z.ARROW_RIGHT_KEYCODE,q.ARROW_RIGHT_KEY),K.set(z.END_KEYCODE,q.END_KEY),K.set(z.HOME_KEYCODE,q.HOME_KEY),K.set(z.ENTER_KEYCODE,q.ENTER_KEY),K.set(z.SPACE_KEYCODE,q.SPACE_KEY);class X extends t{static get strings(){return q}static get numbers(){return z}static get defaultAdapter(){return{scrollTo:()=>{},incrementScroll:()=>{},getScrollPosition:()=>{},getScrollContentWidth:()=>{},getOffsetWidth:()=>{},isRTL:()=>{},setActiveTab:()=>{},activateTabAtIndex:()=>{},deactivateTabAtIndex:()=>{},focusTabAtIndex:()=>{},getTabIndicatorClientRectAtIndex:()=>{},getTabDimensionsAtIndex:()=>{},getPreviousActiveTabIndex:()=>{},getFocusedTabIndex:()=>{},getIndexOfTab:()=>{},getTabListLength:()=>{},notifyTabActivated:()=>{}}}constructor(t){super(Object.assign(X.defaultAdapter,t)),this.useAutomaticActivation_=!1}setUseAutomaticActivation(t){this.useAutomaticActivation_=t}activateTab(t){const e=this.adapter_.getPreviousActiveTabIndex();this.indexIsInRange_(t)&&t!==e&&(this.adapter_.deactivateTabAtIndex(e),this.adapter_.activateTabAtIndex(t,this.adapter_.getTabIndicatorClientRectAtIndex(e)),this.scrollIntoView(t),this.adapter_.notifyTabActivated(t))}handleKeyDown(t){const e=this.getKeyFromEvent_(t);if(void 0!==e)if(this.isActivationKey_(e)||t.preventDefault(),this.useAutomaticActivation_){if(this.isActivationKey_(e))return;const t=this.determineTargetFromKey_(this.adapter_.getPreviousActiveTabIndex(),e);this.adapter_.setActiveTab(t),this.scrollIntoView(t)}else{const t=this.adapter_.getFocusedTabIndex();if(this.isActivationKey_(e))this.adapter_.setActiveTab(t);else{const r=this.determineTargetFromKey_(t,e);this.adapter_.focusTabAtIndex(r),this.scrollIntoView(r)}}}handleTabInteraction(t){this.adapter_.setActiveTab(this.adapter_.getIndexOfTab(t.detail.tab))}scrollIntoView(t){if(this.indexIsInRange_(t))return 0===t?this.adapter_.scrollTo(0):t===this.adapter_.getTabListLength()-1?this.adapter_.scrollTo(this.adapter_.getScrollContentWidth()):this.isRTL_()?this.scrollIntoViewRTL_(t):void this.scrollIntoView_(t)}determineTargetFromKey_(t,e){const r=this.isRTL_(),n=this.adapter_.getTabListLength()-1,o=e===q.END_KEY,i=e===q.ARROW_LEFT_KEY&&!r||e===q.ARROW_RIGHT_KEY&&r,s=e===q.ARROW_RIGHT_KEY&&!r||e===q.ARROW_LEFT_KEY&&r;let a=t;return o?a=n:i?a-=1:s?a+=1:a=0,a<0?a=n:a>n&&(a=0),a}calculateScrollIncrement_(t,e,r,n){const o=this.adapter_.getTabDimensionsAtIndex(e),i=o.contentLeft-r-n,s=o.contentRight-r-z.EXTRA_SCROLL_AMOUNT,a=i+z.EXTRA_SCROLL_AMOUNT;return e<t?Math.min(s,0):Math.max(a,0)}calculateScrollIncrementRTL_(t,e,r,n,o){const i=this.adapter_.getTabDimensionsAtIndex(e),s=o-i.contentLeft-r,a=o-i.contentRight-r-n+z.EXTRA_SCROLL_AMOUNT,c=s-z.EXTRA_SCROLL_AMOUNT;return e>t?Math.max(a,0):Math.min(c,0)}findAdjacentTabIndexClosestToEdge_(t,e,r,n){const o=e.rootLeft-r,i=e.rootRight-r-n,s=o+i;return o<0||s<0?t-1:i>0||s>0?t+1:-1}findAdjacentTabIndexClosestToEdgeRTL_(t,e,r,n,o){const i=o-e.rootLeft-n-r,s=o-e.rootRight-r,a=i+s;return i>0||a>0?t+1:s<0||a<0?t-1:-1}getKeyFromEvent_(t){return V.has(t.key)?t.key:K.get(t.keyCode)}isActivationKey_(t){return t===q.SPACE_KEY||t===q.ENTER_KEY}indexIsInRange_(t){return t>=0&&t<this.adapter_.getTabListLength()}isRTL_(){return this.adapter_.isRTL()}scrollIntoView_(t){const e=this.adapter_.getScrollPosition(),r=this.adapter_.getOffsetWidth(),n=this.adapter_.getTabDimensionsAtIndex(t),o=this.findAdjacentTabIndexClosestToEdge_(t,n,e,r);if(!this.indexIsInRange_(o))return;const i=this.calculateScrollIncrement_(t,o,e,r);this.adapter_.incrementScroll(i)}scrollIntoViewRTL_(t){const e=this.adapter_.getScrollPosition(),r=this.adapter_.getOffsetWidth(),n=this.adapter_.getTabDimensionsAtIndex(t),o=this.adapter_.getScrollContentWidth(),i=this.findAdjacentTabIndexClosestToEdgeRTL_(t,n,e,r,o);if(!this.indexIsInRange_(i))return;const s=this.calculateScrollIncrementRTL_(t,i,e,r,o);this.adapter_.incrementScroll(s)}}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class G extends e{constructor(...t){super(...t),this.tabList_,this.tabFactory_,this.tabScroller_,this.tabScrollerFactory_,this.handleTabInteraction_,this.handleKeyDown_}static attachTo(t){return new G(t)}set useAutomaticActivation(t){this.foundation_.setUseAutomaticActivation(t)}initialize(t=(t=>new N(t)),e=(t=>new H(t))){this.tabFactory_=t,this.tabScrollerFactory_=e,this.tabList_=this.getTabElements_().map(t=>this.tabFactory_(t));const r=this.root_.querySelector(X.strings.TAB_SCROLLER_SELECTOR);r&&(this.tabScroller_=this.tabScrollerFactory_(r))}initialSyncWithDOM(){this.handleTabInteraction_=t=>this.foundation_.handleTabInteraction(t),this.handleKeyDown_=t=>this.foundation_.handleKeyDown(t),this.root_.addEventListener(P.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.root_.addEventListener("keydown",this.handleKeyDown_);for(let t=0;t<this.tabList_.length;t++)if(this.tabList_[t].active){this.scrollIntoView(t);break}}destroy(){super.destroy(),this.root_.removeEventListener(P.strings.INTERACTED_EVENT,this.handleTabInteraction_),this.root_.removeEventListener("keydown",this.handleKeyDown_),this.tabList_.forEach(t=>t.destroy()),this.tabScroller_.destroy()}getDefaultFoundation(){return new X({scrollTo:t=>this.tabScroller_.scrollTo(t),incrementScroll:t=>this.tabScroller_.incrementScroll(t),getScrollPosition:()=>this.tabScroller_.getScrollPosition(),getScrollContentWidth:()=>this.tabScroller_.getScrollContentWidth(),getOffsetWidth:()=>this.root_.offsetWidth,isRTL:()=>"rtl"===window.getComputedStyle(this.root_).getPropertyValue("direction"),setActiveTab:t=>this.foundation_.activateTab(t),activateTabAtIndex:(t,e)=>this.tabList_[t].activate(e),deactivateTabAtIndex:t=>this.tabList_[t].deactivate(),focusTabAtIndex:t=>this.tabList_[t].focus(),getTabIndicatorClientRectAtIndex:t=>this.tabList_[t].computeIndicatorClientRect(),getTabDimensionsAtIndex:t=>this.tabList_[t].computeDimensions(),getPreviousActiveTabIndex:()=>{for(let t=0;t<this.tabList_.length;t++)if(this.tabList_[t].active)return t;return-1},getFocusedTabIndex:()=>{const t=this.getTabElements_(),e=document.activeElement;return t.indexOf(e)},getIndexOfTab:t=>this.tabList_.indexOf(t),getTabListLength:()=>this.tabList_.length,notifyTabActivated:t=>this.emit(X.strings.TAB_ACTIVATED_EVENT,{index:t},!0)})}activateTab(t){this.foundation_.activateTab(t)}scrollIntoView(t){this.foundation_.scrollIntoView(t)}getTabElements_(){return[].slice.call(this.root_.querySelectorAll(X.strings.TAB_SELECTOR))}}var J=Object.freeze({MDCTabBar:G,MDCTabBarFoundation:X}),$=o((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=e.TabBar=e.Tab=e.TabIcon=e.TabLabel=void 0;var r=i(s),n=i(a),o=i(c),p=i(l),g=i(h),m=i(u),y=i(f),b=function(t){function e(){var t;return(0,n.default)(this,e),(t=(0,p.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab__text-label",t.mdcProps=[],t}return(0,m.default)(e,t),(0,o.default)(e,[{key:"materialDom",value:function(t){return(0,d.h)("span",Object.assign({},t),t.children)}}]),e}(y.default);e.TabLabel=b;var v=function(t){function e(){var t;return(0,n.default)(this,e),(t=(0,p.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab__icon",t.mdcProps=[],t}return(0,m.default)(e,t),(0,o.default)(e,[{key:"materialDom",value:function(t){return(0,d.h)("span",Object.assign({className:"material-icons"},t),t.children)}}]),e}(y.default);e.TabIcon=v;var _=function(t){function e(){var t;return(0,n.default)(this,e),(t=(0,p.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab",t.mdcProps=["active"],t.mdcNotifyProps=["active"],t}return(0,m.default)(e,t),(0,o.default)(e,[{key:"materialDom",value:function(t){return(0,d.h)("button",Object.assign({class:"mdc-tab",role:"tab","aria-selected":"true"},t),(0,d.h)("span",{class:"mdc-tab__content"},t.children),(0,d.h)("span",{class:"mdc-tab-indicator ".concat(t.active?"mdc-tab-indicator--active":"")},(0,d.h)("span",{class:"mdc-tab-indicator__content mdc-tab-indicator__content--underline"})),(0,d.h)("span",{class:"mdc-tab__ripple"}))}}]),e}(y.default);e.Tab=_;var C=function(t){function e(){var t;return(0,n.default)(this,e),(t=(0,p.default)(this,(0,g.default)(e).apply(this,arguments))).componentName="tab-bar",t.mdcProps=[],t.mdcNotifyProps=["activeTabIndex"],t}return(0,m.default)(e,t),(0,o.default)(e,[{key:"componentDidMount",value:function(){(0,r.default)((0,g.default)(e.prototype),"componentDidMount",this).call(this),this.control&&(this.MDComponent=new J.MDCTabBar(this.control)),this.afterComponentDidMount()}},{key:"componentWillUnmount",value:function(){(0,r.default)((0,g.default)(e.prototype),"componentWillUnmount",this).call(this),this.MDComponent&&this.MDComponent.destroy()}},{key:"materialDom",value:function(t){return(0,d.h)("div",{class:"mdc-tab-bar",role:"tablist",ref:this.setControlRef},(0,d.h)("div",{class:"mdc-tab-scroller"},(0,d.h)("div",{class:"mdc-tab-scroller__scroll-area"},(0,d.h)("div",{class:"mdc-tab-scroller__scroll-content"},t.children))))}}]),e}(y.default);e.TabBar=C;var w=function(t){function e(){return(0,n.default)(this,e),(0,p.default)(this,(0,g.default)(e).apply(this,arguments))}return(0,m.default)(e,t),e}(C);e.default=w,w.Tab=_,w.TabLabel=b,w.TabIcon=v})),Z=p($);$.TabBar,$.Tab,$.TabIcon,$.TabLabel;g('/*!\n Material Components for the Web\n Copyright (c) 2018 Google Inc.\n License: MIT\n*/\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n.mdc-tab-bar {\n  width: 100%; }');g('/*!\n Material Components for the Web\n Copyright (c) 2018 Google Inc.\n License: MIT\n*/\n@-webkit-keyframes mdc-ripple-fg-radius-in {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }\n  to {\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }\n\n@keyframes mdc-ripple-fg-radius-in {\n  from {\n    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);\n            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }\n  to {\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }\n\n@-webkit-keyframes mdc-ripple-fg-opacity-in {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: 0; }\n  to {\n    opacity: var(--mdc-ripple-fg-opacity, 0); } }\n\n@keyframes mdc-ripple-fg-opacity-in {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: 0; }\n  to {\n    opacity: var(--mdc-ripple-fg-opacity, 0); } }\n\n@-webkit-keyframes mdc-ripple-fg-opacity-out {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: var(--mdc-ripple-fg-opacity, 0); }\n  to {\n    opacity: 0; } }\n\n@keyframes mdc-ripple-fg-opacity-out {\n  from {\n    -webkit-animation-timing-function: linear;\n            animation-timing-function: linear;\n    opacity: var(--mdc-ripple-fg-opacity, 0); }\n  to {\n    opacity: 0; } }\n\n.mdc-ripple-surface--test-edge-var-bug {\n  --mdc-ripple-surface-test-edge-var: 1px solid #000;\n  visibility: hidden; }\n  .mdc-ripple-surface--test-edge-var-bug::before {\n    border: var(--mdc-ripple-surface-test-edge-var); }\n\n.mdc-tab {\n  font-family: Roboto, sans-serif;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  font-size: 0.875rem;\n  line-height: 2.25rem;\n  font-weight: 500;\n  letter-spacing: 0.08929em;\n  text-decoration: none;\n  text-transform: uppercase;\n  color: rgba(0, 0, 0, 0.54);\n  /* @alternate */\n  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54));\n  --mdc-ripple-fg-size: 0;\n  --mdc-ripple-left: 0;\n  --mdc-ripple-top: 0;\n  --mdc-ripple-fg-scale: 1;\n  --mdc-ripple-fg-translate-end: 0;\n  --mdc-ripple-fg-translate-start: 0;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  will-change: transform, opacity;\n  display: table-cell;\n  position: relative;\n  box-sizing: border-box;\n  min-width: 160px;\n  min-height: 48px;\n  padding: 0 24px;\n  text-align: center;\n  text-decoration: none;\n  white-space: nowrap;\n  cursor: pointer;\n  overflow: hidden;\n  vertical-align: middle; }\n  .mdc-tab .mdc-tab__icon {\n    color: rgba(0, 0, 0, 0.54);\n    /* @alternate */\n    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }\n  .mdc-tab::before, .mdc-tab::after {\n    position: absolute;\n    border-radius: 50%;\n    opacity: 0;\n    pointer-events: none;\n    content: ""; }\n  .mdc-tab::before {\n    transition: opacity 15ms linear;\n    z-index: 1; }\n  .mdc-tab.mdc-ripple-upgraded::before {\n    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));\n            transform: scale(var(--mdc-ripple-fg-scale, 1)); }\n  .mdc-tab.mdc-ripple-upgraded::after {\n    top: 0;\n    /* @noflip */\n    left: 0;\n    -webkit-transform: scale(0);\n            transform: scale(0);\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n  .mdc-tab.mdc-ripple-upgraded--unbounded::after {\n    top: var(--mdc-ripple-top, 0);\n    /* @noflip */\n    left: var(--mdc-ripple-left, 0); }\n  .mdc-tab.mdc-ripple-upgraded--foreground-activation::after {\n    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;\n            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }\n  .mdc-tab.mdc-ripple-upgraded--foreground-deactivation::after {\n    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;\n            animation: 150ms mdc-ripple-fg-opacity-out;\n    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));\n            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }\n  .mdc-tab::before, .mdc-tab::after {\n    background-color: black; }\n  .mdc-tab:hover::before {\n    opacity: 0.04; }\n  .mdc-tab:not(.mdc-ripple-upgraded):focus::before, .mdc-tab.mdc-ripple-upgraded--background-focused::before {\n    transition-duration: 75ms;\n    opacity: 0.12; }\n  .mdc-tab:not(.mdc-ripple-upgraded)::after {\n    transition: opacity 150ms linear; }\n  .mdc-tab:not(.mdc-ripple-upgraded):active::after {\n    transition-duration: 75ms;\n    opacity: 0.16; }\n  .mdc-tab.mdc-ripple-upgraded {\n    --mdc-ripple-fg-opacity: 0.16; }\n  .mdc-tab::before, .mdc-tab::after {\n    top: calc(50% - 100%);\n    /* @noflip */\n    left: calc(50% - 100%);\n    width: 200%;\n    height: 200%; }\n  .mdc-tab.mdc-ripple-upgraded::after {\n    width: var(--mdc-ripple-fg-size, 100%);\n    height: var(--mdc-ripple-fg-size, 100%); }\n  .mdc-tab:hover {\n    color: rgba(0, 0, 0, 0.87);\n    /* @alternate */\n    color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n    .mdc-tab:hover .mdc-tab__icon {\n      color: rgba(0, 0, 0, 0.87);\n      /* @alternate */\n      color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n  .mdc-tab:focus {\n    outline: none; }\n  @media screen and (max-width: 600px) {\n    .mdc-tab {\n      min-width: 72px;\n      padding: 0 12px; } }\n  .mdc-tab__icon {\n    display: block;\n    margin: 0 auto;\n    width: 24px;\n    height: 24px; }\n    .mdc-tab-bar--icons-with-text .mdc-tab__icon {\n      margin-top: 4px; }\n  .mdc-tab__icon-text {\n    display: block;\n    margin: 0 auto; }\n  .mdc-tab__icon + .mdc-tab__icon-text {\n    padding-top: 6px; }\n\n.mdc-tab--active {\n  color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n  .mdc-tab--active .mdc-tab__icon {\n    color: rgba(0, 0, 0, 0.87);\n    /* @alternate */\n    color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n  .mdc-tab--active::before {\n    bottom: 0; }\n\n.mdc-tab__indicator {\n  background-color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));\n  position: absolute;\n  bottom: 0;\n  height: 2px;\n  visibility: hidden;\n  left: 2px;\n  width: calc(100% - 4px); }\n\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab--active .mdc-tab__indicator,\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:hover .mdc-tab__indicator,\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:active .mdc-tab__indicator {\n  visibility: visible; }\n\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:not(.mdc-tab--active):hover .mdc-tab__indicator {\n  opacity: .38; }\n\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab--active,\n.mdc-tab-bar:not(.mdc-tab-bar-upgraded) .mdc-tab:not(.mdc-tab--active):active .mdc-tab__indicator {\n  opacity: .87; }\n\n.mdc-tab-bar__indicator,\n.mdc-tab__indicator {\n  background-color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  background-color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n\n.mdc-tab-bar {\n  display: table;\n  position: relative;\n  height: 48px;\n  margin: 0 auto;\n  text-transform: uppercase; }\n\n.mdc-tab-bar__indicator {\n  background-color: rgba(0, 0, 0, 0.87);\n  /* @alternate */\n  background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));\n  position: absolute;\n  bottom: 0;\n  height: 2px;\n  visibility: hidden;\n  left: 0;\n  width: 100%;\n  -webkit-transform-origin: left top;\n          transform-origin: left top;\n  transition: -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n  will-change: transform; }\n\n.mdc-tab-bar--icons-with-text {\n  height: 72px; }\n\n.mdc-tab-bar-scroller {\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  width: 100%;\n  background-color: inherit;\n  overflow: hidden; }\n  .mdc-tab-bar-scroller__scroll-frame {\n    display: flex;\n    position: relative;\n    flex: 1;\n    justify-content: flex-start;\n    overflow: hidden; }\n    .mdc-tab-bar-scroller__scroll-frame__tabs {\n      transition: -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);\n      will-change: transform; }\n  .mdc-tab-bar-scroller__indicator {\n    color: rgba(0, 0, 0, 0.54);\n    /* @alternate */\n    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54));\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 48px;\n    cursor: pointer;\n    visibility: hidden; }\n    .mdc-tab-bar-scroller__indicator:hover {\n      color: rgba(0, 0, 0, 0.87);\n      /* @alternate */\n      color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }\n    .mdc-tab-bar-scroller__indicator__inner {\n      color: inherit;\n      text-decoration: inherit;\n      cursor: inherit; }\n      .mdc-tab-bar-scroller__indicator__inner:focus {\n        outline-color: inherit; }\n      .mdc-tab-bar-scroller[dir="rtl"] .mdc-tab-bar-scroller__indicator__inner,\n      [dir="rtl"] .mdc-tab-bar-scroller .mdc-tab-bar-scroller__indicator__inner {\n        -webkit-transform: rotate(180deg);\n                transform: rotate(180deg); }\n    .mdc-tab-bar-scroller__indicator__inner:hover {\n      color: inherit; }\n  .mdc-tab-bar-scroller__indicator--enabled {\n    visibility: visible; }');var Q=function(t){var e=t.datetime;return m("div",{style:{display:"flex"}},m("div",{style:{flex:"1"}},m("hr",null)),m("div",null,new Date(e).toLocaleDateString()),m("div",{style:{flex:1}},m("hr",null)))};var tt=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t};function et(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function rt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?et(r,!0).forEach((function(e){tt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):et(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var nt=function(t){var e=t.children,r=t.side,n=t.style;return m("div",{style:rt({display:"flex",justifyContent:"left"===r?"flex-start":"flex-end"},n)},e)},ot=function(t){var e=t.message,r=t.backgroundColor,n=t.datetime;return m("div",{style:{backgroundColor:r,padding:5,margin:2,borderRadius:15,borderColor:"#9E9E9E",borderStyle:"solid",borderWidth:2,maxWidth:"100%",wordWrap:"break-word",wordBreak:"break-all",minWidth:"30%"}},m("div",null,e),m("div",{style:{fontSize:10,paddingTop:2,textAlign:"end"}},m("i",{style:{backgroundColor:"#efebe9"}},new Date(n).toLocaleTimeString())))},it=function(t){var e=t.message,r=t.datetime;return m("div",{style:{display:"flex",alignItems:"center",marginLeft:45}},m(ot,{message:e,datetime:r,backgroundColor:"#FFECB3"}))},st={height:30,width:40,padding:3,borderRadius:30,backgroundColor:"darkSmoke",borderStyle:"solid",borderWidth:2,display:"flex",justifyContent:"center",alignItems:"center",color:"#009688",borderColor:"#80cbc4"},at=function(t){var e=t.letter;return m("div",{style:st},m("div",null,(void 0===e?"U":e).toUpperCase()))},ct=function(t){var e=t.message,r=t.datetime,n=t.letter,o=t.local;return m("div",{style:{display:"flex",alignItems:"center"}},!o&&m(at,{letter:n}),m(ot,{message:e,datetime:r,backgroundColor:"#FFECB3"}))},lt=function(t){var e=t.order,r=t.dateSpace;return m("div",null,r&&m(Q,t),m(nt,t,m("F"===e?ct:it,t)))};function ht(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ut(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ht(r,!0).forEach((function(e){tt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ht(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var ft=function(t){var e=y(t),r=b(e,2),n=r[0],o=r[1];return v((function(){o(function(){if(0===t.length)return[];var e=t[0].from,r=t[0].datetime;return t.map((function(t,n){if(0===n&&t.local)return ut({},t,{side:"right",order:"F",dateSpace:!0});if(0===n&&!t.local)return ut({},t,{side:"left",order:"F",dateSpace:!0,letter:void 0!==t.from[0]?t.from[0]:""});if(n>0&&e===t.from&&t.local)return new Date(r).getDate()!==new Date(t.datetime).getDate()?(e=t.from,r=t.datetime,ut({},t,{side:"right",order:"S",dateSpace:!0})):(e=t.from,r=t.datetime,ut({},t,{side:"right",order:"S",dateSpace:!1}));if(n>0&&e!==t.from&&t.local)return new Date(r).getDate()===new Date(t.datetime).getDate()?(e=t.from,r=t.datetime,ut({},t,{side:"right",order:"F",dateSpace:!1})):(e=t.from,r=t.datetime,ut({},t,{side:"right",order:"F",dateSpace:!0}));if(n>0&&e===t.from&&!t.local){if(new Date(r).getDate()!==new Date(t.datetime).getDate()){var o=void 0!==t.from[0]?t.from[0]:"";return r=t.datetime,ut({},t,{side:"left",order:"S",dateSpace:!0,letter:o})}var i=void 0!==t.from[0]?t.from[0]:"";return r=t.datetime,ut({},t,{side:"left",order:"S",dateSpace:!1,letter:i})}if(n>0&&e!==t.from&&!t.local){if(new Date(r).getDate()===new Date(t.datetime).getDate()){var s=void 0!==t.from[0]?t.from[0]:"";return e=t.from,r=t.datetime,ut({},t,{side:"left",order:"F",dateSpace:!1,letter:s})}var a=void 0!==t.from[0]?t.from[0]:"";return e=t.from,r=t.datetime,ut({},t,{side:"left",order:"F",dateSpace:!0,letter:a})}return null}))}())}),[t]),{mappedMessages:n}},dt=o((function(t){function e(){return t.exports=e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},e.apply(this,arguments)}t.exports=e})),pt=function(t){var e=t.messages;return e.length>0?e.map((function(t,e){return m(lt,dt({},t,{key:e}))})):null},gt=function(t){var e=t.children;return m("div",{style:{transform:"rotate(180deg)",height:"85%",backgroundColor:"#edeff2",overflow:"scroll",width:"100%"}},m("div",{style:{transform:"rotate(180deg)"}},e))},mt=function(t){var e=t.onMessageChange,r=t.message,n=t.sendMessage,o=t.id,i=void 0===o?0:o,s=t.disabled;return m("div",{style:{display:"flex"}},m("input",{style:{flex:1},"data-testid":"message".concat(i),onInput:e,value:r,name:"message",type:"text",placeholder:"Enter message text"}),m("div",{style:{display:"flex"}},m("button",{"data-testid":"sendMessage".concat(i),disabled:""===r||s,style:{marginLeft:2,width:"100%"},onClick:n},m("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},m("path",{d:"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"}),m("path",{d:"M0 0h24v24H0z",fill:"none"})))))},yt=function(t){var e=t.messages,r=t.socket,n=t.id,o=t.messageText,i=t.sendMessage,s=t.handleMessageChange,a=function(t){var e=y(t),r=b(e,2),n=r[0],o=r[1];return v((function(){o(t.sort((function(t,e){return t.datetime-e.datetime})))}),[t]),{sortedMessages:n}}(e).sortedMessages,c=ft(a).mappedMessages;return[m(gt,null,m(pt,{messages:c})),m(mt,{disabled:null===r,id:n,message:o,sendMessage:i,onMessageChange:s})]},bt=function(t){t.name,t.targetName;var e=t.socket,r=t.errors,n=t.messages,o=t.handleMessageChange,i=t.messageText,s=t.sendMessage;return m(yt,{errors:r,socket:e,messages:n,handleMessageChange:o,messageText:i,sendMessage:s})};g(".chip{\n    background-color: darkgrey;\n    color: white;\n    width: 20px;\n    height: 20px;\n    border-radius: 10px;\n   line-height: 20px;\n}");var vt=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,_t=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],Ct=function(t){var e=t,r=t.indexOf("["),n=t.indexOf("]");-1!=r&&-1!=n&&(t=t.substring(0,r)+t.substring(r,n).replace(/:/g,";")+t.substring(n,t.length));for(var o=vt.exec(t||""),i={},s=14;s--;)i[_t[s]]=o[s]||"";return-1!=r&&-1!=n&&(i.source=e,i.host=i.host.substring(1,i.host.length-1).replace(/;/g,":"),i.authority=i.authority.replace("[","").replace("]","").replace(/;/g,":"),i.ipv6uri=!0),i},wt=1e3,At=60*wt,Et=60*At,Tt=24*Et,St=7*Tt,Rt=365.25*Tt,kt=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*Rt;case"weeks":case"week":case"w":return r*St;case"days":case"day":case"d":return r*Tt;case"hours":case"hour":case"hrs":case"hr":case"h":return r*Et;case"minutes":case"minute":case"mins":case"min":case"m":return r*At;case"seconds":case"second":case"secs":case"sec":case"s":return r*wt;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===r&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=Tt)return Ot(t,e,Tt,"day");if(e>=Et)return Ot(t,e,Et,"hour");if(e>=At)return Ot(t,e,At,"minute");if(e>=wt)return Ot(t,e,wt,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=Tt)return Math.round(t/Tt)+"d";if(e>=Et)return Math.round(t/Et)+"h";if(e>=At)return Math.round(t/At)+"m";if(e>=wt)return Math.round(t/wt)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function Ot(t,e,r,n){var o=e>=1.5*r;return Math.round(t/r)+" "+n+(o?"s":"")}var It=function(t){function e(t){let e=0;for(let r=0;r<t.length;r++)e=(e<<5)-e+t.charCodeAt(r),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let i;function s(...t){if(!s.enabled)return;const e=s,n=Number(new Date),o=n-(i||n);e.diff=o,e.prev=i,e.curr=n,i=n,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;a++;const i=r.formatters[o];if("function"==typeof i){const r=t[a];n=i.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=n,s.extend=o,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function n(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},r.disable=function(){const t=[...r.names.map(i),...r.skips.map(i).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(e=0;e<o;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=kt,Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r},xt=o((function(t,e){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,o=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(n++,"%c"===t&&(o=n))}),e.splice(o,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==C&&"env"in C&&(t=C.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=It(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}})),Lt=(xt.log,xt.formatArgs,xt.save,xt.load,xt.useColors,xt.storage,xt.colors,xt("socket.io-client:url")),Pt=function(t,e){var r=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(Lt("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),Lt("parse %s",t),r=Ct(t));r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443"));r.path=r.path||"/";var n=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+n+":"+r.port,r.href=r.protocol+"://"+n+(e&&e.port===r.port?"":":"+r.port),r};var Nt=1e3,Ft=60*Nt,Bt=60*Ft,Dt=24*Bt,Mt=365.25*Dt,Ut=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*Mt;case"days":case"day":case"d":return r*Dt;case"hours":case"hour":case"hrs":case"hr":case"h":return r*Bt;case"minutes":case"minute":case"mins":case"min":case"m":return r*Ft;case"seconds":case"second":case"secs":case"sec":case"s":return r*Nt;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===r&&!1===isNaN(t))return e.long?function(t){return jt(t,Dt,"day")||jt(t,Bt,"hour")||jt(t,Ft,"minute")||jt(t,Nt,"second")||t+" ms"}(t):function(t){if(t>=Dt)return Math.round(t/Dt)+"d";if(t>=Bt)return Math.round(t/Bt)+"h";if(t>=Ft)return Math.round(t/Ft)+"m";if(t>=Nt)return Math.round(t/Nt)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function jt(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var Yt=o((function(t,e){function r(t){var r;function o(){if(o.enabled){var t=o,n=+new Date,i=n-(r||n);t.diff=i,t.prev=r,t.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;c++;var o=e.formatters[n];if("function"==typeof o){var i=s[c];r=o.call(t,i),s.splice(c,1),c--}return r})),e.formatArgs.call(t,s),(o.log||e.log||console.log.bind(console)).apply(t,s)}}return o.namespace=t,o.enabled=e.enabled(t),o.useColors=e.useColors(),o.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),o.destroy=n,"function"==typeof e.init&&e.init(o),e.instances.push(o),o}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var i=e.instances[r];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=Ut,e.instances=[],e.names=[],e.skips=[],e.formatters={}})),Wt=(Yt.coerce,Yt.disable,Yt.enable,Yt.enabled,Yt.humanize,Yt.instances,Yt.names,Yt.skips,Yt.formatters,o((function(t,e){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==C&&"env"in C&&(t=C.env.DEBUG),t}(e=t.exports=Yt).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))})),t.splice(i,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())}))),Ht=(Wt.log,Wt.formatArgs,Wt.save,Wt.load,Wt.useColors,Wt.storage,Wt.colors,o((function(t){function e(t){if(t)return function(t){for(var r in e.prototype)t[r]=e.prototype[r];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<n.length;o++)if((r=n[o])===e||r.fn===e){n.splice(o,1);break}return this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var n=0,o=(r=r.slice(0)).length;n<o;++n)r[n].apply(this,e);return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}}))),qt={}.toString,zt=Array.isArray||function(t){return"[object Array]"==qt.call(t)},Vt=[],Kt=[],Xt="undefined"!=typeof Uint8Array?Uint8Array:Array,Gt=!1;function Jt(){Gt=!0;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0,r=t.length;e<r;++e)Vt[e]=t[e],Kt[t.charCodeAt(e)]=e;Kt["-".charCodeAt(0)]=62,Kt["_".charCodeAt(0)]=63}function $t(t,e,r){for(var n,o,i=[],s=e;s<r;s+=3)n=(t[s]<<16)+(t[s+1]<<8)+t[s+2],i.push(Vt[(o=n)>>18&63]+Vt[o>>12&63]+Vt[o>>6&63]+Vt[63&o]);return i.join("")}function Zt(t){var e;Gt||Jt();for(var r=t.length,n=r%3,o="",i=[],s=0,a=r-n;s<a;s+=16383)i.push($t(t,s,s+16383>a?a:s+16383));return 1===n?(e=t[r-1],o+=Vt[e>>2],o+=Vt[e<<4&63],o+="=="):2===n&&(e=(t[r-2]<<8)+t[r-1],o+=Vt[e>>10],o+=Vt[e>>4&63],o+=Vt[e<<2&63],o+="="),i.push(o),i.join("")}function Qt(t,e,r,n,o){var i,s,a=8*o-n-1,c=(1<<a)-1,l=c>>1,h=-7,u=r?o-1:0,f=r?-1:1,d=t[e+u];for(u+=f,i=d&(1<<-h)-1,d>>=-h,h+=a;h>0;i=256*i+t[e+u],u+=f,h-=8);for(s=i&(1<<-h)-1,i>>=-h,h+=n;h>0;s=256*s+t[e+u],u+=f,h-=8);if(0===i)i=1-l;else{if(i===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),i-=l}return(d?-1:1)*s*Math.pow(2,i-n)}function te(t,e,r,n,o,i){var s,a,c,l=8*i-o-1,h=(1<<l)-1,u=h>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:i-1,p=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+u>=1?f/c:f*Math.pow(2,1-u))*c>=2&&(s++,c/=2),s+u>=h?(a=0,s=h):s+u>=1?(a=(e*c-1)*Math.pow(2,o),s+=u):(a=e*Math.pow(2,u-1)*Math.pow(2,o),s=0));o>=8;t[r+d]=255&a,d+=p,a/=256,o-=8);for(s=s<<o|a,l+=o;l>0;t[r+d]=255&s,d+=p,s/=256,l-=8);t[r+d-p]|=128*g}var ee={}.toString,re=Array.isArray||function(t){return"[object Array]"==ee.call(t)};function ne(){return ie.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function oe(t,e){if(ne()<e)throw new RangeError("Invalid typed array length");return ie.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=ie.prototype:(null===t&&(t=new ie(e)),t.length=e),t}function ie(t,e,r){if(!(ie.TYPED_ARRAY_SUPPORT||this instanceof ie))return new ie(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return ce(this,t)}return se(this,t,e,r)}function se(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);ie.TYPED_ARRAY_SUPPORT?(t=e).__proto__=ie.prototype:t=le(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!ie.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|fe(e,r),o=(t=oe(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(ue(e)){var r=0|he(e.length);return 0===(t=oe(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?oe(t,0):le(t,e);if("Buffer"===e.type&&re(e.data))return le(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function ae(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function ce(t,e){if(ae(e),t=oe(t,e<0?0:0|he(e)),!ie.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function le(t,e){var r=e.length<0?0:0|he(e.length);t=oe(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function he(t){if(t>=ne())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+ne().toString(16)+" bytes");return 0|t}function ue(t){return!(null==t||!t._isBuffer)}function fe(t,e){if(ue(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return Ue(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return je(t).length;default:if(n)return Ue(t).length;e=(""+e).toLowerCase(),n=!0}}function de(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return ke(this,e,r);case"utf8":case"utf-8":return Ee(this,e,r);case"ascii":return Se(this,e,r);case"latin1":case"binary":return Re(this,e,r);case"base64":return Ae(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Oe(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function pe(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function ge(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=ie.from(e,n)),ue(e))return 0===e.length?-1:me(t,e,r,n,o);if("number"==typeof e)return e&=255,ie.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):me(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function me(t,e,r,n,o){var i,s=1,a=t.length,c=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,r/=2}function l(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var h=-1;for(i=r;i<a;i++)if(l(t,i)===l(e,-1===h?0:i-h)){if(-1===h&&(h=i),i-h+1===c)return h*s}else-1!==h&&(i-=i-h),h=-1}else for(r+c>a&&(r=a-c),i=r;i>=0;i--){for(var u=!0,f=0;f<c;f++)if(l(t,i+f)!==l(e,f)){u=!1;break}if(u)return i}return-1}function ye(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function be(t,e,r,n){return Ye(Ue(e,t.length-r),t,r,n)}function ve(t,e,r,n){return Ye(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function _e(t,e,r,n){return ve(t,e,r,n)}function Ce(t,e,r,n){return Ye(je(e),t,r,n)}function we(t,e,r,n){return Ye(function(t,e){for(var r,n,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function Ae(t,e,r){return 0===e&&r===t.length?Zt(t):Zt(t.slice(e,r))}function Ee(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,s,a,c,l=t[o],h=null,u=l>239?4:l>223?3:l>191?2:1;if(o+u<=r)switch(u){case 1:l<128&&(h=l);break;case 2:128==(192&(i=t[o+1]))&&(c=(31&l)<<6|63&i)>127&&(h=c);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(c=(15&l)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(h=c);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&l)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(h=c)}null===h?(h=65533,u=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),o+=u}return function(t){var e=t.length;if(e<=Te)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=Te));return r}(n)}ie.TYPED_ARRAY_SUPPORT=void 0===w.TYPED_ARRAY_SUPPORT||w.TYPED_ARRAY_SUPPORT,ie.poolSize=8192,ie._augment=function(t){return t.__proto__=ie.prototype,t},ie.from=function(t,e,r){return se(null,t,e,r)},ie.TYPED_ARRAY_SUPPORT&&(ie.prototype.__proto__=Uint8Array.prototype,ie.__proto__=Uint8Array),ie.alloc=function(t,e,r){return function(t,e,r,n){return ae(e),e<=0?oe(t,e):void 0!==r?"string"==typeof n?oe(t,e).fill(r,n):oe(t,e).fill(r):oe(t,e)}(null,t,e,r)},ie.allocUnsafe=function(t){return ce(null,t)},ie.allocUnsafeSlow=function(t){return ce(null,t)},ie.isBuffer=We,ie.compare=function(t,e){if(!ue(t)||!ue(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},ie.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},ie.concat=function(t,e){if(!re(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return ie.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=ie.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var i=t[r];if(!ue(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},ie.byteLength=fe,ie.prototype._isBuffer=!0,ie.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)pe(this,e,e+1);return this},ie.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)pe(this,e,e+3),pe(this,e+1,e+2);return this},ie.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)pe(this,e,e+7),pe(this,e+1,e+6),pe(this,e+2,e+5),pe(this,e+3,e+4);return this},ie.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?Ee(this,0,t):de.apply(this,arguments)},ie.prototype.equals=function(t){if(!ue(t))throw new TypeError("Argument must be a Buffer");return this===t||0===ie.compare(this,t)},ie.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},ie.prototype.compare=function(t,e,r,n,o){if(!ue(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(n,o),l=t.slice(e,r),h=0;h<a;++h)if(c[h]!==l[h]){i=c[h],s=l[h];break}return i<s?-1:s<i?1:0},ie.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},ie.prototype.indexOf=function(t,e,r){return ge(this,t,e,r,!0)},ie.prototype.lastIndexOf=function(t,e,r){return ge(this,t,e,r,!1)},ie.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return ye(this,t,e,r);case"utf8":case"utf-8":return be(this,t,e,r);case"ascii":return ve(this,t,e,r);case"latin1":case"binary":return _e(this,t,e,r);case"base64":return Ce(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return we(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},ie.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Te=4096;function Se(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function Re(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function ke(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=Me(t[i]);return o}function Oe(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function Ie(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function xe(t,e,r,n,o,i){if(!ue(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function Le(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function Pe(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function Ne(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Fe(t,e,r,n,o){return o||Ne(t,0,r,4),te(t,e,r,n,23,4),r+4}function Be(t,e,r,n,o){return o||Ne(t,0,r,8),te(t,e,r,n,52,8),r+8}ie.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),ie.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=ie.prototype;else{var o=e-t;r=new ie(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},ie.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||Ie(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},ie.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||Ie(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},ie.prototype.readUInt8=function(t,e){return e||Ie(t,1,this.length),this[t]},ie.prototype.readUInt16LE=function(t,e){return e||Ie(t,2,this.length),this[t]|this[t+1]<<8},ie.prototype.readUInt16BE=function(t,e){return e||Ie(t,2,this.length),this[t]<<8|this[t+1]},ie.prototype.readUInt32LE=function(t,e){return e||Ie(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},ie.prototype.readUInt32BE=function(t,e){return e||Ie(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},ie.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||Ie(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},ie.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||Ie(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},ie.prototype.readInt8=function(t,e){return e||Ie(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},ie.prototype.readInt16LE=function(t,e){e||Ie(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},ie.prototype.readInt16BE=function(t,e){e||Ie(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},ie.prototype.readInt32LE=function(t,e){return e||Ie(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},ie.prototype.readInt32BE=function(t,e){return e||Ie(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},ie.prototype.readFloatLE=function(t,e){return e||Ie(t,4,this.length),Qt(this,t,!0,23,4)},ie.prototype.readFloatBE=function(t,e){return e||Ie(t,4,this.length),Qt(this,t,!1,23,4)},ie.prototype.readDoubleLE=function(t,e){return e||Ie(t,8,this.length),Qt(this,t,!0,52,8)},ie.prototype.readDoubleBE=function(t,e){return e||Ie(t,8,this.length),Qt(this,t,!1,52,8)},ie.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||xe(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},ie.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||xe(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},ie.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,1,255,0),ie.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},ie.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,2,65535,0),ie.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Le(this,t,e,!0),e+2},ie.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,2,65535,0),ie.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Le(this,t,e,!1),e+2},ie.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,4,4294967295,0),ie.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):Pe(this,t,e,!0),e+4},ie.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,4,4294967295,0),ie.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Pe(this,t,e,!1),e+4},ie.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);xe(this,t,e,r,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<r&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},ie.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);xe(this,t,e,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},ie.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,1,127,-128),ie.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},ie.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,2,32767,-32768),ie.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Le(this,t,e,!0),e+2},ie.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,2,32767,-32768),ie.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Le(this,t,e,!1),e+2},ie.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,4,2147483647,-2147483648),ie.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):Pe(this,t,e,!0),e+4},ie.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||xe(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),ie.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Pe(this,t,e,!1),e+4},ie.prototype.writeFloatLE=function(t,e,r){return Fe(this,t,e,!0,r)},ie.prototype.writeFloatBE=function(t,e,r){return Fe(this,t,e,!1,r)},ie.prototype.writeDoubleLE=function(t,e,r){return Be(this,t,e,!0,r)},ie.prototype.writeDoubleBE=function(t,e,r){return Be(this,t,e,!1,r)},ie.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!ie.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},ie.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!ie.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var s=ue(t)?t:Ue(new ie(t,n).toString()),a=s.length;for(i=0;i<r-e;++i)this[i+e]=s[i%a]}return this};var De=/[^+\/0-9A-Za-z-_]/g;function Me(t){return t<16?"0"+t.toString(16):t.toString(16)}function Ue(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function je(t){return function(t){var e,r,n,o,i,s;Gt||Jt();var a=t.length;if(a%4>0)throw new Error("Invalid string. Length must be a multiple of 4");i="="===t[a-2]?2:"="===t[a-1]?1:0,s=new Xt(3*a/4-i),n=i>0?a-4:a;var c=0;for(e=0,r=0;e<n;e+=4,r+=3)o=Kt[t.charCodeAt(e)]<<18|Kt[t.charCodeAt(e+1)]<<12|Kt[t.charCodeAt(e+2)]<<6|Kt[t.charCodeAt(e+3)],s[c++]=o>>16&255,s[c++]=o>>8&255,s[c++]=255&o;return 2===i?(o=Kt[t.charCodeAt(e)]<<2|Kt[t.charCodeAt(e+1)]>>4,s[c++]=255&o):1===i&&(o=Kt[t.charCodeAt(e)]<<10|Kt[t.charCodeAt(e+1)]<<4|Kt[t.charCodeAt(e+2)]>>2,s[c++]=o>>8&255,s[c++]=255&o),s}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(De,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Ye(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}function We(t){return null!=t&&(!!t._isBuffer||He(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&He(t.slice(0,0))}(t))}function He(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}var qe=function(t){return ze&&We(t)||Ve&&(t instanceof ArrayBuffer||Ke(t))},ze=!0,Ve="function"==typeof ArrayBuffer,Ke=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer};var Xe=Object.prototype.toString,Ge="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Xe.call(Blob),Je="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Xe.call(File);var $e={deconstructPacket:function(t){var e=[],r=t.data,n=t;return n.data=function t(e,r){if(!e)return e;if(qe(e)){var n={_placeholder:!0,num:r.length};return r.push(e),n}if(zt(e)){for(var o=new Array(e.length),i=0;i<e.length;i++)o[i]=t(e[i],r);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var s in e)o[s]=t(e[s],r);return o}return e}(r,e),n.attachments=e.length,{packet:n,buffers:e}},reconstructPacket:function(t,e){return t.data=function t(e,r){if(!e)return e;if(e&&e._placeholder)return r[e.num];if(zt(e))for(var n=0;n<e.length;n++)e[n]=t(e[n],r);else if("object"==typeof e)for(var o in e)e[o]=t(e[o],r);return e}(t.data,e),t.attachments=void 0,t},removeBlobs:function(t,e){var r=0,n=t;!function t(o,i,s){if(!o)return o;if(Ge&&o instanceof Blob||Je&&o instanceof File){r++;var a=new FileReader;a.onload=function(){s?s[i]=this.result:n=this.result,--r||e(n)},a.readAsArrayBuffer(o)}else if(zt(o))for(var c=0;c<o.length;c++)t(o[c],c,o);else if("object"==typeof o&&!qe(o))for(var l in o)t(o[l],l,o)}(n),r||e(n)}},Ze=o((function(t,e){var r=Wt("socket.io-parser");function n(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=n,e.Decoder=s;var o=e.ERROR+'"encode error"';function i(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return o;n+=i}return r("encoded %j as %s",t,n),n}function s(){this.reconstructor=null}function a(t){this.reconPack=t,this.buffers=[]}function c(t){return{type:e.ERROR,data:"parser error: "+t}}n.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){$e.removeBlobs(t,(function(t){var r=$e.deconstructPacket(t),n=i(r.packet),o=r.buffers;o.unshift(n),e(o)}))}(t,n):n([i(t)])},Ht(s.prototype),s.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,o={type:Number(t.charAt(0))};if(null==e.types[o.type])return c("unknown packet type "+o.type);if(e.BINARY_EVENT===o.type||e.BINARY_ACK===o.type){for(var i="";"-"!==t.charAt(++n)&&(i+=t.charAt(n),n!=t.length););if(i!=Number(i)||"-"!==t.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===t.charAt(n+1))for(o.nsp="";++n;){if(","===(a=t.charAt(n)))break;if(o.nsp+=a,n===t.length)break}else o.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(o.id="";++n;){var a;if(null==(a=t.charAt(n))||Number(a)!=a){--n;break}if(o.id+=t.charAt(n),n===t.length)break}o.id=Number(o.id)}if(t.charAt(++n)){var l=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n));if(!(!1!==l&&(o.type===e.ERROR||zt(l))))return c("invalid payload");o.data=l}return r("decoded %s as %j",t,o),o}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new a(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!qe(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},a.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=$e.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},a.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}})),Qe=(Ze.protocol,Ze.types,Ze.CONNECT,Ze.DISCONNECT,Ze.EVENT,Ze.ACK,Ze.ERROR,Ze.BINARY_EVENT,Ze.BINARY_ACK,Ze.Encoder,Ze.Decoder,o((function(t){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}}))),tr=function(t){var e=t.xdomain,r=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||Qe))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}},er=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var n in t)r.call(t,n)&&e.push(n);return e},rr={}.toString,nr=Array.isArray||function(t){return"[object Array]"==rr.call(t)},or=Object.prototype.toString,ir="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===or.call(Blob),sr="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===or.call(File),ar=function t(e){if(!e||"object"!=typeof e)return!1;if(nr(e)){for(var r=0,n=e.length;r<n;r++)if(t(e[r]))return!0;return!1}if(We&&We(e)||"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||ir&&e instanceof Blob||sr&&e instanceof File)return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)&&t(e[o]))return!0;return!1};var cr=function(t,e,r){var n=t.byteLength;if(e=e||0,r=r||n,t.slice)return t.slice(e,r);if(e<0&&(e+=n),r<0&&(r+=n),r>n&&(r=n),e>=n||e>=r||0===n)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(r-e),s=e,a=0;s<r;s++,a++)i[a]=o[s];return i.buffer},lr=function(t,e,r){var n=!1;return r=r||hr,o.count=t,0===t?e():o;function o(t,i){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(n=!0,e(t),e=r):0!==o.count||n||e(null,i)}};function hr(){}
/*! https://mths.be/utf8js v2.1.2 by @mathias */var ur,fr,dr,pr=String.fromCharCode;function gr(t){for(var e,r,n=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(r=t.charCodeAt(o++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--):n.push(e);return n}function mr(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function yr(t,e){return pr(t>>e&63|128)}function br(t,e){if(0==(4294967168&t))return pr(t);var r="";return 0==(4294965248&t)?r=pr(t>>6&31|192):0==(4294901760&t)?(mr(t,e)||(t=65533),r=pr(t>>12&15|224),r+=yr(t,6)):0==(4292870144&t)&&(r=pr(t>>18&7|240),r+=yr(t,12),r+=yr(t,6)),r+=pr(63&t|128)}function vr(){if(dr>=fr)throw Error("Invalid byte index");var t=255&ur[dr];if(dr++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function _r(t){var e,r;if(dr>fr)throw Error("Invalid byte index");if(dr==fr)return!1;if(e=255&ur[dr],dr++,0==(128&e))return e;if(192==(224&e)){if((r=(31&e)<<6|vr())>=128)return r;throw Error("Invalid continuation byte")}if(224==(240&e)){if((r=(15&e)<<12|vr()<<6|vr())>=2048)return mr(r,t)?r:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(r=(7&e)<<18|vr()<<12|vr()<<6|vr())>=65536&&r<=1114111)return r;throw Error("Invalid UTF-8 detected")}var Cr={version:"2.1.2",encode:function(t,e){for(var r=!1!==(e=e||{}).strict,n=gr(t),o=n.length,i=-1,s="";++i<o;)s+=br(n[i],r);return s},decode:function(t,e){var r=!1!==(e=e||{}).strict;ur=gr(t),fr=ur.length,dr=0;for(var n,o=[];!1!==(n=_r(r));)o.push(n);return function(t){for(var e,r=t.length,n=-1,o="";++n<r;)(e=t[n])>65535&&(o+=pr((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=pr(e);return o}(o)}},wr=o((function(t,e){!function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),n=0;n<t.length;n++)r[t.charCodeAt(n)]=n;e.encode=function(e){var r,n=new Uint8Array(e),o=n.length,i="";for(r=0;r<o;r+=3)i+=t[n[r]>>2],i+=t[(3&n[r])<<4|n[r+1]>>4],i+=t[(15&n[r+1])<<2|n[r+2]>>6],i+=t[63&n[r+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,n,o,i,s,a=.75*t.length,c=t.length,l=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var h=new ArrayBuffer(a),u=new Uint8Array(h);for(e=0;e<c;e+=4)n=r[t.charCodeAt(e)],o=r[t.charCodeAt(e+1)],i=r[t.charCodeAt(e+2)],s=r[t.charCodeAt(e+3)],u[l++]=n<<2|o>>4,u[l++]=(15&o)<<4|i>>2,u[l++]=(3&i)<<6|63&s;return h}}()})),Ar=(wr.encode,wr.decode,void 0!==Ar?Ar:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder),Er=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),Tr=Er&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),Sr=Ar&&Ar.prototype.append&&Ar.prototype.getBlob;function Rr(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var r=new Uint8Array(t.byteLength);r.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=r.buffer}return e}return t}))}function kr(t,e){e=e||{};var r=new Ar;return Rr(t).forEach((function(t){r.append(t)})),e.type?r.getBlob(e.type):r.getBlob()}function Or(t,e){return new Blob(Rr(t),e||{})}"undefined"!=typeof Blob&&(kr.prototype=Blob.prototype,Or.prototype=Blob.prototype);var Ir=Er?Tr?Blob:Or:Sr?kr:void 0,xr=o((function(t,e){var r;"undefined"!=typeof ArrayBuffer&&(r=wr);var n="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),o="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),i=n||o;e.protocol=3;var s=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},a=er(s),c={type:"error",data:"parser error"};function l(t,e,r){for(var n=new Array(t.length),o=lr(t.length,r),i=function(t,r,o){e(r,(function(e,r){n[t]=r,o(e,n)}))},s=0;s<t.length;s++)i(s,t[s],o)}e.encodePacket=function(t,r,n,o){"function"==typeof r&&(o=r,r=!1),"function"==typeof n&&(o=n,n=null);var a=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&a instanceof ArrayBuffer)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=t.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=s[t.type];for(var c=0;c<i.length;c++)a[c+1]=i[c];return n(a.buffer)}(t,r,o);if(void 0!==Ir&&a instanceof Ir)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);if(i)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=new FileReader;return o.onload=function(){e.encodePacket({type:t.type,data:o.result},r,!0,n)},o.readAsArrayBuffer(t.data)}(t,r,n);var o=new Uint8Array(1);o[0]=s[t.type];var a=new Ir([o.buffer,t.data]);return n(a)}(t,r,o);if(a&&a.base64)return function(t,r){var n="b"+e.packets[t.type]+t.data.data;return r(n)}(t,o);var c=s[t.type];return void 0!==t.data&&(c+=n?Cr.encode(String(t.data),{strict:!1}):String(t.data)),o(""+c)},e.encodeBase64Packet=function(t,r){var n,o="b"+e.packets[t.type];if(void 0!==Ir&&t.data instanceof Ir){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];r(o+t)},i.readAsDataURL(t.data)}try{n=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),c=0;c<s.length;c++)a[c]=s[c];n=String.fromCharCode.apply(null,a)}return o+=btoa(n),r(o)},e.decodePacket=function(t,r,n){if(void 0===t)return c;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(n&&!1===(t=function(t){try{t=Cr.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return c;var o=t.charAt(0);return Number(o)==o&&a[o]?t.length>1?{type:a[o],data:t.substring(1)}:{type:a[o]}:c}o=new Uint8Array(t)[0];var i=cr(t,1);return Ir&&"blob"===r&&(i=new Ir([i])),{type:a[o],data:i}},e.decodeBase64Packet=function(t,e){var n=a[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var o=r.decode(t.substr(1));return"blob"===e&&Ir&&(o=new Ir([o])),{type:n,data:o}},e.encodePayload=function(t,r,n){"function"==typeof r&&(n=r,r=null);var o=ar(t);if(r&&o)return Ir&&!i?e.encodePayloadAsBlob(t,n):e.encodePayloadAsArrayBuffer(t,n);if(!t.length)return n("0:");l(t,(function(t,n){e.encodePacket(t,!!o&&r,!1,(function(t){n(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return n(e.join(""))}))},e.decodePayload=function(t,r,n){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,n);var o;if("function"==typeof r&&(n=r,r=null),""===t)return n(c,0,1);for(var i,s,a="",l=0,h=t.length;l<h;l++){var u=t.charAt(l);if(":"===u){if(""===a||a!=(i=Number(a)))return n(c,0,1);if(a!=(s=t.substr(l+1,i)).length)return n(c,0,1);if(s.length){if(o=e.decodePacket(s,r,!1),c.type===o.type&&c.data===o.data)return n(c,0,1);if(!1===n(o,l+i,h))return}l+=i,a=""}else a+=u}return""!==a?n(c,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,r){if(!t.length)return r(new ArrayBuffer(0));l(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){return r(null,t)}))}),(function(t,e){var n=e.reduce((function(t,e){var r;return t+(r="string"==typeof e?e.length:e.byteLength).toString().length+r+2}),0),o=new Uint8Array(n),i=0;return e.forEach((function(t){var e="string"==typeof t,r=t;if(e){for(var n=new Uint8Array(t.length),s=0;s<t.length;s++)n[s]=t.charCodeAt(s);r=n.buffer}o[i++]=e?0:1;var a=r.byteLength.toString();for(s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(n=new Uint8Array(r),s=0;s<n.length;s++)o[i++]=n[s]})),r(o.buffer)}))},e.encodePayloadAsBlob=function(t,r){l(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var n=new Uint8Array(t.length),o=0;o<t.length;o++)n[o]=t.charCodeAt(o);t=n.buffer,e[0]=0}var i=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,Ir){var a=new Ir([e.buffer,s.buffer,t]);r(null,a)}}))}),(function(t,e){return r(new Ir(e))}))},e.decodePayloadAsBinary=function(t,r,n){"function"==typeof r&&(n=r,r=null);for(var o=t,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],l="",h=1;255!==s[h];h++){if(l.length>310)return n(c,0,1);l+=s[h]}o=cr(o,2+l.length),l=parseInt(l);var u=cr(o,0,l);if(a)try{u=String.fromCharCode.apply(null,new Uint8Array(u))}catch(t){var f=new Uint8Array(u);u="";for(h=0;h<f.length;h++)u+=String.fromCharCode(f[h])}i.push(u),o=cr(o,l)}var d=i.length;i.forEach((function(t,o){n(e.decodePacket(t,r,!0),o,d)}))}})),Lr=(xr.protocol,xr.packets,xr.encodePacket,xr.encodeBase64Packet,xr.decodePacket,xr.decodeBase64Packet,xr.encodePayload,xr.decodePayload,xr.encodePayloadAsArrayBuffer,xr.encodePayloadAsBlob,xr.decodePayloadAsBinary,Pr);function Pr(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}Ht(Pr.prototype),Pr.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},Pr.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},Pr.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},Pr.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},Pr.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},Pr.prototype.onData=function(t){var e=xr.decodePacket(t,this.socket.binaryType);this.onPacket(e)},Pr.prototype.onPacket=function(t){this.emit("packet",t)},Pr.prototype.onClose=function(){this.readyState="closed",this.emit("close")};var Nr,Fr={encode:function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},decode:function(t){for(var e={},r=t.split("&"),n=0,o=r.length;n<o;n++){var i=r[n].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},Br=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t},Dr="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),Mr=64,Ur={},jr=0,Yr=0;function Wr(t){var e="";do{e=Dr[t%Mr]+e,t=Math.floor(t/Mr)}while(t>0);return e}function Hr(){var t=Wr(+new Date);return t!==Nr?(jr=0,Nr=t):t+"."+Wr(jr++)}for(;Yr<Mr;Yr++)Ur[Dr[Yr]]=Yr;Hr.encode=Wr,Hr.decode=function(t){var e=0;for(Yr=0;Yr<t.length;Yr++)e=e*Mr+Ur[t.charAt(Yr)];return e};var qr=Hr,zr=xt("engine.io-client:polling"),Vr=Xr,Kr=null!=new tr({xdomain:!1}).responseType;function Xr(t){var e=t&&t.forceBase64;Kr&&!e||(this.supportsBinary=!1),Lr.call(this,t)}Br(Xr,Lr),Xr.prototype.name="polling",Xr.prototype.doOpen=function(){this.poll()},Xr.prototype.pause=function(t){var e=this;function r(){zr("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(zr("we are currently polling - waiting to pause"),n++,this.once("pollComplete",(function(){zr("pre-pause polling complete"),--n||r()}))),this.writable||(zr("we are currently writing - waiting to pause"),n++,this.once("drain",(function(){zr("pre-pause writing complete"),--n||r()})))}else r()},Xr.prototype.poll=function(){zr("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},Xr.prototype.onData=function(t){var e=this;zr("polling got data %s",t);xr.decodePayload(t,this.socket.binaryType,(function(t,r,n){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():zr('ignoring poll - transport state "%s"',this.readyState))},Xr.prototype.doClose=function(){var t=this;function e(){zr("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(zr("transport open - closing"),e()):(zr("transport not open - deferring close"),this.once("open",e))},Xr.prototype.write=function(t){var e=this;this.writable=!1;var r=function(){e.writable=!0,e.emit("drain")};xr.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,r)}))},Xr.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(t[this.timestampParam]=qr()),this.supportsBinary||t.sid||(t.b64=1),t=Fr.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t};var Gr=xt("engine.io-client:polling-xhr"),Jr=Qr,$r=tn;function Zr(){}function Qr(t){if(Vr.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}}function tn(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(Br(Qr,Vr),Qr.prototype.supportsBinary=!0,Qr.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new tn(t)},Qr.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,n=this.request({method:"POST",data:t,isBinary:r}),o=this;n.on("success",e),n.on("error",(function(t){o.onError("xhr post error",t)})),this.sendXhr=n},Qr.prototype.doPoll=function(){Gr("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},Ht(tn.prototype),tn.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new tr(t),r=this;try{Gr("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var n in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(n)&&e.setRequestHeader(n,this.extraHeaders[n])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(r.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout((function(){r.onError("number"==typeof e.status?e.status:0)}),0))},Gr("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){r.onError(t)}),0)}"undefined"!=typeof document&&(this.index=tn.requestsCount++,tn.requests[this.index]=this)},tn.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},tn.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},tn.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},tn.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=Zr:this.xhr.onreadystatechange=Zr,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete tn.requests[this.index],this.xhr=null}},tn.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},tn.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},tn.prototype.abort=function(){this.cleanup()},tn.requestsCount=0,tn.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",rn);else if("function"==typeof addEventListener){var en="onpagehide"in self?"pagehide":"unload";addEventListener(en,rn,!1)}function rn(){for(var t in tn.requests)tn.requests.hasOwnProperty(t)&&tn.requests[t].abort()}Jr.Request=$r;var nn,on=hn,sn=/\n/g,an=/\\n/g;function cn(){}function ln(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==_?_:{}}function hn(t){if(Vr.call(this,t),this.query=this.query||{},!nn){var e=ln();nn=e.___eio=e.___eio||[]}this.index=nn.length;var r=this;nn.push((function(t){r.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){r.script&&(r.script.onerror=cn)}),!1)}Br(hn,Vr),hn.prototype.supportsBinary=!1,hn.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),Vr.prototype.doClose.call(this)},hn.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},hn.prototype.doWrite=function(t,e){var r=this;if(!this.form){var n,o=document.createElement("form"),i=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=s,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function a(){c(),e()}function c(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(t)}catch(t){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),c(),t=t.replace(an,"\\\n"),this.area.value=t.replace(sn,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&a()}:this.iframe.onload=a};var un,fn,dn=xt("engine.io-client:websocket");if("undefined"!=typeof WebSocket?un=WebSocket:"undefined"!=typeof self&&(un=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{fn={}}catch(t){}var pn=un||fn,gn=mn;function mn(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=un&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(pn=fn),Lr.call(this,t)}Br(mn,Lr),mn.prototype.name="websocket",mn.prototype.supportsBinary=!0,mn.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new pn(t,e):new pn(t):new pn(t,e,r)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},mn.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},mn.prototype.write=function(t){var e=this;this.writable=!1;for(var r=t.length,n=0,o=r;n<o;n++)!function(t){xr.encodePacket(t,e.supportsBinary,(function(n){if(!e.usingBrowserWebSocket){var o={};if(t.options&&(o.compress=t.options.compress),e.perMessageDeflate)("string"==typeof n?ie.byteLength(n):n.length)<e.perMessageDeflate.threshold&&(o.compress=!1)}try{e.usingBrowserWebSocket?e.ws.send(n):e.ws.send(n,o)}catch(t){dn("websocket closed before onclose event")}--r||i()}))}(t[n]);function i(){e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0)}},mn.prototype.onClose=function(){Lr.prototype.onClose.call(this)},mn.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},mn.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=qr()),this.supportsBinary||(t.b64=1),(t=Fr.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t},mn.prototype.check=function(){return!(!pn||"__initialize"in pn&&this.name===mn.prototype.name)};var yn={polling:function(t){var e=!1,r=!1,n=!1!==t.jsonp;if("undefined"!=typeof location){var o="https:"===location.protocol,i=location.port;i||(i=o?443:80),e=t.hostname!==location.hostname||i!==t.port,r=t.secure!==o}if(t.xdomain=e,t.xscheme=r,"open"in new tr(t)&&!t.forceJSONP)return new Jr(t);if(!n)throw new Error("JSONP disabled");return new on(t)},websocket:gn},bn=[].indexOf,vn=function(t,e){if(bn)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1},_n=xt("engine.io-client:socket"),Cn=wn;function wn(t,e){if(!(this instanceof wn))return new wn(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=Ct(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=Ct(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=Fr.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}wn.priorWebsocketSuccess=!1,Ht(wn.prototype),wn.protocol=xr.protocol,wn.Socket=wn,wn.Transport=Lr,wn.transports=yn,wn.parser=xr,wn.prototype.createTransport=function(t){_n('creating transport "%s"',t);var e=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.query);e.EIO=xr.protocol,e.transport=t;var r=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new yn[t]({query:e,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,withCredentials:r.withCredentials||this.withCredentials,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},wn.prototype.open=function(){var t;if(this.rememberUpgrade&&wn.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},wn.prototype.setTransport=function(t){_n("setting transport %s",t.name);var e=this;this.transport&&(_n("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},wn.prototype.probe=function(t){_n('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),r=!1,n=this;function o(){if(n.onlyBinaryUpgrades){var o=!this.supportsBinary&&n.transport.supportsBinary;r=r||o}r||(_n('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(o){if(!r)if("pong"===o.type&&"probe"===o.data){if(_n('probe transport "%s" pong',t),n.upgrading=!0,n.emit("upgrading",e),!e)return;wn.priorWebsocketSuccess="websocket"===e.name,_n('pausing current transport "%s"',n.transport.name),n.transport.pause((function(){r||"closed"!==n.readyState&&(_n("changing transport and sending upgrade packet"),h(),n.setTransport(e),e.send([{type:"upgrade"}]),n.emit("upgrade",e),e=null,n.upgrading=!1,n.flush())}))}else{_n('probe transport "%s" failed',t);var i=new Error("probe error");i.transport=e.name,n.emit("upgradeError",i)}})))}function i(){r||(r=!0,h(),e.close(),e=null)}function s(r){var o=new Error("probe error: "+r);o.transport=e.name,i(),_n('probe transport "%s" failed because of error: %s',t,r),n.emit("upgradeError",o)}function a(){s("transport closed")}function c(){s("socket closed")}function l(t){e&&t.name!==e.name&&(_n('"%s" works - aborting "%s"',t.name,e.name),i())}function h(){e.removeListener("open",o),e.removeListener("error",s),e.removeListener("close",a),n.removeListener("close",c),n.removeListener("upgrading",l)}wn.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",s),e.once("close",a),this.once("close",c),this.once("upgrading",l),e.open()},wn.prototype.onOpen=function(){if(_n("socket open"),this.readyState="open",wn.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){_n("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},wn.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(_n('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else _n('packet received with socket readyState "%s"',this.readyState)},wn.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},wn.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},wn.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){_n("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},wn.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},wn.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},wn.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(_n("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},wn.prototype.write=wn.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this},wn.prototype.sendPacket=function(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var o={type:t,data:e,options:r};this.emit("packetCreate",o),this.writeBuffer.push(o),n&&this.once("flush",n),this.flush()}},wn.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?n():e()})):this.upgrading?n():e()}function e(){t.onClose("forced close"),_n("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function n(){t.once("upgrade",r),t.once("upgradeError",r)}return this},wn.prototype.onError=function(t){_n("socket error %j",t),wn.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},wn.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){_n('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},wn.prototype.filterUpgrades=function(t){for(var e=[],r=0,n=t.length;r<n;r++)~vn(this.transports,t[r])&&e.push(t[r]);return e};var An=Cn,En=xr;An.parser=En;var Tn=function(t,e){for(var r=[],n=(e=e||0)||0;n<t.length;n++)r[n-e]=t[n];return r};var Sn=function(t,e,r){return t.on(e,r),{destroy:function(){t.removeListener(e,r)}}};var Rn=[].slice,kn=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=Rn.call(arguments,2);return function(){return e.apply(t,r.concat(Rn.call(arguments)))}},On=o((function(t,e){var r=xt("socket.io-client:socket");t.exports=i;var n={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},o=Ht.prototype.emit;function i(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}Ht(i.prototype),i.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[Sn(t,"open",kn(this,"onopen")),Sn(t,"packet",kn(this,"onpacket")),Sn(t,"close",kn(this,"onclose"))]}},i.prototype.open=i.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},i.prototype.send=function(){var t=Tn(arguments);return t.unshift("message"),this.emit.apply(this,t),this},i.prototype.emit=function(t){if(n.hasOwnProperty(t))return o.apply(this,arguments),this;var e=Tn(arguments),i={type:(void 0!==this.flags.binary?this.flags.binary:ar(e))?Ze.BINARY_EVENT:Ze.EVENT,data:e,options:{}};return i.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(r("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),i.id=this.ids++),this.connected?this.packet(i):this.sendBuffer.push(i),this.flags={},this},i.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},i.prototype.onopen=function(){if(r("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?Fr.encode(this.query):this.query;r("sending connect packet with query %s",t),this.packet({type:Ze.CONNECT,query:t})}else this.packet({type:Ze.CONNECT})},i.prototype.onclose=function(t){r("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},i.prototype.onpacket=function(t){var e=t.nsp===this.nsp,r=t.type===Ze.ERROR&&"/"===t.nsp;if(e||r)switch(t.type){case Ze.CONNECT:this.onconnect();break;case Ze.EVENT:case Ze.BINARY_EVENT:this.onevent(t);break;case Ze.ACK:case Ze.BINARY_ACK:this.onack(t);break;case Ze.DISCONNECT:this.ondisconnect();break;case Ze.ERROR:this.emit("error",t.data)}},i.prototype.onevent=function(t){var e=t.data||[];r("emitting event %j",e),null!=t.id&&(r("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?o.apply(this,e):this.receiveBuffer.push(e)},i.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var o=Tn(arguments);r("sending ack %j",o),e.packet({type:ar(o)?Ze.BINARY_ACK:Ze.ACK,id:t,data:o})}}},i.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(r("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):r("bad ack %s",t.id)},i.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},i.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)o.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},i.prototype.ondisconnect=function(){r("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},i.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},i.prototype.close=i.prototype.disconnect=function(){return this.connected&&(r("performing disconnect (%s)",this.nsp),this.packet({type:Ze.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},i.prototype.compress=function(t){return this.flags.compress=t,this},i.prototype.binary=function(t){return this.flags.binary=t,this}})),In=xn;function xn(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}xn.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},xn.prototype.reset=function(){this.attempts=0},xn.prototype.setMin=function(t){this.ms=t},xn.prototype.setMax=function(t){this.max=t},xn.prototype.setJitter=function(t){this.jitter=t};var Ln=xt("socket.io-client:manager"),Pn=Object.prototype.hasOwnProperty,Nn=Fn;function Fn(t,e){if(!(this instanceof Fn))return new Fn(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new In({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=e.parser||Ze;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}Fn.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)Pn.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},Fn.prototype.updateSocketIds=function(){for(var t in this.nsps)Pn.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},Fn.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},Ht(Fn.prototype),Fn.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},Fn.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},Fn.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},Fn.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},Fn.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},Fn.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},Fn.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},Fn.prototype.open=Fn.prototype.connect=function(t,e){if(Ln("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;Ln("opening %s",this.uri),this.engine=An(this.uri,this.opts);var r=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var o=Sn(r,"open",(function(){n.onopen(),t&&t()})),i=Sn(r,"error",(function(e){if(Ln("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else n.maybeReconnectOnOpen()}));if(!1!==this._timeout){var s=this._timeout;Ln("connect attempt will timeout after %d",s);var a=setTimeout((function(){Ln("connect attempt timed out after %d",s),o.destroy(),r.close(),r.emit("error","timeout"),n.emitAll("connect_timeout",s)}),s);this.subs.push({destroy:function(){clearTimeout(a)}})}return this.subs.push(o),this.subs.push(i),this},Fn.prototype.onopen=function(){Ln("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(Sn(t,"data",kn(this,"ondata"))),this.subs.push(Sn(t,"ping",kn(this,"onping"))),this.subs.push(Sn(t,"pong",kn(this,"onpong"))),this.subs.push(Sn(t,"error",kn(this,"onerror"))),this.subs.push(Sn(t,"close",kn(this,"onclose"))),this.subs.push(Sn(this.decoder,"decoded",kn(this,"ondecoded")))},Fn.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},Fn.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},Fn.prototype.ondata=function(t){this.decoder.add(t)},Fn.prototype.ondecoded=function(t){this.emit("packet",t)},Fn.prototype.onerror=function(t){Ln("error",t),this.emitAll("error",t)},Fn.prototype.socket=function(t,e){var r=this.nsps[t];if(!r){r=new On(this,t,e),this.nsps[t]=r;var n=this;r.on("connecting",o),r.on("connect",(function(){r.id=n.generateId(t)})),this.autoConnect&&o()}function o(){~vn(n.connecting,r)||n.connecting.push(r)}return r},Fn.prototype.destroy=function(t){var e=vn(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},Fn.prototype.packet=function(t){Ln("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(r){for(var n=0;n<r.length;n++)e.engine.write(r[n],t.options);e.encoding=!1,e.processPacketQueue()})))},Fn.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},Fn.prototype.cleanup=function(){Ln("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},Fn.prototype.close=Fn.prototype.disconnect=function(){Ln("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},Fn.prototype.onclose=function(t){Ln("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},Fn.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)Ln("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();Ln("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout((function(){t.skipReconnect||(Ln("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(Ln("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(Ln("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(r)}})}},Fn.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)};var Bn=o((function(t,e){var r=xt("socket.io-client");t.exports=e=o;var n=e.managers={};function o(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var o,i=Pt(t),s=i.source,a=i.id,c=i.path,l=n[a]&&c in n[a].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||l?(r("ignoring socket cache for %s",s),o=Nn(s,e)):(n[a]||(r("new io instance for %s",s),n[a]=Nn(s,e)),o=n[a]),i.query&&!e.query&&(e.query=i.query),o.socket(i.path,e)}e.protocol=Ze.protocol,e.connect=o,e.Manager=Nn,e.Socket=On})),Dn=(Bn.managers,Bn.protocol,Bn.connect,Bn.Manager,Bn.Socket,function(t){var e=y(null),r=b(e,2),n=r[0],o=r[1],i=y(!1),s=b(i,2),a=s[0],c=s[1],l=y(null),h=b(l,2),u=h[0],f=h[1];return v((function(){function e(){return(e=A(E.mark((function e(){var r,n;return E.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("/anonymous",{method:"POST",body:JSON.stringify({username:t}),headers:{"Content-Type":"application/json"}});case 3:return r=e.sent,e.next=6,r.json();case 6:n=e.sent,o(Bn("http://localhost:3000",{query:"token=".concat(n.token)})),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),f(e.t0);case 13:case"end":return e.stop()}}),e,null,[[0,10]])})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]),v((function(){null!==n&&(n.on("error",(function(t){f(t)})),n.on("connect",(function(){c(!0)})),n.on("message",(function(){})))}),[n]),{socket:n,connected:a,socketError:u}});var Mn=function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}};var Un=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)};var jn=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")};var Yn=function(t){return Mn(t)||Un(t)||jn()},Wn=function(t){var e=t.name,r=t.targetName,n=function(t){var e=t.socket,r=t.targetName,n=y(""),o=b(n,2),i=o[0],s=o[1],a=y(null),c=b(a,2),l=c[0],h=c[1],u=y(null),f=b(u,2),d=f[0],p=f[1],g=y(!1),m=b(g,2),_=m[0],C=m[1],w=y([]),A=b(w,2),E=A[0],T=A[1];return v((function(){null!==e&&(e.on("text_message",(function(t){var e=t.sender,r=t.message,n=t.datetime;h({sender:e,message:r,datetime:n})})),e.on("connect",(function(){C(!0)})),e.on("disconnect",(function(){C(!1)})),e.on("error",(function(t){T([].concat(Yn(E),[t]))})))})),{messageRecieved:l,messageSent:d,messageText:i,sendMessage:function(){var t=(new Date).getTime();e.emit("text_message",{reciever:r,message:i,datetime:t}),p({reciever:r,datetime:t,message:i}),s("")},handleMessageChange:function(t){s(t.target.value)},errors:E,connected:_}}({socket:t.socket,targetName:r}),o=n.connected,i=n.errors,s=n.handleMessageChange,a=n.messageRecieved,c=n.messageSent,l=n.messageText,h=n.sendMessage;return{messages:function(t){var e=t.name,r=t.messageRecieved,n=t.messageSent,o=y([]),i=b(o,2),s=i[0],a=i[1],c=function(t,e){var r=null===JSON.parse(localStorage.getItem(e))?[t]:[].concat(Yn(JSON.parse(localStorage.getItem(e))),[t]);return localStorage.setItem(e,JSON.stringify(r)),r};return v((function(){a(null===JSON.parse(localStorage.getItem(e))?[]:Yn(JSON.parse(localStorage.getItem(e))))}),[]),v((function(){if(null!==r){var t=r.datetime,n=r.message,o=r.sender;a(c({message:n,from:o,local:!1,datetime:t,to:e},e))}}),[r]),v((function(){if(null!==n){var t=n.datetime,r=n.message,o=n.reciever;a(c({message:r,from:e,local:!0,datetime:t,to:o},e))}}),[n]),{messages:s}}({name:e,messageRecieved:a,messageSent:c}).messages,messageRecieved:a,messageSent:c,messageText:l,sendMessage:h,errors:i,connected:o,handleMessageChange:s}},Hn=function(){var t=y(0),e=b(t,2),r=e[0],n=e[1],o=y(0),i=b(o,2),s=i[0],a=i[1],c=y(0),l=b(c,2),h=l[0],u=l[1],f=Dn("mario").socket,d=Dn("dragos").socket,p=Wn({name:"mario",targetName:"dragos",socket:f}),g=p.messages,_=p.messageRecieved,C=p.messageSent,w=p.messageText,A=p.sendMessage,E=p.errors,T=p.connected,S=p.handleMessageChange,R=Wn({name:"dragos",targetName:"mario",socket:d}),k=R.messages,O=R.messageRecieved,I=R.messageSent,x=R.messageText,L=R.sendMessage,P=R.errors,N=R.connected,F=R.handleMessageChange;return v((function(){null!==s&&a((function(t){return t+1}))}),[O]),v((function(){null!==r&&n((function(t){return t+1}))}),[_]),v((function(){0===h?n(0):a(0)}),[h]),m("div",{style:{width:"100%",height:"100%"}},m(Z,null,m(Z.Tab,{active:!0,onClick:function(){return u(0)}},m(Z.TabLabel,null,m("div",{style:{display:"flex",alignItems:"center"}},m("div",{style:{color:T?"green":"orange"}},"mario"),m("div",{className:"chip",style:{backgroundColor:r>0?"green":"darkgrey"}},r)))),m(Z.Tab,{onClick:function(){return u(1)}},m(Z.TabLabel,null,m("div",{style:{display:"flex",alignItems:"center"}},m("div",{style:{color:N?"green":"orange"}},"dragos"),m("div",{className:"chip",style:{backgroundColor:s>0?"green":"darkgrey"}},s))))),0===h&&m(bt,{handleMessageChange:S,connected:T,errors:E,messageSent:C,messageText:w,messages:g,sendMessage:A,messageRecieved:_,socket:d,name:"mario",targetName:"dragos"}),1===h&&m(bt,{handleMessageChange:F,connected:N,errors:P,messageSent:I,messageText:x,messages:k,sendMessage:L,messageRecieved:O,socket:d,name:"dragos",targetName:"mario"}))},qn=function(){return m(Hn,null)},zn=function(){return m("div",{style:{marginTop:200}},"WebRTC Messaging")},Vn=function(){return m("div",{style:{marginTop:200}},"WebRTCVideoChat")};export{qn as a,zn as b,Vn as c};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
