import{a as t,b as n,c as e,d as o,e as r,f as i,g as a,h as p}from"./chunk-10a91b1b.js";var u={};function s(t,n){for(var e in n)t[e]=n[e];return t}function c(t,n){return t.rank<n.rank?1:t.rank>n.rank?-1:t.index-n.index}function l(t,n){return t.index=n,t.rank=function(t){return t.props.default?0:(n=t.props.path,f(n).map(h).join(""));var n}(t),t.props}function f(t){return t.replace(/(^\/+|\/+$)/g,"").split("/")}function h(t){return":"==t.charAt(0)?1+"*+?".indexOf(t.charAt(t.length-1))||4:5}var d=null,m=[],g=[],y={};function v(){var t;return""+((t=d&&d.location?d.location:d&&d.getCurrentLocation?d.getCurrentLocation():"undefined"!=typeof location?location:y).pathname||"")+(t.search||"")}function b(t,n){return void 0===n&&(n=!1),"string"!=typeof t&&t.url&&(n=t.replace,t=t.url),function(t){for(var n=m.length;n--;)if(m[n].canRoute(t))return!0;return!1}(t)&&function(t,n){void 0===n&&(n="push"),d&&d[n]?d[n](t):"undefined"!=typeof history&&history[n+"State"]&&history[n+"State"](null,null,t)}(t,n?"replace":"push"),C(t)}function C(t){for(var n=!1,e=0;e<m.length;e++)!0===m[e].routeTo(t)&&(n=!0);for(var o=g.length;o--;)g[o](t);return n}function k(t){if(t&&t.getAttribute){var n=t.getAttribute("href"),e=t.getAttribute("target");if(n&&n.match(/^\//g)&&(!e||e.match(/^_?self$/i)))return b(n)}}function x(t){if(0==t.button)return k(t.currentTarget||t.target||this),O(t)}function O(t){return t&&(t.stopImmediatePropagation&&t.stopImmediatePropagation(),t.stopPropagation&&t.stopPropagation(),t.preventDefault()),!1}function j(t){if(!(t.ctrlKey||t.metaKey||t.altKey||t.shiftKey||0!==t.button)){var n=t.target;do{if("A"===String(n.nodeName).toUpperCase()&&n.getAttribute("href")){if(n.hasAttribute("native"))return;if(k(n))return O(t)}}while(n=n.parentNode)}}var U=!1;var D=function(e){function o(t){e.call(this,t),t.history&&(d=t.history),this.state={url:t.url||v()},U||("function"==typeof addEventListener&&(d||addEventListener("popstate",(function(){C(v())})),addEventListener("click",j)),U=!0)}return e&&(o.__proto__=e),o.prototype=Object.create(e&&e.prototype),o.prototype.constructor=o,o.prototype.shouldComponentUpdate=function(t){return!0!==t.static||(t.url!==this.props.url||t.onChange!==this.props.onChange)},o.prototype.canRoute=function(n){var e=t(this.props.children);return this.getMatchingChildren(e,n,!1).length>0},o.prototype.routeTo=function(t){this.setState({url:t});var n=this.canRoute(t);return this.updating||this.forceUpdate(),n},o.prototype.componentWillMount=function(){m.push(this),this.updating=!0},o.prototype.componentDidMount=function(){var t=this;d&&(this.unlisten=d.listen((function(n){t.routeTo(""+(n.pathname||"")+(n.search||""))}))),this.updating=!1},o.prototype.componentWillUnmount=function(){"function"==typeof this.unlisten&&this.unlisten(),m.splice(m.indexOf(this),1)},o.prototype.componentWillUpdate=function(){this.updating=!0},o.prototype.componentDidUpdate=function(){this.updating=!1},o.prototype.getMatchingChildren=function(t,e,o){return t.filter(l).sort(c).map((function(t){var r=function(t,n,e){var o,r=/(?:\?([^#]*))?(#.*)?$/,i=t.match(r),a={};if(i&&i[1])for(var p=i[1].split("&"),s=0;s<p.length;s++){var c=p[s].split("=");a[decodeURIComponent(c[0])]=decodeURIComponent(c.slice(1).join("="))}t=f(t.replace(r,"")),n=f(n||"");for(var l=Math.max(t.length,n.length),h=0;h<l;h++)if(n[h]&&":"===n[h].charAt(0)){var d=n[h].replace(/(^:|[+*?]+$)/g,""),m=(n[h].match(/[+*?]+$/)||u)[0]||"",g=~m.indexOf("+"),y=~m.indexOf("*"),v=t[h]||"";if(!v&&!y&&(m.indexOf("?")<0||g)){o=!1;break}if(a[d]=decodeURIComponent(v),g||y){a[d]=t.slice(h).map(decodeURIComponent).join("/");break}}else if(n[h]!==t[h]){o=!1;break}return(!0===e.default||!1!==o)&&a}(e,t.props.path,t.props);if(r){if(!1!==o){var i={url:e,matches:r};return s(i,r),delete i.ref,delete i.key,n(t,i)}return t}})).filter(Boolean)},o.prototype.render=function(n,e){var o=n.children,r=n.onChange,i=e.url,a=this.getMatchingChildren(t(o),i,!0),p=a[0]||null,u=this.previousUrl;return i!==u&&(this.previousUrl=i,"function"==typeof r&&r({router:this,url:i,previous:u,active:a,current:p})),p},o}(e);D.subscribers=g,D.getCurrentUrl=v,D.route=b,D.Router=D,D.Route=function(t){return o(t.component,t)},D.Link=function(t){return o("a",s({onClick:x},t))};var R=i((function(t,n){var e,o;t.exports=(e=r,o=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t},function(t){function n(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}(this,t.call(this));return e.state={componentData:null},e}return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}(n,t),n.prototype.loadComponent=function(){var t=this;if(this.props.component)return this.setState({componentData:this.props.component});var n,e=this.props.getComponent(this.props.url,(function(n){var e=n.component;e&&t.setState({componentData:e})}),o({},this.props,this.props.matches));e&&e.then&&(n=this.props.url,e.then((function(e){n===t.props.url?t.setState({componentData:e}):t.setState({componentData:null},(function(){t.loadComponent()}))})))},n.prototype.componentWillReceiveProps=function(t){var n=this;this.props.path&&this.props.path!==t.path&&this.setState({componentData:null},(function(){n.loadComponent()}))},n.prototype.componentWillMount=function(){this.loadComponent()},n.prototype.render=function(){return this.state.componentData?e.h(this.state.componentData,this.props):this.props.loading?this.props.loading():null},n}(e.Component))}));p(o("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",marginTop:70}},o("div",{style:{display:"flex",justifyContent:"center"}},o("h3",null,"SocketIO text messaging demo")),o((function(){return o("div",{style:{width:"100%"}},"Nav",o("a",{href:"/chatroom"},"chat room"),o(D,null,o(R,{path:"/chatroom",getComponent:function(){return import("./chunk-a2ce1aff.js").then((function(t){return t.default}))}})))}),null)),document.getElementById("root"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
