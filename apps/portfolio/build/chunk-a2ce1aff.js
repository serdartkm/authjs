import{f as t,g as e,c as r,i as n,d as o}from"./chunk-10a91b1b.js";var i=t((function(t){var e=function(t){var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function c(t,e,r,n){var o=e&&e.prototype instanceof y?e:y,i=Object.create(o.prototype),s=new x(n||[]);return i._invoke=function(t,e,r){var n=h;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===l){if("throw"===o)throw i;return R()}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var a=E(s,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=l,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=u(t,e,r);if("normal"===c.type){if(n=r.done?l:f,c.arg===d)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=l,r.method="throw",r.arg=c.arg)}}}(t,r,s),i}function u(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var h="suspendedStart",f="suspendedYield",p="executing",l="completed",d={};function y(){}function g(){}function m(){}var v={};v[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(B([])));w&&w!==r&&n.call(w,i)&&(v=w);var C=m.prototype=y.prototype=Object.create(v);function k(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function A(t){var e;this._invoke=function(r,o){function i(){return new Promise((function(e,i){!function e(r,o,i,s){var a=u(t[r],t,o);if("throw"!==a.type){var c=a.arg,h=c.value;return h&&"object"==typeof h&&n.call(h,"__await")?Promise.resolve(h.__await).then((function(t){e("next",t,i,s)}),(function(t){e("throw",t,i,s)})):Promise.resolve(h).then((function(t){c.value=t,i(c)}),(function(t){return e("throw",t,i,s)}))}s(a.arg)}(r,o,e,i)}))}return e=e?e.then(i,i):i()}}function E(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,E(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=u(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,d;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function B(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,s=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return s.next=s}}return{next:R}}function R(){return{value:e,done:!0}}return g.prototype=C.constructor=m,m.constructor=g,m[a]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(C),t},t.awrap=function(t){return{__await:t}},k(A.prototype),A.prototype[s]=function(){return this},t.AsyncIterator=A,t.async=function(e,r,n,o){var i=new A(c(e,r,n,o));return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},k(C),C[a]="Generator",C[i]=function(){return this},C.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=B,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(_),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return a.type="throw",a.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i],a=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var c=n.call(s,"catchLoc"),u=n.call(s,"finallyLoc");if(c&&u){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=t,s.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),_(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;_(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:B(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}));function s(t,e,r,n,o,i,s){try{var a=t[i](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,o)}var a=function(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){s(i,n,o,a,c,"next",t)}function c(t){s(i,n,o,a,c,"throw",t)}a(void 0)}))}};var c=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")};function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var h=function(t,e,r){return e&&u(t.prototype,e),r&&u(t,r),t},f=t((function(t){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(n){return"function"==typeof Symbol&&"symbol"===e(Symbol.iterator)?t.exports=r=function(t){return e(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)},r(n)}t.exports=r}));var p=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t};var l=function(t,e){return!e||"object"!==f(e)&&"function"!=typeof e?p(t):e},d=t((function(t){function e(r){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(r)}t.exports=e})),y=t((function(t){function e(r,n){return t.exports=e=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},e(r,n)}t.exports=e}));var g=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)};var m=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},v=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,b=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],w=function(t){var e=t,r=t.indexOf("["),n=t.indexOf("]");-1!=r&&-1!=n&&(t=t.substring(0,r)+t.substring(r,n).replace(/:/g,";")+t.substring(n,t.length));for(var o=v.exec(t||""),i={},s=14;s--;)i[b[s]]=o[s]||"";return-1!=r&&-1!=n&&(i.source=e,i.host=i.host.substring(1,i.host.length-1).replace(/;/g,":"),i.authority=i.authority.replace("[","").replace("]","").replace(/;/g,":"),i.ipv6uri=!0),i},C="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function k(){throw new Error("setTimeout has not been defined")}function A(){throw new Error("clearTimeout has not been defined")}var E=k,S=A;function _(t){if(E===setTimeout)return setTimeout(t,0);if((E===k||!E)&&setTimeout)return E=setTimeout,setTimeout(t,0);try{return E(t,0)}catch(e){try{return E.call(null,t,0)}catch(e){return E.call(this,t,0)}}}"function"==typeof C.setTimeout&&(E=setTimeout),"function"==typeof C.clearTimeout&&(S=clearTimeout);var x,B=[],R=!1,P=-1;function F(){R&&x&&(R=!1,x.length?B=x.concat(B):P=-1,B.length&&T())}function T(){if(!R){var t=_(F);R=!0;for(var e=B.length;e;){for(x=B,B=[];++P<e;)x&&x[P].run();P=-1,e=B.length}x=null,R=!1,function(t){if(S===clearTimeout)return clearTimeout(t);if((S===A||!S)&&clearTimeout)return S=clearTimeout,clearTimeout(t);try{S(t)}catch(e){try{return S.call(null,t)}catch(e){return S.call(this,t)}}}(t)}}function O(t,e){this.fun=t,this.array=e}O.prototype.run=function(){this.fun.apply(null,this.array)};function N(){}var D=N,j=N,L=N,U=N,I=N,M=N,q=N;var Y=C.performance||{},H=Y.now||Y.mozNow||Y.msNow||Y.oNow||Y.webkitNow||function(){return(new Date).getTime()};var z=new Date;var J={nextTick:function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];B.push(new O(t,e)),1!==B.length||R||_(T)},title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:D,addListener:j,once:L,off:U,removeListener:I,removeAllListeners:M,emit:q,binding:function(t){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(t){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(t){var e=.001*H.call(Y),r=Math.floor(e),n=Math.floor(e%1*1e9);return t&&(r-=t[0],(n-=t[1])<0&&(r--,n+=1e9)),[r,n]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-z)/1e3}},W=1e3,X=60*W,V=60*X,$=24*V,K=7*$,G=365.25*$,Z=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*G;case"weeks":case"week":case"w":return r*K;case"days":case"day":case"d":return r*$;case"hours":case"hour":case"hrs":case"hr":case"h":return r*V;case"minutes":case"minute":case"mins":case"min":case"m":return r*X;case"seconds":case"second":case"secs":case"sec":case"s":return r*W;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===r&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=$)return Q(t,e,$,"day");if(e>=V)return Q(t,e,V,"hour");if(e>=X)return Q(t,e,X,"minute");if(e>=W)return Q(t,e,W,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=$)return Math.round(t/$)+"d";if(e>=V)return Math.round(t/V)+"h";if(e>=X)return Math.round(t/X)+"m";if(e>=W)return Math.round(t/W)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function Q(t,e,r,n){var o=e>=1.5*r;return Math.round(t/r)+" "+n+(o?"s":"")}var tt=function(t){function e(t){let e=0;for(let r=0;r<t.length;r++)e=(e<<5)-e+t.charCodeAt(r),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let i;function s(...t){if(!s.enabled)return;const e=s,n=Number(new Date),o=n-(i||n);e.diff=o,e.prev=i,e.curr=n,i=n,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;a++;const i=r.formatters[o];if("function"==typeof i){const r=t[a];n=i.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=n,s.extend=o,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function n(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function i(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},r.disable=function(){const t=[...r.names.map(i),...r.skips.map(i).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(e=0;e<o;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=Z,Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r},et=t((function(t,e){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,o=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(n++,"%c"===t&&(o=n))}),e.splice(o,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==J&&"env"in J&&(t=J.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=tt(e);const{formatters:r}=t.exports;r.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}})),rt=(et.log,et.formatArgs,et.save,et.load,et.useColors,et.storage,et.colors,et("socket.io-client:url")),nt=function(t,e){var r=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(rt("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),rt("parse %s",t),r=w(t));r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443"));r.path=r.path||"/";var n=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+n+":"+r.port,r.href=r.protocol+"://"+n+(e&&e.port===r.port?"":":"+r.port),r};var ot=1e3,it=60*ot,st=60*it,at=24*st,ct=365.25*at,ut=function(t,e){e=e||{};var r=typeof t;if("string"===r&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*ct;case"days":case"day":case"d":return r*at;case"hours":case"hour":case"hrs":case"hr":case"h":return r*st;case"minutes":case"minute":case"mins":case"min":case"m":return r*it;case"seconds":case"second":case"secs":case"sec":case"s":return r*ot;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===r&&!1===isNaN(t))return e.long?function(t){return ht(t,at,"day")||ht(t,st,"hour")||ht(t,it,"minute")||ht(t,ot,"second")||t+" ms"}(t):function(t){if(t>=at)return Math.round(t/at)+"d";if(t>=st)return Math.round(t/st)+"h";if(t>=it)return Math.round(t/it)+"m";if(t>=ot)return Math.round(t/ot)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function ht(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}var ft=t((function(t,e){function r(t){var r;function o(){if(o.enabled){var t=o,n=+new Date,i=n-(r||n);t.diff=i,t.prev=r,t.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;c++;var o=e.formatters[n];if("function"==typeof o){var i=s[c];r=o.call(t,i),s.splice(c,1),c--}return r})),e.formatArgs.call(t,s),(o.log||e.log||console.log.bind(console)).apply(t,s)}}return o.namespace=t,o.enabled=e.enabled(t),o.useColors=e.useColors(),o.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),o.destroy=n,"function"==typeof e.init&&e.init(o),e.instances.push(o),o}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var i=e.instances[r];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=ut,e.instances=[],e.names=[],e.skips=[],e.formatters={}})),pt=(ft.coerce,ft.disable,ft.enable,ft.enabled,ft.humanize,ft.instances,ft.names,ft.skips,ft.formatters,t((function(t,e){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==J&&"env"in J&&(t=J.env.DEBUG),t}(e=t.exports=ft).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))})),t.splice(i,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())}))),lt=(pt.log,pt.formatArgs,pt.save,pt.load,pt.useColors,pt.storage,pt.colors,t((function(t){function e(t){if(t)return function(t){for(var r in e.prototype)t[r]=e.prototype[r];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<n.length;o++)if((r=n[o])===e||r.fn===e){n.splice(o,1);break}return this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var n=0,o=(r=r.slice(0)).length;n<o;++n)r[n].apply(this,e);return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}}))),dt={}.toString,yt=Array.isArray||function(t){return"[object Array]"==dt.call(t)},gt=[],mt=[],vt="undefined"!=typeof Uint8Array?Uint8Array:Array,bt=!1;function wt(){bt=!0;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0,r=t.length;e<r;++e)gt[e]=t[e],mt[t.charCodeAt(e)]=e;mt["-".charCodeAt(0)]=62,mt["_".charCodeAt(0)]=63}function Ct(t,e,r){for(var n,o,i=[],s=e;s<r;s+=3)n=(t[s]<<16)+(t[s+1]<<8)+t[s+2],i.push(gt[(o=n)>>18&63]+gt[o>>12&63]+gt[o>>6&63]+gt[63&o]);return i.join("")}function kt(t){var e;bt||wt();for(var r=t.length,n=r%3,o="",i=[],s=0,a=r-n;s<a;s+=16383)i.push(Ct(t,s,s+16383>a?a:s+16383));return 1===n?(e=t[r-1],o+=gt[e>>2],o+=gt[e<<4&63],o+="=="):2===n&&(e=(t[r-2]<<8)+t[r-1],o+=gt[e>>10],o+=gt[e>>4&63],o+=gt[e<<2&63],o+="="),i.push(o),i.join("")}function At(t,e,r,n,o){var i,s,a=8*o-n-1,c=(1<<a)-1,u=c>>1,h=-7,f=r?o-1:0,p=r?-1:1,l=t[e+f];for(f+=p,i=l&(1<<-h)-1,l>>=-h,h+=a;h>0;i=256*i+t[e+f],f+=p,h-=8);for(s=i&(1<<-h)-1,i>>=-h,h+=n;h>0;s=256*s+t[e+f],f+=p,h-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(l?-1:1);s+=Math.pow(2,n),i-=u}return(l?-1:1)*s*Math.pow(2,i-n)}function Et(t,e,r,n,o,i){var s,a,c,u=8*i-o-1,h=(1<<u)-1,f=h>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,l=n?0:i-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+f>=1?p/c:p*Math.pow(2,1-f))*c>=2&&(s++,c/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*c-1)*Math.pow(2,o),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;t[r+l]=255&a,l+=d,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;t[r+l]=255&s,l+=d,s/=256,u-=8);t[r+l-d]|=128*y}var St={}.toString,_t=Array.isArray||function(t){return"[object Array]"==St.call(t)};function xt(){return Rt.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Bt(t,e){if(xt()<e)throw new RangeError("Invalid typed array length");return Rt.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=Rt.prototype:(null===t&&(t=new Rt(e)),t.length=e),t}function Rt(t,e,r){if(!(Rt.TYPED_ARRAY_SUPPORT||this instanceof Rt))return new Rt(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return Tt(this,t)}return Pt(this,t,e,r)}function Pt(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);Rt.TYPED_ARRAY_SUPPORT?(t=e).__proto__=Rt.prototype:t=Ot(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!Rt.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|jt(e,r),o=(t=Bt(t,n)).write(e,r);o!==n&&(t=t.slice(0,o));return t}(t,e,r):function(t,e){if(Dt(e)){var r=0|Nt(e.length);return 0===(t=Bt(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?Bt(t,0):Ot(t,e);if("Buffer"===e.type&&_t(e.data))return Ot(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function Ft(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function Tt(t,e){if(Ft(e),t=Bt(t,e<0?0:0|Nt(e)),!Rt.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function Ot(t,e){var r=e.length<0?0:0|Nt(e.length);t=Bt(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function Nt(t){if(t>=xt())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+xt().toString(16)+" bytes");return 0|t}function Dt(t){return!(null==t||!t._isBuffer)}function jt(t,e){if(Dt(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return ue(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return he(t).length;default:if(n)return ue(t).length;e=(""+e).toLowerCase(),n=!0}}function Lt(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return Zt(this,e,r);case"utf8":case"utf-8":return Vt(this,e,r);case"ascii":return Kt(this,e,r);case"latin1":case"binary":return Gt(this,e,r);case"base64":return Xt(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Qt(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function Ut(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function It(t,e,r,n,o){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(o)return-1;r=t.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof e&&(e=Rt.from(e,n)),Dt(e))return 0===e.length?-1:Mt(t,e,r,n,o);if("number"==typeof e)return e&=255,Rt.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):Mt(t,[e],r,n,o);throw new TypeError("val must be string, number or Buffer")}function Mt(t,e,r,n,o){var i,s=1,a=t.length,c=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var h=-1;for(i=r;i<a;i++)if(u(t,i)===u(e,-1===h?0:i-h)){if(-1===h&&(h=i),i-h+1===c)return h*s}else-1!==h&&(i-=i-h),h=-1}else for(r+c>a&&(r=a-c),i=r;i>=0;i--){for(var f=!0,p=0;p<c;p++)if(u(t,i+p)!==u(e,p)){f=!1;break}if(f)return i}return-1}function qt(t,e,r,n){r=Number(r)||0;var o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function Yt(t,e,r,n){return fe(ue(e,t.length-r),t,r,n)}function Ht(t,e,r,n){return fe(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function zt(t,e,r,n){return Ht(t,e,r,n)}function Jt(t,e,r,n){return fe(he(e),t,r,n)}function Wt(t,e,r,n){return fe(function(t,e){for(var r,n,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(e,t.length-r),t,r,n)}function Xt(t,e,r){return 0===e&&r===t.length?kt(t):kt(t.slice(e,r))}function Vt(t,e,r){r=Math.min(t.length,r);for(var n=[],o=e;o<r;){var i,s,a,c,u=t[o],h=null,f=u>239?4:u>223?3:u>191?2:1;if(o+f<=r)switch(f){case 1:u<128&&(h=u);break;case 2:128==(192&(i=t[o+1]))&&(c=(31&u)<<6|63&i)>127&&(h=c);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(c=(15&u)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(h=c);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(h=c)}null===h?(h=65533,f=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),o+=f}return function(t){var e=t.length;if(e<=$t)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=$t));return r}(n)}Rt.TYPED_ARRAY_SUPPORT=void 0===C.TYPED_ARRAY_SUPPORT||C.TYPED_ARRAY_SUPPORT,Rt.poolSize=8192,Rt._augment=function(t){return t.__proto__=Rt.prototype,t},Rt.from=function(t,e,r){return Pt(null,t,e,r)},Rt.TYPED_ARRAY_SUPPORT&&(Rt.prototype.__proto__=Uint8Array.prototype,Rt.__proto__=Uint8Array),Rt.alloc=function(t,e,r){return function(t,e,r,n){return Ft(e),e<=0?Bt(t,e):void 0!==r?"string"==typeof n?Bt(t,e).fill(r,n):Bt(t,e).fill(r):Bt(t,e)}(null,t,e,r)},Rt.allocUnsafe=function(t){return Tt(null,t)},Rt.allocUnsafeSlow=function(t){return Tt(null,t)},Rt.isBuffer=pe,Rt.compare=function(t,e){if(!Dt(t)||!Dt(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0},Rt.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Rt.concat=function(t,e){if(!_t(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return Rt.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=Rt.allocUnsafe(e),o=0;for(r=0;r<t.length;++r){var i=t[r];if(!Dt(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},Rt.byteLength=jt,Rt.prototype._isBuffer=!0,Rt.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)Ut(this,e,e+1);return this},Rt.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)Ut(this,e,e+3),Ut(this,e+1,e+2);return this},Rt.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)Ut(this,e,e+7),Ut(this,e+1,e+6),Ut(this,e+2,e+5),Ut(this,e+3,e+4);return this},Rt.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?Vt(this,0,t):Lt.apply(this,arguments)},Rt.prototype.equals=function(t){if(!Dt(t))throw new TypeError("Argument must be a Buffer");return this===t||0===Rt.compare(this,t)},Rt.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},Rt.prototype.compare=function(t,e,r,n,o){if(!Dt(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),e<0||r>t.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&e>=r)return 0;if(n>=o)return-1;if(e>=r)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(n,o),u=t.slice(e,r),h=0;h<a;++h)if(c[h]!==u[h]){i=c[h],s=u[h];break}return i<s?-1:s<i?1:0},Rt.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},Rt.prototype.indexOf=function(t,e,r){return It(this,t,e,r,!0)},Rt.prototype.lastIndexOf=function(t,e,r){return It(this,t,e,r,!1)},Rt.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-e;if((void 0===r||r>o)&&(r=o),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return qt(this,t,e,r);case"utf8":case"utf-8":return Yt(this,t,e,r);case"ascii":return Ht(this,t,e,r);case"latin1":case"binary":return zt(this,t,e,r);case"base64":return Jt(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Wt(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},Rt.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var $t=4096;function Kt(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(127&t[o]);return n}function Gt(t,e,r){var n="";r=Math.min(t.length,r);for(var o=e;o<r;++o)n+=String.fromCharCode(t[o]);return n}function Zt(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=e;i<r;++i)o+=ce(t[i]);return o}function Qt(t,e,r){for(var n=t.slice(e,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function te(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function ee(t,e,r,n,o,i){if(!Dt(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function re(t,e,r,n){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-r,2);o<i;++o)t[r+o]=(e&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function ne(t,e,r,n){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-r,4);o<i;++o)t[r+o]=e>>>8*(n?o:3-o)&255}function oe(t,e,r,n,o,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function ie(t,e,r,n,o){return o||oe(t,0,r,4),Et(t,e,r,n,23,4),r+4}function se(t,e,r,n,o){return o||oe(t,0,r,8),Et(t,e,r,n,52,8),r+8}Rt.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),Rt.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=Rt.prototype;else{var o=e-t;r=new Rt(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+t]}return r},Rt.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||te(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n},Rt.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||te(t,e,this.length);for(var n=this[t+--e],o=1;e>0&&(o*=256);)n+=this[t+--e]*o;return n},Rt.prototype.readUInt8=function(t,e){return e||te(t,1,this.length),this[t]},Rt.prototype.readUInt16LE=function(t,e){return e||te(t,2,this.length),this[t]|this[t+1]<<8},Rt.prototype.readUInt16BE=function(t,e){return e||te(t,2,this.length),this[t]<<8|this[t+1]},Rt.prototype.readUInt32LE=function(t,e){return e||te(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Rt.prototype.readUInt32BE=function(t,e){return e||te(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Rt.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||te(t,e,this.length);for(var n=this[t],o=1,i=0;++i<e&&(o*=256);)n+=this[t+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*e)),n},Rt.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||te(t,e,this.length);for(var n=e,o=1,i=this[t+--n];n>0&&(o*=256);)i+=this[t+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},Rt.prototype.readInt8=function(t,e){return e||te(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},Rt.prototype.readInt16LE=function(t,e){e||te(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},Rt.prototype.readInt16BE=function(t,e){e||te(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},Rt.prototype.readInt32LE=function(t,e){return e||te(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Rt.prototype.readInt32BE=function(t,e){return e||te(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Rt.prototype.readFloatLE=function(t,e){return e||te(t,4,this.length),At(this,t,!0,23,4)},Rt.prototype.readFloatBE=function(t,e){return e||te(t,4,this.length),At(this,t,!1,23,4)},Rt.prototype.readDoubleLE=function(t,e){return e||te(t,8,this.length),At(this,t,!0,52,8)},Rt.prototype.readDoubleBE=function(t,e){return e||te(t,8,this.length),At(this,t,!1,52,8)},Rt.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||ee(this,t,e,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[e]=255&t;++i<r&&(o*=256);)this[e+i]=t/o&255;return e+r},Rt.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||ee(this,t,e,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+r},Rt.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,1,255,0),Rt.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},Rt.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,2,65535,0),Rt.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):re(this,t,e,!0),e+2},Rt.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,2,65535,0),Rt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):re(this,t,e,!1),e+2},Rt.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,4,4294967295,0),Rt.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):ne(this,t,e,!0),e+4},Rt.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,4,4294967295,0),Rt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):ne(this,t,e,!1),e+4},Rt.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);ee(this,t,e,r,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<r&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},Rt.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var o=Math.pow(2,8*r-1);ee(this,t,e,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+r},Rt.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,1,127,-128),Rt.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},Rt.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,2,32767,-32768),Rt.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):re(this,t,e,!0),e+2},Rt.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,2,32767,-32768),Rt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):re(this,t,e,!1),e+2},Rt.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,4,2147483647,-2147483648),Rt.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):ne(this,t,e,!0),e+4},Rt.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||ee(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),Rt.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):ne(this,t,e,!1),e+4},Rt.prototype.writeFloatLE=function(t,e,r){return ie(this,t,e,!0,r)},Rt.prototype.writeFloatBE=function(t,e,r){return ie(this,t,e,!1,r)},Rt.prototype.writeDoubleLE=function(t,e,r){return se(this,t,e,!0,r)},Rt.prototype.writeDoubleBE=function(t,e,r){return se(this,t,e,!1,r)},Rt.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var o,i=n-r;if(this===t&&r<e&&e<n)for(o=i-1;o>=0;--o)t[o+e]=this[o+r];else if(i<1e3||!Rt.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+i),e);return i},Rt.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Rt.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{var s=Dt(t)?t:ue(new Rt(t,n).toString()),a=s.length;for(i=0;i<r-e;++i)this[i+e]=s[i%a]}return this};var ae=/[^+\/0-9A-Za-z-_]/g;function ce(t){return t<16?"0"+t.toString(16):t.toString(16)}function ue(t,e){var r;e=e||1/0;for(var n=t.length,o=null,i=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((e-=1)<0)break;i.push(r)}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function he(t){return function(t){var e,r,n,o,i,s;bt||wt();var a=t.length;if(a%4>0)throw new Error("Invalid string. Length must be a multiple of 4");i="="===t[a-2]?2:"="===t[a-1]?1:0,s=new vt(3*a/4-i),n=i>0?a-4:a;var c=0;for(e=0,r=0;e<n;e+=4,r+=3)o=mt[t.charCodeAt(e)]<<18|mt[t.charCodeAt(e+1)]<<12|mt[t.charCodeAt(e+2)]<<6|mt[t.charCodeAt(e+3)],s[c++]=o>>16&255,s[c++]=o>>8&255,s[c++]=255&o;return 2===i?(o=mt[t.charCodeAt(e)]<<2|mt[t.charCodeAt(e+1)]>>4,s[c++]=255&o):1===i&&(o=mt[t.charCodeAt(e)]<<10|mt[t.charCodeAt(e+1)]<<4|mt[t.charCodeAt(e+2)]>>2,s[c++]=o>>8&255,s[c++]=255&o),s}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(ae,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function fe(t,e,r,n){for(var o=0;o<n&&!(o+r>=e.length||o>=t.length);++o)e[o+r]=t[o];return o}function pe(t){return null!=t&&(!!t._isBuffer||le(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&le(t.slice(0,0))}(t))}function le(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}var de=function(t){return ye&&pe(t)||ge&&(t instanceof ArrayBuffer||me(t))},ye=!0,ge="function"==typeof ArrayBuffer,me=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer};var ve=Object.prototype.toString,be="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===ve.call(Blob),we="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===ve.call(File);var Ce={deconstructPacket:function(t){var e=[],r=t.data,n=t;return n.data=function t(e,r){if(!e)return e;if(de(e)){var n={_placeholder:!0,num:r.length};return r.push(e),n}if(yt(e)){for(var o=new Array(e.length),i=0;i<e.length;i++)o[i]=t(e[i],r);return o}if("object"==typeof e&&!(e instanceof Date)){o={};for(var s in e)o[s]=t(e[s],r);return o}return e}(r,e),n.attachments=e.length,{packet:n,buffers:e}},reconstructPacket:function(t,e){return t.data=function t(e,r){if(!e)return e;if(e&&e._placeholder)return r[e.num];if(yt(e))for(var n=0;n<e.length;n++)e[n]=t(e[n],r);else if("object"==typeof e)for(var o in e)e[o]=t(e[o],r);return e}(t.data,e),t.attachments=void 0,t},removeBlobs:function(t,e){var r=0,n=t;!function t(o,i,s){if(!o)return o;if(be&&o instanceof Blob||we&&o instanceof File){r++;var a=new FileReader;a.onload=function(){s?s[i]=this.result:n=this.result,--r||e(n)},a.readAsArrayBuffer(o)}else if(yt(o))for(var c=0;c<o.length;c++)t(o[c],c,o);else if("object"==typeof o&&!de(o))for(var u in o)t(o[u],u,o)}(n),r||e(n)}},ke=t((function(t,e){var r=pt("socket.io-parser");function n(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=n,e.Decoder=s;var o=e.ERROR+'"encode error"';function i(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return o;n+=i}return r("encoded %j as %s",t,n),n}function s(){this.reconstructor=null}function a(t){this.reconPack=t,this.buffers=[]}function c(t){return{type:e.ERROR,data:"parser error: "+t}}n.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){Ce.removeBlobs(t,(function(t){var r=Ce.deconstructPacket(t),n=i(r.packet),o=r.buffers;o.unshift(n),e(o)}))}(t,n):n([i(t)])},lt(s.prototype),s.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,o={type:Number(t.charAt(0))};if(null==e.types[o.type])return c("unknown packet type "+o.type);if(e.BINARY_EVENT===o.type||e.BINARY_ACK===o.type){for(var i="";"-"!==t.charAt(++n)&&(i+=t.charAt(n),n!=t.length););if(i!=Number(i)||"-"!==t.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===t.charAt(n+1))for(o.nsp="";++n;){if(","===(a=t.charAt(n)))break;if(o.nsp+=a,n===t.length)break}else o.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(o.id="";++n;){var a;if(null==(a=t.charAt(n))||Number(a)!=a){--n;break}if(o.id+=t.charAt(n),n===t.length)break}o.id=Number(o.id)}if(t.charAt(++n)){var u=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n));if(!(!1!==u&&(o.type===e.ERROR||yt(u))))return c("invalid payload");o.data=u}return r("decoded %s as %j",t,o),o}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new a(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!de(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},a.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=Ce.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},a.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}})),Ae=(ke.protocol,ke.types,ke.CONNECT,ke.DISCONNECT,ke.EVENT,ke.ACK,ke.ERROR,ke.BINARY_EVENT,ke.BINARY_ACK,ke.Encoder,ke.Decoder,t((function(t){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}}))),Ee=function(t){var e=t.xdomain,r=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||Ae))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}},Se=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var n in t)r.call(t,n)&&e.push(n);return e},_e={}.toString,xe=Array.isArray||function(t){return"[object Array]"==_e.call(t)},Be=Object.prototype.toString,Re="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Be.call(Blob),Pe="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Be.call(File),Fe=function t(e){if(!e||"object"!=typeof e)return!1;if(xe(e)){for(var r=0,n=e.length;r<n;r++)if(t(e[r]))return!0;return!1}if(pe&&pe(e)||"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||Re&&e instanceof Blob||Pe&&e instanceof File)return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)&&t(e[o]))return!0;return!1};var Te=function(t,e,r){var n=t.byteLength;if(e=e||0,r=r||n,t.slice)return t.slice(e,r);if(e<0&&(e+=n),r<0&&(r+=n),r>n&&(r=n),e>=n||e>=r||0===n)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(r-e),s=e,a=0;s<r;s++,a++)i[a]=o[s];return i.buffer},Oe=function(t,e,r){var n=!1;return r=r||Ne,o.count=t,0===t?e():o;function o(t,i){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(n=!0,e(t),e=r):0!==o.count||n||e(null,i)}};function Ne(){}
/*! https://mths.be/utf8js v2.1.2 by @mathias */var De,je,Le,Ue=String.fromCharCode;function Ie(t){for(var e,r,n=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(r=t.charCodeAt(o++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--):n.push(e);return n}function Me(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function qe(t,e){return Ue(t>>e&63|128)}function Ye(t,e){if(0==(4294967168&t))return Ue(t);var r="";return 0==(4294965248&t)?r=Ue(t>>6&31|192):0==(4294901760&t)?(Me(t,e)||(t=65533),r=Ue(t>>12&15|224),r+=qe(t,6)):0==(4292870144&t)&&(r=Ue(t>>18&7|240),r+=qe(t,12),r+=qe(t,6)),r+=Ue(63&t|128)}function He(){if(Le>=je)throw Error("Invalid byte index");var t=255&De[Le];if(Le++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function ze(t){var e,r;if(Le>je)throw Error("Invalid byte index");if(Le==je)return!1;if(e=255&De[Le],Le++,0==(128&e))return e;if(192==(224&e)){if((r=(31&e)<<6|He())>=128)return r;throw Error("Invalid continuation byte")}if(224==(240&e)){if((r=(15&e)<<12|He()<<6|He())>=2048)return Me(r,t)?r:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(r=(7&e)<<18|He()<<12|He()<<6|He())>=65536&&r<=1114111)return r;throw Error("Invalid UTF-8 detected")}var Je={version:"2.1.2",encode:function(t,e){for(var r=!1!==(e=e||{}).strict,n=Ie(t),o=n.length,i=-1,s="";++i<o;)s+=Ye(n[i],r);return s},decode:function(t,e){var r=!1!==(e=e||{}).strict;De=Ie(t),je=De.length,Le=0;for(var n,o=[];!1!==(n=ze(r));)o.push(n);return function(t){for(var e,r=t.length,n=-1,o="";++n<r;)(e=t[n])>65535&&(o+=Ue((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=Ue(e);return o}(o)}},We=t((function(t,e){!function(){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),n=0;n<t.length;n++)r[t.charCodeAt(n)]=n;e.encode=function(e){var r,n=new Uint8Array(e),o=n.length,i="";for(r=0;r<o;r+=3)i+=t[n[r]>>2],i+=t[(3&n[r])<<4|n[r+1]>>4],i+=t[(15&n[r+1])<<2|n[r+2]>>6],i+=t[63&n[r+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,n,o,i,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var h=new ArrayBuffer(a),f=new Uint8Array(h);for(e=0;e<c;e+=4)n=r[t.charCodeAt(e)],o=r[t.charCodeAt(e+1)],i=r[t.charCodeAt(e+2)],s=r[t.charCodeAt(e+3)],f[u++]=n<<2|o>>4,f[u++]=(15&o)<<4|i>>2,f[u++]=(3&i)<<6|63&s;return h}}()})),Xe=(We.encode,We.decode,void 0!==Xe?Xe:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder),Ve=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),$e=Ve&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),Ke=Xe&&Xe.prototype.append&&Xe.prototype.getBlob;function Ge(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var r=new Uint8Array(t.byteLength);r.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=r.buffer}return e}return t}))}function Ze(t,e){e=e||{};var r=new Xe;return Ge(t).forEach((function(t){r.append(t)})),e.type?r.getBlob(e.type):r.getBlob()}function Qe(t,e){return new Blob(Ge(t),e||{})}"undefined"!=typeof Blob&&(Ze.prototype=Blob.prototype,Qe.prototype=Blob.prototype);var tr=Ve?$e?Blob:Qe:Ke?Ze:void 0,er=t((function(t,e){var r;"undefined"!=typeof ArrayBuffer&&(r=We);var n="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),o="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),i=n||o;e.protocol=3;var s=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},a=Se(s),c={type:"error",data:"parser error"};function u(t,e,r){for(var n=new Array(t.length),o=Oe(t.length,r),i=function(t,r,o){e(r,(function(e,r){n[t]=r,o(e,n)}))},s=0;s<t.length;s++)i(s,t[s],o)}e.encodePacket=function(t,r,n,o){"function"==typeof r&&(o=r,r=!1),"function"==typeof n&&(o=n,n=null);var a=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&a instanceof ArrayBuffer)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=t.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=s[t.type];for(var c=0;c<i.length;c++)a[c+1]=i[c];return n(a.buffer)}(t,r,o);if(void 0!==tr&&a instanceof tr)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);if(i)return function(t,r,n){if(!r)return e.encodeBase64Packet(t,n);var o=new FileReader;return o.onload=function(){e.encodePacket({type:t.type,data:o.result},r,!0,n)},o.readAsArrayBuffer(t.data)}(t,r,n);var o=new Uint8Array(1);o[0]=s[t.type];var a=new tr([o.buffer,t.data]);return n(a)}(t,r,o);if(a&&a.base64)return function(t,r){var n="b"+e.packets[t.type]+t.data.data;return r(n)}(t,o);var c=s[t.type];return void 0!==t.data&&(c+=n?Je.encode(String(t.data),{strict:!1}):String(t.data)),o(""+c)},e.encodeBase64Packet=function(t,r){var n,o="b"+e.packets[t.type];if(void 0!==tr&&t.data instanceof tr){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];r(o+t)},i.readAsDataURL(t.data)}try{n=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),c=0;c<s.length;c++)a[c]=s[c];n=String.fromCharCode.apply(null,a)}return o+=btoa(n),r(o)},e.decodePacket=function(t,r,n){if(void 0===t)return c;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(n&&!1===(t=function(t){try{t=Je.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return c;var o=t.charAt(0);return Number(o)==o&&a[o]?t.length>1?{type:a[o],data:t.substring(1)}:{type:a[o]}:c}o=new Uint8Array(t)[0];var i=Te(t,1);return tr&&"blob"===r&&(i=new tr([i])),{type:a[o],data:i}},e.decodeBase64Packet=function(t,e){var n=a[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var o=r.decode(t.substr(1));return"blob"===e&&tr&&(o=new tr([o])),{type:n,data:o}},e.encodePayload=function(t,r,n){"function"==typeof r&&(n=r,r=null);var o=Fe(t);if(r&&o)return tr&&!i?e.encodePayloadAsBlob(t,n):e.encodePayloadAsArrayBuffer(t,n);if(!t.length)return n("0:");u(t,(function(t,n){e.encodePacket(t,!!o&&r,!1,(function(t){n(null,function(t){return t.length+":"+t}(t))}))}),(function(t,e){return n(e.join(""))}))},e.decodePayload=function(t,r,n){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,n);var o;if("function"==typeof r&&(n=r,r=null),""===t)return n(c,0,1);for(var i,s,a="",u=0,h=t.length;u<h;u++){var f=t.charAt(u);if(":"===f){if(""===a||a!=(i=Number(a)))return n(c,0,1);if(a!=(s=t.substr(u+1,i)).length)return n(c,0,1);if(s.length){if(o=e.decodePacket(s,r,!1),c.type===o.type&&c.data===o.data)return n(c,0,1);if(!1===n(o,u+i,h))return}u+=i,a=""}else a+=f}return""!==a?n(c,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,r){if(!t.length)return r(new ArrayBuffer(0));u(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){return r(null,t)}))}),(function(t,e){var n=e.reduce((function(t,e){var r;return t+(r="string"==typeof e?e.length:e.byteLength).toString().length+r+2}),0),o=new Uint8Array(n),i=0;return e.forEach((function(t){var e="string"==typeof t,r=t;if(e){for(var n=new Uint8Array(t.length),s=0;s<t.length;s++)n[s]=t.charCodeAt(s);r=n.buffer}o[i++]=e?0:1;var a=r.byteLength.toString();for(s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(n=new Uint8Array(r),s=0;s<n.length;s++)o[i++]=n[s]})),r(o.buffer)}))},e.encodePayloadAsBlob=function(t,r){u(t,(function(t,r){e.encodePacket(t,!0,!0,(function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var n=new Uint8Array(t.length),o=0;o<t.length;o++)n[o]=t.charCodeAt(o);t=n.buffer,e[0]=0}var i=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,tr){var a=new tr([e.buffer,s.buffer,t]);r(null,a)}}))}),(function(t,e){return r(new tr(e))}))},e.decodePayloadAsBinary=function(t,r,n){"function"==typeof r&&(n=r,r=null);for(var o=t,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],u="",h=1;255!==s[h];h++){if(u.length>310)return n(c,0,1);u+=s[h]}o=Te(o,2+u.length),u=parseInt(u);var f=Te(o,0,u);if(a)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(t){var p=new Uint8Array(f);f="";for(h=0;h<p.length;h++)f+=String.fromCharCode(p[h])}i.push(f),o=Te(o,u)}var l=i.length;i.forEach((function(t,o){n(e.decodePacket(t,r,!0),o,l)}))}})),rr=(er.protocol,er.packets,er.encodePacket,er.encodeBase64Packet,er.decodePacket,er.decodeBase64Packet,er.encodePayload,er.decodePayload,er.encodePayloadAsArrayBuffer,er.encodePayloadAsBlob,er.decodePayloadAsBinary,nr);function nr(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}lt(nr.prototype),nr.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},nr.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},nr.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},nr.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},nr.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},nr.prototype.onData=function(t){var e=er.decodePacket(t,this.socket.binaryType);this.onPacket(e)},nr.prototype.onPacket=function(t){this.emit("packet",t)},nr.prototype.onClose=function(){this.readyState="closed",this.emit("close")};var or,ir={encode:function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},decode:function(t){for(var e={},r=t.split("&"),n=0,o=r.length;n<o;n++){var i=r[n].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},sr=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t},ar="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),cr=64,ur={},hr=0,fr=0;function pr(t){var e="";do{e=ar[t%cr]+e,t=Math.floor(t/cr)}while(t>0);return e}function lr(){var t=pr(+new Date);return t!==or?(hr=0,or=t):t+"."+pr(hr++)}for(;fr<cr;fr++)ur[ar[fr]]=fr;lr.encode=pr,lr.decode=function(t){var e=0;for(fr=0;fr<t.length;fr++)e=e*cr+ur[t.charAt(fr)];return e};var dr=lr,yr=et("engine.io-client:polling"),gr=vr,mr=null!=new Ee({xdomain:!1}).responseType;function vr(t){var e=t&&t.forceBase64;mr&&!e||(this.supportsBinary=!1),rr.call(this,t)}sr(vr,rr),vr.prototype.name="polling",vr.prototype.doOpen=function(){this.poll()},vr.prototype.pause=function(t){var e=this;function r(){yr("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(yr("we are currently polling - waiting to pause"),n++,this.once("pollComplete",(function(){yr("pre-pause polling complete"),--n||r()}))),this.writable||(yr("we are currently writing - waiting to pause"),n++,this.once("drain",(function(){yr("pre-pause writing complete"),--n||r()})))}else r()},vr.prototype.poll=function(){yr("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},vr.prototype.onData=function(t){var e=this;yr("polling got data %s",t);er.decodePayload(t,this.socket.binaryType,(function(t,r,n){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():yr('ignoring poll - transport state "%s"',this.readyState))},vr.prototype.doClose=function(){var t=this;function e(){yr("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(yr("transport open - closing"),e()):(yr("transport not open - deferring close"),this.once("open",e))},vr.prototype.write=function(t){var e=this;this.writable=!1;var r=function(){e.writable=!0,e.emit("drain")};er.encodePayload(t,this.supportsBinary,(function(t){e.doWrite(t,r)}))},vr.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(t[this.timestampParam]=dr()),this.supportsBinary||t.sid||(t.b64=1),t=ir.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t};var br=et("engine.io-client:polling-xhr"),wr=Ar,Cr=Er;function kr(){}function Ar(t){if(gr.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}}function Er(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(sr(Ar,gr),Ar.prototype.supportsBinary=!0,Ar.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new Er(t)},Ar.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,n=this.request({method:"POST",data:t,isBinary:r}),o=this;n.on("success",e),n.on("error",(function(t){o.onError("xhr post error",t)})),this.sendXhr=n},Ar.prototype.doPoll=function(){br("xhr poll");var t=this.request(),e=this;t.on("data",(function(t){e.onData(t)})),t.on("error",(function(t){e.onError("xhr poll error",t)})),this.pollXhr=t},lt(Er.prototype),Er.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new Ee(t),r=this;try{br("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var n in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(n)&&e.setRequestHeader(n,this.extraHeaders[n])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(r.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout((function(){r.onError("number"==typeof e.status?e.status:0)}),0))},br("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((function(){r.onError(t)}),0)}"undefined"!=typeof document&&(this.index=Er.requestsCount++,Er.requests[this.index]=this)},Er.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},Er.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},Er.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},Er.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=kr:this.xhr.onreadystatechange=kr,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete Er.requests[this.index],this.xhr=null}},Er.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},Er.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},Er.prototype.abort=function(){this.cleanup()},Er.requestsCount=0,Er.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",_r);else if("function"==typeof addEventListener){var Sr="onpagehide"in self?"pagehide":"unload";addEventListener(Sr,_r,!1)}function _r(){for(var t in Er.requests)Er.requests.hasOwnProperty(t)&&Er.requests[t].abort()}wr.Request=Cr;var xr,Br=Or,Rr=/\n/g,Pr=/\\n/g;function Fr(){}function Tr(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}}function Or(t){if(gr.call(this,t),this.query=this.query||{},!xr){var e=Tr();xr=e.___eio=e.___eio||[]}this.index=xr.length;var r=this;xr.push((function(t){r.onData(t)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){r.script&&(r.script.onerror=Fr)}),!1)}sr(Or,gr),Or.prototype.supportsBinary=!1,Or.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),gr.prototype.doClose.call(this)},Or.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)},Or.prototype.doWrite=function(t,e){var r=this;if(!this.form){var n,o=document.createElement("form"),i=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=s,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function a(){c(),e()}function c(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(t)}catch(t){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),c(),t=t.replace(Pr,"\\\n"),this.area.value=t.replace(Rr,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&a()}:this.iframe.onload=a};var Nr,Dr,jr=et("engine.io-client:websocket");if("undefined"!=typeof WebSocket?Nr=WebSocket:"undefined"!=typeof self&&(Nr=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{Dr={}}catch(An){}var Lr=Nr||Dr,Ur=Ir;function Ir(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=Nr&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(Lr=Dr),rr.call(this,t)}sr(Ir,rr),Ir.prototype.name="websocket",Ir.prototype.supportsBinary=!0,Ir.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new Lr(t,e):new Lr(t):new Lr(t,e,r)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},Ir.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},Ir.prototype.write=function(t){var e=this;this.writable=!1;for(var r=t.length,n=0,o=r;n<o;n++)!function(t){er.encodePacket(t,e.supportsBinary,(function(n){if(!e.usingBrowserWebSocket){var o={};if(t.options&&(o.compress=t.options.compress),e.perMessageDeflate)("string"==typeof n?Rt.byteLength(n):n.length)<e.perMessageDeflate.threshold&&(o.compress=!1)}try{e.usingBrowserWebSocket?e.ws.send(n):e.ws.send(n,o)}catch(t){jr("websocket closed before onclose event")}--r||i()}))}(t[n]);function i(){e.emit("flush"),setTimeout((function(){e.writable=!0,e.emit("drain")}),0)}},Ir.prototype.onClose=function(){rr.prototype.onClose.call(this)},Ir.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},Ir.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=dr()),this.supportsBinary||(t.b64=1),(t=ir.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t},Ir.prototype.check=function(){return!(!Lr||"__initialize"in Lr&&this.name===Ir.prototype.name)};var Mr={polling:function(t){var e=!1,r=!1,n=!1!==t.jsonp;if("undefined"!=typeof location){var o="https:"===location.protocol,i=location.port;i||(i=o?443:80),e=t.hostname!==location.hostname||i!==t.port,r=t.secure!==o}if(t.xdomain=e,t.xscheme=r,"open"in new Ee(t)&&!t.forceJSONP)return new wr(t);if(!n)throw new Error("JSONP disabled");return new Br(t)},websocket:Ur},qr=[].indexOf,Yr=function(t,e){if(qr)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1},Hr=et("engine.io-client:socket"),zr=Jr;function Jr(t,e){if(!(this instanceof Jr))return new Jr(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=w(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=w(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=ir.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}Jr.priorWebsocketSuccess=!1,lt(Jr.prototype),Jr.protocol=er.protocol,Jr.Socket=Jr,Jr.Transport=rr,Jr.transports=Mr,Jr.parser=er,Jr.prototype.createTransport=function(t){Hr('creating transport "%s"',t);var e=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.query);e.EIO=er.protocol,e.transport=t;var r=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new Mr[t]({query:e,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,withCredentials:r.withCredentials||this.withCredentials,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},Jr.prototype.open=function(){var t;if(this.rememberUpgrade&&Jr.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout((function(){e.emit("error","No transports available")}),0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},Jr.prototype.setTransport=function(t){Hr("setting transport %s",t.name);var e=this;this.transport&&(Hr("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",(function(){e.onDrain()})).on("packet",(function(t){e.onPacket(t)})).on("error",(function(t){e.onError(t)})).on("close",(function(){e.onClose("transport close")}))},Jr.prototype.probe=function(t){Hr('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),r=!1,n=this;function o(){if(n.onlyBinaryUpgrades){var o=!this.supportsBinary&&n.transport.supportsBinary;r=r||o}r||(Hr('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(function(o){if(!r)if("pong"===o.type&&"probe"===o.data){if(Hr('probe transport "%s" pong',t),n.upgrading=!0,n.emit("upgrading",e),!e)return;Jr.priorWebsocketSuccess="websocket"===e.name,Hr('pausing current transport "%s"',n.transport.name),n.transport.pause((function(){r||"closed"!==n.readyState&&(Hr("changing transport and sending upgrade packet"),h(),n.setTransport(e),e.send([{type:"upgrade"}]),n.emit("upgrade",e),e=null,n.upgrading=!1,n.flush())}))}else{Hr('probe transport "%s" failed',t);var i=new Error("probe error");i.transport=e.name,n.emit("upgradeError",i)}})))}function i(){r||(r=!0,h(),e.close(),e=null)}function s(r){var o=new Error("probe error: "+r);o.transport=e.name,i(),Hr('probe transport "%s" failed because of error: %s',t,r),n.emit("upgradeError",o)}function a(){s("transport closed")}function c(){s("socket closed")}function u(t){e&&t.name!==e.name&&(Hr('"%s" works - aborting "%s"',t.name,e.name),i())}function h(){e.removeListener("open",o),e.removeListener("error",s),e.removeListener("close",a),n.removeListener("close",c),n.removeListener("upgrading",u)}Jr.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",s),e.once("close",a),this.once("close",c),this.once("upgrading",u),e.open()},Jr.prototype.onOpen=function(){if(Hr("socket open"),this.readyState="open",Jr.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){Hr("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},Jr.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(Hr('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else Hr('packet received with socket readyState "%s"',this.readyState)},Jr.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},Jr.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout((function(){"closed"!==e.readyState&&e.onClose("ping timeout")}),t||e.pingInterval+e.pingTimeout)},Jr.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout((function(){Hr("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)}),t.pingInterval)},Jr.prototype.ping=function(){var t=this;this.sendPacket("ping",(function(){t.emit("ping")}))},Jr.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},Jr.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(Hr("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},Jr.prototype.write=Jr.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this},Jr.prototype.sendPacket=function(t,e,r,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var o={type:t,data:e,options:r};this.emit("packetCreate",o),this.writeBuffer.push(o),n&&this.once("flush",n),this.flush()}},Jr.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?n():e()})):this.upgrading?n():e()}function e(){t.onClose("forced close"),Hr("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function n(){t.once("upgrade",r),t.once("upgradeError",r)}return this},Jr.prototype.onError=function(t){Hr("socket error %j",t),Jr.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},Jr.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){Hr('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},Jr.prototype.filterUpgrades=function(t){for(var e=[],r=0,n=t.length;r<n;r++)~Yr(this.transports,t[r])&&e.push(t[r]);return e};var Wr=zr,Xr=er;Wr.parser=Xr;var Vr=function(t,e){for(var r=[],n=(e=e||0)||0;n<t.length;n++)r[n-e]=t[n];return r};var $r=function(t,e,r){return t.on(e,r),{destroy:function(){t.removeListener(e,r)}}};var Kr=[].slice,Gr=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=Kr.call(arguments,2);return function(){return e.apply(t,r.concat(Kr.call(arguments)))}},Zr=t((function(t,e){var r=et("socket.io-client:socket");t.exports=i;var n={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},o=lt.prototype.emit;function i(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}lt(i.prototype),i.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[$r(t,"open",Gr(this,"onopen")),$r(t,"packet",Gr(this,"onpacket")),$r(t,"close",Gr(this,"onclose"))]}},i.prototype.open=i.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},i.prototype.send=function(){var t=Vr(arguments);return t.unshift("message"),this.emit.apply(this,t),this},i.prototype.emit=function(t){if(n.hasOwnProperty(t))return o.apply(this,arguments),this;var e=Vr(arguments),i={type:(void 0!==this.flags.binary?this.flags.binary:Fe(e))?ke.BINARY_EVENT:ke.EVENT,data:e,options:{}};return i.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(r("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),i.id=this.ids++),this.connected?this.packet(i):this.sendBuffer.push(i),this.flags={},this},i.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},i.prototype.onopen=function(){if(r("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?ir.encode(this.query):this.query;r("sending connect packet with query %s",t),this.packet({type:ke.CONNECT,query:t})}else this.packet({type:ke.CONNECT})},i.prototype.onclose=function(t){r("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},i.prototype.onpacket=function(t){var e=t.nsp===this.nsp,r=t.type===ke.ERROR&&"/"===t.nsp;if(e||r)switch(t.type){case ke.CONNECT:this.onconnect();break;case ke.EVENT:case ke.BINARY_EVENT:this.onevent(t);break;case ke.ACK:case ke.BINARY_ACK:this.onack(t);break;case ke.DISCONNECT:this.ondisconnect();break;case ke.ERROR:this.emit("error",t.data)}},i.prototype.onevent=function(t){var e=t.data||[];r("emitting event %j",e),null!=t.id&&(r("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?o.apply(this,e):this.receiveBuffer.push(e)},i.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var o=Vr(arguments);r("sending ack %j",o),e.packet({type:Fe(o)?ke.BINARY_ACK:ke.ACK,id:t,data:o})}}},i.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(r("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):r("bad ack %s",t.id)},i.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},i.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)o.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},i.prototype.ondisconnect=function(){r("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},i.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},i.prototype.close=i.prototype.disconnect=function(){return this.connected&&(r("performing disconnect (%s)",this.nsp),this.packet({type:ke.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},i.prototype.compress=function(t){return this.flags.compress=t,this},i.prototype.binary=function(t){return this.flags.binary=t,this}})),Qr=tn;function tn(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}tn.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},tn.prototype.reset=function(){this.attempts=0},tn.prototype.setMin=function(t){this.ms=t},tn.prototype.setMax=function(t){this.max=t},tn.prototype.setJitter=function(t){this.jitter=t};var en=et("socket.io-client:manager"),rn=Object.prototype.hasOwnProperty,nn=on;function on(t,e){if(!(this instanceof on))return new on(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new Qr({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=e.parser||ke;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}on.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)rn.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},on.prototype.updateSocketIds=function(){for(var t in this.nsps)rn.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},on.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},lt(on.prototype),on.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},on.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},on.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},on.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},on.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},on.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},on.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},on.prototype.open=on.prototype.connect=function(t,e){if(en("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;en("opening %s",this.uri),this.engine=Wr(this.uri,this.opts);var r=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var o=$r(r,"open",(function(){n.onopen(),t&&t()})),i=$r(r,"error",(function(e){if(en("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else n.maybeReconnectOnOpen()}));if(!1!==this._timeout){var s=this._timeout;en("connect attempt will timeout after %d",s);var a=setTimeout((function(){en("connect attempt timed out after %d",s),o.destroy(),r.close(),r.emit("error","timeout"),n.emitAll("connect_timeout",s)}),s);this.subs.push({destroy:function(){clearTimeout(a)}})}return this.subs.push(o),this.subs.push(i),this},on.prototype.onopen=function(){en("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push($r(t,"data",Gr(this,"ondata"))),this.subs.push($r(t,"ping",Gr(this,"onping"))),this.subs.push($r(t,"pong",Gr(this,"onpong"))),this.subs.push($r(t,"error",Gr(this,"onerror"))),this.subs.push($r(t,"close",Gr(this,"onclose"))),this.subs.push($r(this.decoder,"decoded",Gr(this,"ondecoded")))},on.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},on.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},on.prototype.ondata=function(t){this.decoder.add(t)},on.prototype.ondecoded=function(t){this.emit("packet",t)},on.prototype.onerror=function(t){en("error",t),this.emitAll("error",t)},on.prototype.socket=function(t,e){var r=this.nsps[t];if(!r){r=new Zr(this,t,e),this.nsps[t]=r;var n=this;r.on("connecting",o),r.on("connect",(function(){r.id=n.generateId(t)})),this.autoConnect&&o()}function o(){~Yr(n.connecting,r)||n.connecting.push(r)}return r},on.prototype.destroy=function(t){var e=Yr(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},on.prototype.packet=function(t){en("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,(function(r){for(var n=0;n<r.length;n++)e.engine.write(r[n],t.options);e.encoding=!1,e.processPacketQueue()})))},on.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},on.prototype.cleanup=function(){en("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},on.prototype.close=on.prototype.disconnect=function(){en("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},on.prototype.onclose=function(t){en("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},on.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)en("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();en("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout((function(){t.skipReconnect||(en("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open((function(e){e?(en("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(en("reconnect success"),t.onreconnect())})))}),e);this.subs.push({destroy:function(){clearTimeout(r)}})}},on.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)};var sn=t((function(t,e){var r=et("socket.io-client");t.exports=e=o;var n=e.managers={};function o(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var o,i=nt(t),s=i.source,a=i.id,c=i.path,u=n[a]&&c in n[a].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||u?(r("ignoring socket cache for %s",s),o=nn(s,e)):(n[a]||(r("new io instance for %s",s),n[a]=nn(s,e)),o=n[a]),i.query&&!e.query&&(e.query=i.query),o.socket(i.path,e)}e.protocol=ke.protocol,e.connect=o,e.Manager=nn,e.Socket=Zr})),an=(sn.managers,sn.protocol,sn.connect,sn.Manager,sn.Socket,function(t){function e(){var t,r;c(this,e);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=l(this,(t=d(e)).call.apply(t,[this].concat(o))),m(p(r),"state",{token:null,socket:null,connected:!1}),r}var n;return g(e,r),h(e,[{key:"componentWillMount",value:(n=a(i.mark((function t(){var e,r,n,o=this;return i.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=this.props.username,t.prev=1,t.next=4,fetch("http://localhost:3000".concat("/anonymous"),{method:"POST",body:JSON.stringify({username:e}),headers:{"Content-Type":"application/json"}});case 4:return r=t.sent,t.next=7,r.json();case 7:n=t.sent,this.socket=sn("http://localhost:3000",{query:"token=".concat(n.token)}),this.socket.on("error",(function(t){console.log("error from socket",t)})),this.socket.on("connect",(function(){o.setState({connected:!0})})),this.setState({socket:this.socket}),t.next=17;break;case 14:t.prev=14,t.t0=t.catch(1),console.log("error....",t.t0);case 17:case"end":return t.stop()}}),t,this,[[1,14]])}))),function(){return n.apply(this,arguments)})},{key:"render",value:function(){var t=this.props.children,e=this.state.connected;return t({socket:this.state.socket,connected:e})}}]),e}());var cn=function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}};var un=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)};var hn=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")};var fn=function(t){return cn(t)||un(t)||hn()};var pn=function(t){if(Array.isArray(t))return t};var ln=function(t,e){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}};var dn=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")};var yn,gn,mn,vn=function(t,e){return pn(t)||ln(t,e)||dn()},bn=[],wn=n.__r,Cn=n.diffed,kn=n.__c,An=n.unmount;function En(t){n.__h&&n.__h(gn);var e=gn.__H||(gn.__H={t:[],u:[]});return t>=e.t.length&&e.t.push({}),e.t[t]}function Sn(t){return function(t,e,r){var n=En(yn++);return n.__c||(n.__c=gn,n.i=[r?r(e):Pn(void 0,e),function(e){var r=t(n.i[0],e);n.i[0]!==r&&(n.i[0]=r,n.__c.setState({}))}]),n.i}(Pn,t)}function _n(t,e){var r=En(yn++);(function(t,e){return!t||e.some((function(e,r){return e!==t[r]}))})(r.o,e)&&(r.i=t,r.o=e,gn.__H.u.push(r))}function xn(){bn.some((function(t){t.__P&&(t.__H.u.forEach(Bn),t.__H.u.forEach(Rn),t.__H.u=[])})),bn=[]}function Bn(t){t.m&&t.m()}function Rn(t){var e=t.i();"function"==typeof e&&(t.m=e)}function Pn(t,e){return"function"==typeof e?e(t):e}n.__r=function(t){wn&&wn(t),yn=0,(gn=t.__c).__H&&(gn.__H.u.forEach(Bn),gn.__H.u.forEach(Rn),gn.__H.u=[])},n.diffed=function(t){Cn&&Cn(t);var e=t.__c;if(e){var r=e.__H;r&&r.u.length&&(1!==bn.push(e)&&mn===n.requestAnimationFrame||((mn=n.requestAnimationFrame)||function(t){var e,r=function(){clearTimeout(n),cancelAnimationFrame(e),setTimeout(t)},n=setTimeout(r,100);"undefined"!=typeof window&&(e=requestAnimationFrame(r))})(xn))}},n.__c=function(t,e){e.some((function(t){t.__h.forEach(Bn),t.__h=t.__h.filter((function(t){return!t.i||Rn(t)}))})),kn&&kn(t,e)},n.unmount=function(t){An&&An(t);var e=t.__c;if(e){var r=e.__H;r&&r.t.forEach((function(t){return t.m&&t.m()}))}};var Fn=function(t){var e=t.datetime;return o("div",{style:{display:"flex"}},o("div",{style:{flex:"1"}},o("hr",null)),o("div",null,new Date(e).toLocaleDateString()),o("div",{style:{flex:1}},o("hr",null)))};function Tn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function On(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Tn(r,!0).forEach((function(e){m(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Tn(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var Nn=function(t){var e=t.children,r=t.side,n=t.style;return o("div",{style:On({display:"flex",justifyContent:"left"===r?"flex-start":"flex-end"},n)},e)},Dn=function(t){var e=t.message,r=t.backgroundColor,n=t.datetime;return o("div",{style:{backgroundColor:r,padding:5,margin:2,borderRadius:15,borderColor:"#9E9E9E",borderStyle:"solid",borderWidth:2,maxWidth:"100%",wordWrap:"break-word",wordBreak:"break-all",minWidth:"30%"}},o("div",null,e),o("div",{style:{fontSize:10,paddingTop:2,textAlign:"end"}},o("i",{style:{backgroundColor:"#efebe9"}},new Date(n).toLocaleTimeString())))},jn=function(t){var e=t.message,r=t.datetime;return o("div",{style:{display:"flex",alignItems:"center",marginLeft:45}},o(Dn,{message:e,datetime:r,backgroundColor:"#FFECB3"}))},Ln={height:30,width:40,padding:3,borderRadius:30,backgroundColor:"darkSmoke",borderStyle:"solid",borderWidth:2,display:"flex",justifyContent:"center",alignItems:"center",color:"#009688",borderColor:"#80cbc4"},Un=function(t){var e=t.letter;return o("div",{style:Ln},o("div",null,(void 0===e?"U":e).toUpperCase()))},In=function(t){var e=t.message,r=t.datetime,n=t.letter,i=t.local;return o("div",{style:{display:"flex",alignItems:"center"}},!i&&o(Un,{letter:n}),o(Dn,{message:e,datetime:r,backgroundColor:"#FFECB3"}))},Mn=function(t){var e=t.order,r=t.dateSpace;return o("div",null,r&&o(Fn,t),o(Nn,t,o("F"===e?In:jn,t)))};function qn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Yn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?qn(r,!0).forEach((function(e){m(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):qn(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var Hn=function(t){var e=Sn(t),r=vn(e,2),n=r[0],o=r[1];return _n((function(){o(function(){if(0===t.length)return[];var e=t[0].from,r=t[0].datetime;return t.map((function(t,n){if(0===n&&t.local)return Yn({},t,{side:"right",order:"F",dateSpace:!0});if(0===n&&!t.local)return Yn({},t,{side:"left",order:"F",dateSpace:!0,letter:void 0!==t.from[0]?t.from[0]:""});if(n>0&&e===t.from&&t.local)return new Date(r).getDate()!==new Date(t.datetime).getDate()?(e=t.from,r=t.datetime,Yn({},t,{side:"right",order:"S",dateSpace:!0})):(e=t.from,r=t.datetime,Yn({},t,{side:"right",order:"S",dateSpace:!1}));if(n>0&&e!==t.from&&t.local)return new Date(r).getDate()===new Date(t.datetime).getDate()?(e=t.from,r=t.datetime,Yn({},t,{side:"right",order:"F",dateSpace:!1})):(e=t.from,r=t.datetime,Yn({},t,{side:"right",order:"F",dateSpace:!0}));if(n>0&&e===t.from&&!t.local){if(new Date(r).getDate()!==new Date(t.datetime).getDate()){var o=void 0!==t.from[0]?t.from[0]:"";return r=t.datetime,Yn({},t,{side:"left",order:"S",dateSpace:!0,letter:o})}var i=void 0!==t.from[0]?t.from[0]:"";return r=t.datetime,Yn({},t,{side:"left",order:"S",dateSpace:!1,letter:i})}if(n>0&&e!==t.from&&!t.local){if(new Date(r).getDate()===new Date(t.datetime).getDate()){var s=void 0!==t.from[0]?t.from[0]:"";return e=t.from,r=t.datetime,Yn({},t,{side:"left",order:"F",dateSpace:!1,letter:s})}var a=void 0!==t.from[0]?t.from[0]:"";return e=t.from,r=t.datetime,Yn({},t,{side:"left",order:"F",dateSpace:!0,letter:a})}return null}))}())}),[t]),{mappedMessages:n}},zn=t((function(t){function e(){return t.exports=e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},e.apply(this,arguments)}t.exports=e})),Jn=function(t){var e=t.messages;return e.length>0?e.map((function(t,e){return o(Mn,zn({},t,{key:e}))})):null};function Wn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Xn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Wn(r,!0).forEach((function(e){m(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Wn(r).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}var Vn=function(t){function e(){return c(this,e),l(this,d(e).apply(this,arguments))}return g(e,r),h(e,[{key:"componentWillReceiveProps",value:function(){this.gotoBottom()}},{key:"componentDidUpdate",value:function(){this.gotoBottom()}},{key:"gotoBottom",value:function(){document.getElementsByName("msgViewScroller").forEach((function(t){t.scrollTop=t.scrollHeight-t.clientHeight}))}},{key:"render",value:function(){var t=this.props,e=t.children,r=t.style;return o("div",{name:"msgViewScroller",style:Xn({backgroundColor:"#edeff2",overflow:"auto",width:"100%",height:"100%"},r)},e)}}]),e}(),$n=function(t){var e=function(t){var e=Sn(t),r=vn(e,2),n=r[0],o=r[1];return _n((function(){o(t.sort((function(t,e){return t.datetime-e.datetime})))}),[t]),{sortedMessages:n}}(t.messages).sortedMessages,r=Hn(e).mappedMessages;return o(Vn,null,o(Jn,{messages:r}))},Kn=function(t){var e=t.onMessageChange,r=t.message,n=t.sendMessage,i=t.id,s=void 0===i?0:i,a=t.disabled;return o("div",{style:{display:"flex"}},o("input",{style:{flex:1},"data-testid":"message".concat(s),onInput:e,value:r,name:"message",type:"text",placeholder:"Enter message text"}),o("div",{style:{display:"flex"}},o("button",{"data-testid":"sendMessage".concat(s),disabled:""===r||a,style:{marginLeft:2,width:"100%"},onClick:n},o("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},o("path",{d:"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"}),o("path",{d:"M0 0h24v24H0z",fill:"none"})))))},Gn=function(t){var e=t.name,r=t.targetName,n=t.socket,i=t.id,s=void 0===i?0:i,a=t.height,c=void 0===a?"96vh":a,u=function(t){var e=t.socket,r=t.targetName,n=Sn(""),o=vn(n,2),i=o[0],s=o[1],a=Sn(null),c=vn(a,2),u=c[0],h=c[1],f=Sn(null),p=vn(f,2),l=p[0],d=p[1],y=Sn(!1),g=vn(y,2),m=g[0],v=g[1],b=Sn([]),w=vn(b,2),C=w[0],k=w[1];return _n((function(){null!==e&&(e.on("text_message",(function(t){var e=t.sender,r=t.message,n=t.datetime;h({sender:e,message:r,datetime:n})})),e.on("connect",(function(){v(!0)})),e.on("disconnect",(function(){v(!1)})),e.on("error",(function(t){k([].concat(fn(C),[t]))})))})),{messageRecieved:u,messageSent:l,messageText:i,sendMessage:function(){var t=(new Date).getTime();e.emit("text_message",{reciever:r,message:i,datetime:t}),d({reciever:r,datetime:t,message:i}),s("")},handleMessageChange:function(t){s(t.target.value)},errors:C,connected:m}}({socket:n,targetName:r}),h=u.messageSent,f=u.messageRecieved,p=u.messageText,l=u.sendMessage,d=u.handleMessageChange,y=function(t){var e=t.name,r=t.messageRecieved,n=t.messageSent,o=Sn([]),i=vn(o,2),s=i[0],a=i[1],c=function(t,e){var r=null===JSON.parse(localStorage.getItem(e))?[t]:[].concat(fn(JSON.parse(localStorage.getItem(e))),[t]);return localStorage.setItem(e,JSON.stringify(r)),r};return _n((function(){a(null===JSON.parse(localStorage.getItem(e))?[]:fn(JSON.parse(localStorage.getItem(e))))}),[]),_n((function(){if(null!==r){var t=r.datetime,n=r.message,o=r.sender;a(c({message:n,from:o,local:!1,datetime:t,to:e},e))}}),[r]),_n((function(){if(null!==n){var t=n.datetime,r=n.message,o=n.reciever;a(c({message:r,from:e,local:!0,datetime:t,to:o},e))}}),[n]),{messages:s}}({name:e,messageRecieved:f,messageSent:h}).messages;return o("div",{style:{height:c,width:"100%"}},o($n,{messages:y}),o(Kn,{disabled:null===n,id:s,message:p,sendMessage:l,onMessageChange:d}))},Zn=function(t){var e=t.name,r=t.targetName;return o(an,{username:e},(function(t){var n=t.socket,i=t.connected;return o("div",{style:{flex:1,margin:10}},o("div",null,"User:",e),o("div",null,i?o("i",{style:{color:"green"}},"connected"):o("i",{style:{color:"orange"}},"connecting...")),o(Gn,{height:"50vh",name:e,targetName:r,socket:n}))}))};export default function(){return o("div",{style:{display:"flex",alignItems:"center"}},o(Zn,{name:"mario",targetName:"dragos"}),o(Zn,{name:"dragos",targetName:"mario"}))}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
